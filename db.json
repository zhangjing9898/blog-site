{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/qrcode.png","path":"images/qrcode.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1557025438994},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1557025438995},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1557025438996},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1557025438997},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1557025438998},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1557025439034},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1557025439036},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1557025439038},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1557025439040},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1557025439043},{"_id":"themes/next/_config.yml","hash":"62f6963da1aae2f2363da29efe28aeaa49de37a7","modified":1557062494583},{"_id":"themes/next/bower.json","hash":"070292487d141982c9bef64bd32e1cb39d03d395","modified":1557025439046},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1557025439047},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1557025439090},{"_id":"themes/next/package.json","hash":"d3ea523f723aafd6bebcd8a47a0d976c69dfeaf5","modified":1557025439328},{"_id":"source/_posts/2017-09-09-ES6.markdown","hash":"e715f82f820891684e1e2e6c789f4049543aaf7a","modified":1548918959695},{"_id":"source/_posts/2017-09-16-node.js(1).markdown","hash":"ec157459196e37eba4fc4cf08ab06e098a02f3ee","modified":1548918959696},{"_id":"source/_posts/2017-09-17-node.js(2).markdown","hash":"1e0e6c1fd58031656b920dad7a1c8b9a26a5d43a","modified":1548918959697},{"_id":"source/_posts/2017-09-17-node.js(3).markdown","hash":"844671ec052f60973ee0cb3c3dd462251455474d","modified":1548918959698},{"_id":"source/_posts/2017-09-17-node.js(4).markdown","hash":"6129d84071725f1e61df3e48f36287cc06cdfc84","modified":1548918959699},{"_id":"source/_posts/2017-09-17-node.js(5).markdown","hash":"30d4761268a54b14248f9eaf5d7535a489a4b017","modified":1548918959700},{"_id":"source/_posts/2017-09-19-express框架.markdown","hash":"4753e4266112488e6ef8234c48e291b59adf42e1","modified":1548918959701},{"_id":"source/_posts/2017-09-20-中间件.markdown","hash":"c8a38ab222bb60205c7a2535fd61df7c215e134e","modified":1548918959702},{"_id":"source/_posts/2017-09-20-路由.markdown","hash":"8182f75230046ff5489f94253a57dc0afec28bde","modified":1548918959703},{"_id":"source/_posts/2017-09-23-mongoVUE.markdown","hash":"dda4d89b7177863e4b87ced3736fb34088b32051","modified":1548918959703},{"_id":"source/_posts/2017-09-25-cmd中kill 端口.markdown","hash":"35b7396b3265eca142ba1c018130ab03ac678e50","modified":1548918959704},{"_id":"source/_posts/2017-12-11-DHC安装.markdown","hash":"4c1febda4514b0a5bdd11fc64de534601bb321d5","modified":1548918959704},{"_id":"source/_posts/2018-01-21-css3瀑布流.markdown","hash":"9e1854f4932b4be92983b6913fb80cda5f5b9ceb","modified":1548918959705},{"_id":"source/_posts/2018-01-25-antd pro.markdown","hash":"1ed88f54fddca8d3d09d400ec2c4f3db7c299273","modified":1548918959705},{"_id":"source/_posts/2018-01-30-node爬知乎数据并分析.md","hash":"2d26206f210fc274c99015eae63a3b4e93402d52","modified":1548918959706},{"_id":"source/_posts/2018-01-31-react小记.markdown","hash":"9ced1fbc319b1333ec3d2bd3f66cd7ca19551aba","modified":1548918959706},{"_id":"source/_posts/2018-04-15-websocket.markdown","hash":"bda5db13ea06db2e315aa7128910d90d5ab248a4","modified":1548918959707},{"_id":"source/_posts/2018-04-17-js基础点.markdown","hash":"6d73cf1ca159cfbd95d61ac6e1dc420ed5cef7d7","modified":1548918959707},{"_id":"source/_posts/2018-04-19-iframe浅谈.markdown","hash":"509bd304a88269d2481eb21eef473222e6ed2bef","modified":1548918959708},{"_id":"source/_posts/2018-04-20-面试题总结.markdown","hash":"fd8ae3a41e1fb039af11663b56b52d6d4ad81ed5","modified":1548918959708},{"_id":"source/_posts/2018-04-21-js advance(1).markdown","hash":"6c8fac3dbe6ca78c5ace0ed4b3673304bcd45961","modified":1548918959709},{"_id":"source/_posts/2018-04-21-计网基础知识.markdown","hash":"3e40fc3d2b56358d0c98006d76f32dcb0a16bd2b","modified":1548918959709},{"_id":"source/_posts/2018-04-23-H5 web workers（多线程）.markdown","hash":"c3a4649d4e8c27fd0274b2c63e697c30e5c2978b","modified":1548918959710},{"_id":"source/_posts/2018-04-24-restful浅谈.markdown","hash":"912ba42fe85d1c6d740fc3a0c1e896e4dcf460d0","modified":1548918959711},{"_id":"source/_posts/2018-04-25-Node.js详解.markdown","hash":"c02994891fc5723ee9400b33330ba2ba905fd4ff","modified":1548918959712},{"_id":"source/_posts/2018-04-26-http-web综合问题.markdown","hash":"ef846ac268a0fce2b3f83f7c44448bd8c5b56320","modified":1548918959713},{"_id":"source/_posts/2018-04-27-css相关.markdown","hash":"07f71b6f1d874bc75dd4ca01587814d4c0421bae","modified":1548918959713},{"_id":"source/_posts/2018-04-28-BFC来清除浮动.markdown","hash":"fddd20d7171e90a81bb7fc9537c9f60bc05c219c","modified":1548918959714},{"_id":"source/_posts/2018-05-01-JS this的理解与运用.markdown","hash":"28f710c5364d4aacca50b8bac160151cbd188277","modified":1548918959715},{"_id":"source/_posts/2018-05-02-理解数据类型.markdown","hash":"89e951ff108332f17257393578428d11fa8a3ea8","modified":1548918959716},{"_id":"source/_posts/2018-05-03-数据-变量-内存 详解.markdown","hash":"d102f22b5244adaa0b0bef79b796733bb197c0a7","modified":1548918959716},{"_id":"source/_posts/2018-05-04-JS 对象理解.markdown","hash":"99b184d69891795dd6070a5f15f08e82e3f2059a","modified":1548918959717},{"_id":"source/_posts/2018-11-17-vue指令.markdown","hash":"990bd0495ea8b8ac865cad9a3290dbc08cb13074","modified":1548918959718},{"_id":"source/_posts/2018-11-22-开发tips.md","hash":"e16ed96eca05ebab0b93fdd8383ada14788a1182","modified":1548918959720},{"_id":"source/_posts/2018-11-18-vue自定义插件.md","hash":"005feb1b0f8c6507eee1bcb6258f8293eee409b7","modified":1548918959719},{"_id":"source/_posts/2018-11-24-vue源码解析（第二弹） 下午3.56.56.md","hash":"ca9b708c4cc7f2c765763e5a07372802de4c4fe3","modified":1548918959721},{"_id":"source/_posts/2018-11-25-vue源码解析(第三弹) 下午3.56.56.md","hash":"67b96d4c8a615a99c6d918a6b7e880163c07a146","modified":1548918959722},{"_id":"source/_posts/2018-11-26-vue源码探究(第四弹) 下午3.56.56.md","hash":"0e36b17509b0a2fae658c71d481e4f6829f0bdcd","modified":1548918959723},{"_id":"source/_posts/2019-12-05-vue源码探究(第五弹) 下午3.56.56.md","hash":"75bcb614971d272c7adcebb97d3a36326dea794e","modified":1548918959723},{"_id":"source/_posts/2019年第一记.md","hash":"2dbb68a830cab6825575f0422f748e94258a85c2","modified":1551493513176},{"_id":"source/_posts/2020-12-06-vue源码探究(第六弹) 下午3.56.56.md","hash":"97b026f058a4dbf988d5a4fd25f07292f3ced4ad","modified":1548918959724},{"_id":"source/_posts/2021-12-07-vuex 下午3.56.56.md","hash":"6342585d8abee3c0cee50cf04b6a659b4a79cb52","modified":1548918959725},{"_id":"source/_posts/egret.md","hash":"acee90a41e11f892f4532022c673ad9f9b8b1f4a","modified":1551493513190},{"_id":"source/_posts/flex.md","hash":"ab2ebb9a0c2ab023887aba91f2ce294eda2a7518","modified":1551493513191},{"_id":"source/_posts/hello-hexo 下午3.56.56.md","hash":"d6e86cec56fa0c4acb823787aea955052bb694de","modified":1548918959726},{"_id":"source/_posts/hybrid混合app.md","hash":"64ee99ad3611af28e02a6e93bad69d38b225f80c","modified":1551493513192},{"_id":"source/_posts/vue源码解析(第一弹).md","hash":"800cc84763bc3f283cc0ba5012fe4cee0bbbd235","modified":1548918959727},{"_id":"source/_posts/放弃一个喜欢很久的人.md","hash":"ad9b9c44335ce891821a525b1f583e5592b54386","modified":1551493513195},{"_id":"source/_posts/网络1.md","hash":"3b8afb8728df0291aee899a2e0391b07e0dcc5b9","modified":1551493513214},{"_id":"source/_posts/网络2.md","hash":"3ff7cd12e7283ae53e27ac0d18437c9bc638eda4","modified":1551493513227},{"_id":"source/_posts/网络3.md","hash":"fd91a5e1fce2e7ab42374066ca43315f6fd2891d","modified":1551493513235},{"_id":"source/_posts/网络4.md","hash":"b4105de322b2e480b6e7fa3aee697f4162b8ccb9","modified":1551493513252},{"_id":"source/categories/index.md","hash":"53784ffa2f58d4831bf3e16eb92497f5fe20f897","modified":1551493513253},{"_id":"source/tags/index.md","hash":"581d928fe3e3ad9680c0ce0a72afbeb9f730ea2b","modified":1551493513255},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557025438944},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1557025438975},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557025360148},{"_id":"themes/next/.git/index","hash":"18faa13a4f5863b8af25c56ed6a9bc4cc1ce49eb","modified":1557032936352},{"_id":"themes/next/.git/packed-refs","hash":"071a85ddf7fe2fd4c736d1f311d94c2cd0402c73","modified":1557025438921},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1557025439002},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1557025439004},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1557025439005},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1557025439014},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1557025439016},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1557025439018},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1557025439021},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1557025439023},{"_id":"themes/next/.github/mergeable.yml","hash":"1105a6eb0d4ee1b1bf1554c5c51a47160abed62a","modified":1557025439024},{"_id":"themes/next/.github/release-drafter.yml","hash":"0f826b5ea4646008e2e147dca8b4842ecf96d093","modified":1557025439026},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1557025439028},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1557025439030},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1557025439031},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1557025439033},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1557025439052},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1557025439049},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1557025439053},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1557025439054},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1557025439056},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1557025439058},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1557025439059},{"_id":"themes/next/docs/MATH.md","hash":"7d0330c250082a86897d1c96fbb4ef5df59538af","modified":1557025439062},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1557025439063},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1557032934637},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1557025439095},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1557025439096},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1557025439098},{"_id":"themes/next/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1557025439099},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1557025439101},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1557025439103},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1557025439105},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1557025439107},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1557025439109},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1557025439111},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1557025439113},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1557025439114},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1557025439116},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1557025439118},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1557025439119},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1557025439121},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1557025439122},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1557025439124},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1557025439125},{"_id":"themes/next/layout/_layout.swig","hash":"1ed67549c9684c553c3ab4f36dd8cf44ca5eeb62","modified":1557027350528},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1557025439316},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1557025439317},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1557025439319},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1557025439320},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1557025439322},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1557025439323},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1557025439326},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1557025439339},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1557025439341},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1557025439722},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1557025439724},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1557025439725},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557025439616},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557025360166},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557025360187},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557025360189},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557025360193},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557025360210},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557025360227},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1557025360234},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557025360238},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1557025360250},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557025360259},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557025360263},{"_id":"themes/next/.git/logs/HEAD","hash":"fd59df37ba8792f44a31de2761b992ab63aae95c","modified":1557025438951},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1557025439008},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1557025439010},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1557025439012},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1557025439013},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1557025439065},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1557025439067},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1557025439069},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1557025439070},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1557025439074},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1557025439075},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1557025439078},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1557025439080},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1557025439081},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1557025439083},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"db2797f161e1e7a4987cbfa3d1be682266dfbba6","modified":1557025439085},{"_id":"themes/next/docs/zh-CN/README.md","hash":"4016948fdb971e4f905efb7a5bb3add3dd58e7a8","modified":1557025439087},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1557025439088},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1557025439130},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1557025439132},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1557025439134},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1557025439146},{"_id":"themes/next/layout/_macro/post.swig","hash":"85b17818c26075a9d22aa938e8434b4a0bdde766","modified":1557025439148},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1557025439150},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1557025439153},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1557025439155},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1557025439156},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1557025439179},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1557025439180},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1557025439210},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1557025439212},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1557025439213},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1557025439215},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1557025439230},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1557025439231},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1557025439261},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1557025439263},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1557025439264},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"e0d65688661875200cb4dd401fc5ac833c697f91","modified":1557025439282},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1557025439292},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1557025439294},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1557025439296},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1557025439297},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1557025439299},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1557025439301},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1557025439303},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1557025439314},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1557025439332},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1557025439335},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1557025439337},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1557025439346},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1557025439347},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1557025439349},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1557025439351},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1557025439352},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1557025439354},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1557025439356},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1557025439358},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1557025439360},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1557025439362},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1557025439364},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1557025439366},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1557025439612},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1557025439621},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557025439624},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1557025439625},{"_id":"themes/next/source/images/avatar.jpg","hash":"3bcf6e50cfe056157200f4a45b02a2a92dce577a","modified":1557026138428},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557025439627},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557025439630},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557025439632},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557025439633},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557025439635},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557025439637},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557025439639},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557025439641},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557025439643},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557025439644},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1557025439646},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557025439647},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557025439648},{"_id":"themes/next/source/images/qrcode.png","hash":"10ad7457e2c5abcc0cb30648f17218487e01a883","modified":1557026674648},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557025439650},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1557025439652},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1557025439655},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1557025439656},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1557025439658},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1557025439659},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1557025439661},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1557025439662},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1557025439664},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1557025439671},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1557025439672},{"_id":"themes/next/source/js/utils.js","hash":"fed16cd4fa5fac8cb4a63633d1840792a056f2be","modified":1557025439675},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557025439537},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557025439538},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557025439543},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557025439604},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557025439610},{"_id":"themes/next/.git/refs/heads/master","hash":"d591ec996e3ef9ea7b8660103296d85235048ca2","modified":1557025438950},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1557025439142},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1557025439144},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1557025439160},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1557025439161},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1557025439163},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1557025439165},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1557025439168},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1557025439170},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1557025439172},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1557025439175},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1557025439177},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1557025439183},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1557025439185},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1557025439187},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1557025439188},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1557025439192},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1557025439195},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1557025439196},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1557025439198},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1557025439202},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1557025439204},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1557025439206},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1557025439217},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1557025439221},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1557025439223},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1557025439225},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1557025439228},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1557025439235},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1557025439237},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1557025439239},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1557025439241},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1557025439244},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1557025439246},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1557025439247},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1557025439249},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1557025439251},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1557025439252},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1557025439254},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1557025439256},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1557025439257},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1557025439259},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1557025439267},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1557025439269},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1557025439272},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1557025439274},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1557025439276},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1557025439277},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1557025439279},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1557025439281},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1557025439286},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1557025439289},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1557025439290},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1557025439309},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1557025439311},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1557025439312},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1557025439532},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1557025439535},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1557025439540},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1557025439542},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1557025439601},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1557025439603},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1557025439606},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1557025439609},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1557025439669},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1557025439668},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1557027112432},{"_id":"themes/next/source/lib/Han/README.md","hash":"990d5f1127a0c147902f5f5dfe7b9b60f5a10470","modified":1557027112434},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1557027671715},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"28bc2250a16e22c705cba7b3c17fcc15081e50f2","modified":1557027671718},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1557027671719},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1557027671723},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1557025439678},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1557025439681},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1557025439682},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1557025439684},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1557025439685},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1557028692795},{"_id":"themes/next/source/lib/pace/README.md","hash":"ddcd2834d847f37b8ee77858bd03d31f70f55fb7","modified":1557028692797},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1557028692799},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1557028692800},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1557028692803},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1557028692807},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1557028692809},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1557028692810},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1557028692833},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1557028692835},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1557028692836},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1557028692837},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1557028692839},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1557028692840},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1557028692841},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1557028692843},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1557025439715},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1557025439717},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1557025439719},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1557025439709},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"fd59df37ba8792f44a31de2761b992ab63aae95c","modified":1557025438954},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557025438938},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1557025439372},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1557025439374},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1557025439377},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1557025439378},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1557025439380},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1557025439419},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1557025439450},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1557025439452},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1557025439513},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1557025439516},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1557025439518},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1557025439522},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1557025439525},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1557025439527},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1557025439528},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1557025439547},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1557025439549},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1557025439552},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1557025439553},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1557025439557},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1557025439559},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1557025439560},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1557025439562},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1557025439570},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1557025439573},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1557025439575},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1557025439576},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1557025439577},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1557025439582},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1557025439584},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1557025439586},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1557025439588},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1557025439591},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1557025439594},{"_id":"themes/next/source/lib/Han/.git/FETCH_HEAD","hash":"8050244a154ab900ecc9e0b3e9b291c4e185f090","modified":1557027166676},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557027112356},{"_id":"themes/next/source/lib/Han/.git/ORIG_HEAD","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1557027167951},{"_id":"themes/next/source/lib/Han/.git/config","hash":"bdc479aba5357f8dfc01db46cea9abcf2743fdd7","modified":1557027112399},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557027100181},{"_id":"themes/next/source/lib/Han/.git/index","hash":"dece9495fbb95325912d56dedbd51526c2b80eb8","modified":1557027112466},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"9277089dfa2650d82dc3e99a028028e84aa38c3f","modified":1557027112328},{"_id":"themes/next/source/lib/Han/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1557027112431},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1557027112453},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1557027112460},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1557027112465},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557027671659},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"78c4459d066ad795856608d603d780b53488073d","modified":1557027671694},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557027663239},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"ba69815d173964690c91dc82c57c205027dba829","modified":1557027671724},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"eac20c4e1edccad1fd1483618cca97e06d216ea3","modified":1557027671632},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1557027671714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557025439691},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1557025439689},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1557025439694},{"_id":"themes/next/source/lib/pace/.git/FETCH_HEAD","hash":"f835fa5fc6b4dbf379a2674a756895f86cc6d2df","modified":1557028727188},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557028692750},{"_id":"themes/next/source/lib/pace/.git/ORIG_HEAD","hash":"2cf353bc3f5e2816a3a0e05d3f154a777200f091","modified":1557028727796},{"_id":"themes/next/source/lib/pace/.git/config","hash":"fadcc75e42b86ee74d05ce56b08984ec6b034e5e","modified":1557028692778},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557028683134},{"_id":"themes/next/source/lib/pace/.git/index","hash":"9bdd523000b03ece13f059aa5cdb6bfcb21571c3","modified":1557028692844},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"a68869d7570e87c999c13c6066845d4c3c70fe92","modified":1557028692726},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1557028692793},{"_id":"themes/next/.git/objects/pack/pack-92349ff733280d690f710eef333fd7dff65e00a1.idx","hash":"a9131fa42f728e36ef1816ea8eeeba5538aba9c2","modified":1557025438604},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1557027112456},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557025439706},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557025439703},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1557025439713},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"fd59df37ba8792f44a31de2761b992ab63aae95c","modified":1557025438938},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1557025439383},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1557025439386},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1557025439388},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1557025439389},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1557025439391},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1557025439392},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1557025439394},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1557025439399},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1557025439401},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1557025439403},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1557025439405},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1557025439407},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1557025439409},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1557025439411},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1557025439413},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1557025439415},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1557025439417},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1557025439421},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1557025439423},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1557025439425},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1557025439427},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1557025439428},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1557025439431},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1557025439432},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1557025439434},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1557025439435},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1557025439437},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1557025439439},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1557025439440},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1557025439442},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1557025439445},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1557025439446},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1557025439448},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1557025439455},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1557025439457},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1557025439460},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1557025439462},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1557025439465},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1557025439467},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1557025439468},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1557025439470},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1557025439472},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1557025439473},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1557025439477},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1557025439478},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1557025439481},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1557025439482},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1557025439484},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1557025439486},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1557025439489},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1557025439491},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1557025439495},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1557025439497},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1557025439498},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1557025439500},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1557025439501},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1557025439503},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1557025439505},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1557025439507},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1557025439510},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1557025439511},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1557025439564},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1557025439568},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1557025439579},{"_id":"themes/next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557027100189},{"_id":"themes/next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557027100192},{"_id":"themes/next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557027100193},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557027100195},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557027100202},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557027100211},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1557027100214},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557027100216},{"_id":"themes/next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1557027100218},{"_id":"themes/next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557027100221},{"_id":"themes/next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557027100225},{"_id":"themes/next/source/lib/Han/.git/logs/HEAD","hash":"a54c6002ec4347987058126b8a8c99b4f434be23","modified":1557027112373},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1557027112438},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1557027112442},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1557027112446},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1557027112448},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1557027112450},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557027663249},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557027663255},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557027663257},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557027663265},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557027663251},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557027663260},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1557027663267},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1557027663289},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557027663285},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557027663302},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557027663294},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"7fe5abfb412118d3cd02af78e7ec0076bd7b75df","modified":1557027671672},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557025439700},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557028683141},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557028683148},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557028683143},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557028683152},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557028683157},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557028683154},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557028683161},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1557028683159},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557028683165},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1557028683163},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"5afaf31185bc44ee4dfae964b08ec57867f4c8f5","modified":1557028692759},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557028683168},{"_id":"themes/next/source/lib/Han/.git/objects/pack/pack-cf80c03fd03d564a8a5ca986b212457e5bba5f71.idx","hash":"7728a2bd244992cdb4531a11c8e0833180dea744","modified":1557027112152},{"_id":"themes/next/source/lib/Han/.git/refs/heads/master","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1557027112369},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"42b96d49f5eae1a58b8413a60a0c2699e94df28d","modified":1557027671670},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/pack/pack-605bfdb232ab601fbe404782334d42aded67ae39.idx","hash":"d6e30395fc4e6f319ee1c97892f31afc161df3ca","modified":1557027671424},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/pack/pack-605bfdb232ab601fbe404782334d42aded67ae39.pack","hash":"9f1e1b5d83b958dd75ab1573984f747daa5b33af","modified":1557027671461},{"_id":"themes/next/source/lib/pace/.git/objects/pack/pack-75c78a8df54c9ed1ce5607ade5f36b3d08a1dc1a.idx","hash":"3c492f4aa490a8dfa48a85c677af72857b87d6a5","modified":1557028692567},{"_id":"themes/next/source/lib/pace/.git/objects/pack/pack-75c78a8df54c9ed1ce5607ade5f36b3d08a1dc1a.pack","hash":"71b5acc99cb100ce7cf82bb3a2b91d858b984201","modified":1557028692603},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"2cf353bc3f5e2816a3a0e05d3f154a777200f091","modified":1557028692758},{"_id":"themes/next/source/lib/Han/.git/objects/pack/pack-cf80c03fd03d564a8a5ca986b212457e5bba5f71.pack","hash":"2c409a0171056370494b1430adb7738f68b0e391","modified":1557027112181},{"_id":"themes/next/source/lib/Han/.git/logs/refs/heads/master","hash":"a54c6002ec4347987058126b8a8c99b4f434be23","modified":1557027112379},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557027112350},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"7fe5abfb412118d3cd02af78e7ec0076bd7b75df","modified":1557027671676},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557027671654},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"5afaf31185bc44ee4dfae964b08ec57867f4c8f5","modified":1557028692763},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557028692745},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"a54c6002ec4347987058126b8a8c99b4f434be23","modified":1557027112350},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"7fe5abfb412118d3cd02af78e7ec0076bd7b75df","modified":1557027671654},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"5afaf31185bc44ee4dfae964b08ec57867f4c8f5","modified":1557028692745},{"_id":"themes/next/.git/objects/pack/pack-92349ff733280d690f710eef333fd7dff65e00a1.pack","hash":"1414bfa9f2eead4de9d8496f4283ac6f13a11035","modified":1557025438678}],"Category":[{"name":"ES6","_id":"cjvaywew300045096w0jpipxu"},{"name":"Node.js","_id":"cjvaywewj00085096vcqtihnd"},{"name":"Express","_id":"cjvayweyi000o5096bnpzzspq"},{"name":"Express","parent":"cjvaywewj00085096vcqtihnd","_id":"cjvayweyt000t5096wkstifeg"},{"name":"Mongo","_id":"cjvaywez800105096l2gnoyji"},{"name":"cmd","_id":"cjvaywezo00175096rgj6w19w"},{"name":"Tool","_id":"cjvaywf00001c50962ooegne5"},{"name":"css","_id":"cjvaywf07001g5096w282fr91"},{"name":"ESlint","_id":"cjvaywf0k001k5096g53x3kv5"},{"name":"Node.js","parent":"cjvayweyi000o5096bnpzzspq","_id":"cjvaywf0w001q5096m9hled1r"},{"name":"React","_id":"cjvaywf13001u5096a7nvgzk8"},{"name":"websocket","_id":"cjvaywf1f001y5096besbfbu7"},{"name":"JavaScript","_id":"cjvaywf1l002350968dmplr3l"},{"name":"HTML5","_id":"cjvaywf200028509677u4nheu"},{"name":"前端面试","_id":"cjvaywf29002c5096kmsfs9ph"},{"name":"前端面试","parent":"cjvaywf07001g5096w282fr91","_id":"cjvaywf4900355096x2x5bpsp"},{"name":"vue","_id":"cjvaywf54003i5096b12qu70z"},{"name":"开发tips","_id":"cjvaywf56003j5096wcnftyqs"},{"name":"随笔","_id":"cjvaywf84003w50968bvcvaam"},{"name":"egret","_id":"cjvaywf8g00405096p2rvckqe"},{"name":"踩坑记","_id":"cjvaywf8o00435096a4vglgl3"},{"name":"Hybrid","_id":"cjvaywf8u00445096p6cfwczw"},{"name":"网络","_id":"cjvaywf9900495096wwo7ktql"},{"name":"HTML5","parent":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywf9e004c5096xc1n9d6u"},{"name":"前端面试","parent":"cjvaywf1l002350968dmplr3l","_id":"cjvaywfa8004k50961z4tdew1"},{"name":"JavaScript","parent":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywfav004n5096qxrfxp6a"},{"name":"游戏引擎","parent":"cjvaywf8g00405096p2rvckqe","_id":"cjvaywfbc004u50968njbf9oa"}],"Data":[],"Page":[{"title":"Categories","date":"2019-01-23T02:26:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2019-01-23 10:26:27\ntype: \"categories\"\n---\n","updated":"2019-03-02T02:25:13.253Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvaywevk00015096o55vltk7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2019-01-23T02:22:38.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2019-01-23 10:22:38\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-03-02T02:25:13.255Z","path":"tags/index.html","layout":"page","_id":"cjvaywevy00035096nboowm1t","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"ES6","date":"2017-09-08T16:00:00.000Z","description":"ES6 知识点总结","_content":"\n<h1>\nES6 知识点总结\n</h1>\n\n<p>主要有19个小节，会贴出相对应的demo代码，也会在最后给出对应GitHub地址</p>\n\n### 1.let const\n\n```JS\n/**let，const 块作用域内有效  {}内代表一块*/\n/**ES6 use strict*/\nfunction test() {\n    // for(let i=1;i<3;i++){\n    //     console.log(i);\n    // }\n    // console.log(i);\n    /**let 申明变量是不能重复定义*/\n    // let a= 1;\n    // let a=2;\n}\n\nfunction last() {\n    /*const常量不能修改(数值)  对象可以，如const k={}\n    * 申明时必须赋值\n    * */\n    const PI=3.1415926;\n    const k={\n        a:1\n    }\n    k.b=3;\n    console.log(PI,k);\n}\n\nlast();\n```\n\n2.解构赋值\n主要讲解了数组解构赋值和对象解构赋值,其他的都可以在上面拓展\n依然贴上代码:\n\n3.正则拓展\n新增了2个修饰符 y和u，下面给出代码：\n\n4.字符串拓展（上）\nUnicode编码的一些问题，贴上代码，应该去敲一遍就可以理解\n这里提醒，需要npm install babel-polyfill；得安装这么个补丁包才行\n\n5.字符串拓展（下）\n主要讲解了一些日常中实用方便的方法,老规矩贴上代码:\n\n6.数值拓展\n跟数值有关的一些小方法，仅仅码出了常用的小部分，更多请查阅\n\n7.数组拓展\n\n8.函数拓展\n箭头函数，尾调用...\n\n9.对象拓展\n\n10.Symbol的用法\n\n11.set map数据结构\n简单介绍了Set WeakSet Map WeakMap\n\n12.map-set与数组和对象的比较\n将map set与数组和object都进行了增删改查的比较\n\n13.Proxy和Reflect\n\n14.类与对象\n\n15.promise\n主要讲解了promise的原理，以及promise.all和promise.race的用法\n\n16.Iterator 和 for of\n\n17 Generator\nGenerator基本定义，以及2个工作学习中常用到2个方法，长轮询和类似抽奖的一个次数记录\n\n18.Decorators\n修饰器\n\n19.模块化\nexport:(2种方法，个人比较喜欢最后一种)\n\n```JS\n//模块引用 import\n//模块导出 export\n\n// export let A=123;\n//\n// export function test() {\n//     console.log('test');\n// }\n//\n// export class Hello{\n//     test(){\n//         console.log('class');\n//     }\n// }\n\nexport let A=123;\n\nexport function test() {\n    console.log('test');\n}\n\nexport class Hello{\n    test(){\n        console.log('class');\n    }\n}\n\nexport default{\n    A,test,Hello\n}\n\n// import {A,test,Hello} from './class/lesson17';\n// import * as lesson17 from './class/lesson17';\n//\n// console.log(lesson17.A);\n\nimport Lesson17 from './class/lesson17';\n\nconsole.log(Lesson17.A);\n```\n\n在学习完ES6的基本语法后，我也去做了一个购买彩票的一个小网址，基于es6+gulp+webpack，后台用的mockjs的模拟数据\n我把es6知识点的代码跟彩票项目代码放在一起的，这个给出地址:<https://github.com/zhangjing9898/Lottery>\n","source":"_posts/2017-09-09-ES6.markdown","raw":"---\nlayout: post\ntitle: \"ES6\"\ndate: 2017-09-09\ncategories:\n  - ES6\ndescription: ES6 知识点总结\n---\n\n<h1>\nES6 知识点总结\n</h1>\n\n<p>主要有19个小节，会贴出相对应的demo代码，也会在最后给出对应GitHub地址</p>\n\n### 1.let const\n\n```JS\n/**let，const 块作用域内有效  {}内代表一块*/\n/**ES6 use strict*/\nfunction test() {\n    // for(let i=1;i<3;i++){\n    //     console.log(i);\n    // }\n    // console.log(i);\n    /**let 申明变量是不能重复定义*/\n    // let a= 1;\n    // let a=2;\n}\n\nfunction last() {\n    /*const常量不能修改(数值)  对象可以，如const k={}\n    * 申明时必须赋值\n    * */\n    const PI=3.1415926;\n    const k={\n        a:1\n    }\n    k.b=3;\n    console.log(PI,k);\n}\n\nlast();\n```\n\n2.解构赋值\n主要讲解了数组解构赋值和对象解构赋值,其他的都可以在上面拓展\n依然贴上代码:\n\n3.正则拓展\n新增了2个修饰符 y和u，下面给出代码：\n\n4.字符串拓展（上）\nUnicode编码的一些问题，贴上代码，应该去敲一遍就可以理解\n这里提醒，需要npm install babel-polyfill；得安装这么个补丁包才行\n\n5.字符串拓展（下）\n主要讲解了一些日常中实用方便的方法,老规矩贴上代码:\n\n6.数值拓展\n跟数值有关的一些小方法，仅仅码出了常用的小部分，更多请查阅\n\n7.数组拓展\n\n8.函数拓展\n箭头函数，尾调用...\n\n9.对象拓展\n\n10.Symbol的用法\n\n11.set map数据结构\n简单介绍了Set WeakSet Map WeakMap\n\n12.map-set与数组和对象的比较\n将map set与数组和object都进行了增删改查的比较\n\n13.Proxy和Reflect\n\n14.类与对象\n\n15.promise\n主要讲解了promise的原理，以及promise.all和promise.race的用法\n\n16.Iterator 和 for of\n\n17 Generator\nGenerator基本定义，以及2个工作学习中常用到2个方法，长轮询和类似抽奖的一个次数记录\n\n18.Decorators\n修饰器\n\n19.模块化\nexport:(2种方法，个人比较喜欢最后一种)\n\n```JS\n//模块引用 import\n//模块导出 export\n\n// export let A=123;\n//\n// export function test() {\n//     console.log('test');\n// }\n//\n// export class Hello{\n//     test(){\n//         console.log('class');\n//     }\n// }\n\nexport let A=123;\n\nexport function test() {\n    console.log('test');\n}\n\nexport class Hello{\n    test(){\n        console.log('class');\n    }\n}\n\nexport default{\n    A,test,Hello\n}\n\n// import {A,test,Hello} from './class/lesson17';\n// import * as lesson17 from './class/lesson17';\n//\n// console.log(lesson17.A);\n\nimport Lesson17 from './class/lesson17';\n\nconsole.log(Lesson17.A);\n```\n\n在学习完ES6的基本语法后，我也去做了一个购买彩票的一个小网址，基于es6+gulp+webpack，后台用的mockjs的模拟数据\n我把es6知识点的代码跟彩票项目代码放在一起的，这个给出地址:<https://github.com/zhangjing9898/Lottery>\n","slug":"2017-09-09-ES6","published":1,"updated":"2019-01-31T07:15:59.695Z","comments":1,"photos":[],"link":"","_id":"cjvaywev4000050969w9nev67","content":"<h1><br>ES6 知识点总结<br></h1>\n\n<p>主要有19个小节，会贴出相对应的demo代码，也会在最后给出对应GitHub地址</p>\n\n<h3 id=\"1-let-const\"><a href=\"#1-let-const\" class=\"headerlink\" title=\"1.let const\"></a>1.let const</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**let，const 块作用域内有效  &#123;&#125;内代表一块*/</span></span><br><span class=\"line\"><span class=\"comment\">/**ES6 use strict*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for(let i=1;i&lt;3;i++)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(i);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(i);</span></span><br><span class=\"line\">    <span class=\"comment\">/**let 申明变量是不能重复定义*/</span></span><br><span class=\"line\">    <span class=\"comment\">// let a= 1;</span></span><br><span class=\"line\">    <span class=\"comment\">// let a=2;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">last</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*const常量不能修改(数值)  对象可以，如const k=&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    * 申明时必须赋值</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> PI=<span class=\"number\">3.1415926</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> k=&#123;</span><br><span class=\"line\">        a:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k.b=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(PI,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">last();</span><br></pre></td></tr></table></figure>\n<p>2.解构赋值<br>主要讲解了数组解构赋值和对象解构赋值,其他的都可以在上面拓展<br>依然贴上代码:</p>\n<p>3.正则拓展<br>新增了2个修饰符 y和u，下面给出代码：</p>\n<p>4.字符串拓展（上）<br>Unicode编码的一些问题，贴上代码，应该去敲一遍就可以理解<br>这里提醒，需要npm install babel-polyfill；得安装这么个补丁包才行</p>\n<p>5.字符串拓展（下）<br>主要讲解了一些日常中实用方便的方法,老规矩贴上代码:</p>\n<p>6.数值拓展<br>跟数值有关的一些小方法，仅仅码出了常用的小部分，更多请查阅</p>\n<p>7.数组拓展</p>\n<p>8.函数拓展<br>箭头函数，尾调用…</p>\n<p>9.对象拓展</p>\n<p>10.Symbol的用法</p>\n<p>11.set map数据结构<br>简单介绍了Set WeakSet Map WeakMap</p>\n<p>12.map-set与数组和对象的比较<br>将map set与数组和object都进行了增删改查的比较</p>\n<p>13.Proxy和Reflect</p>\n<p>14.类与对象</p>\n<p>15.promise<br>主要讲解了promise的原理，以及promise.all和promise.race的用法</p>\n<p>16.Iterator 和 for of</p>\n<p>17 Generator<br>Generator基本定义，以及2个工作学习中常用到2个方法，长轮询和类似抽奖的一个次数记录</p>\n<p>18.Decorators<br>修饰器</p>\n<p>19.模块化<br>export:(2种方法，个人比较喜欢最后一种)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模块引用 import</span></span><br><span class=\"line\"><span class=\"comment\">//模块导出 export</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export let A=123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// export function test() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('test');</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// export class Hello&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log('class');</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> A=<span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">    test()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    A,test,Hello</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import &#123;A,test,Hello&#125; from './class/lesson17';</span></span><br><span class=\"line\"><span class=\"comment\">// import * as lesson17 from './class/lesson17';</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(lesson17.A);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Lesson17 <span class=\"keyword\">from</span> <span class=\"string\">'./class/lesson17'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Lesson17.A);</span><br></pre></td></tr></table></figure>\n<p>在学习完ES6的基本语法后，我也去做了一个购买彩票的一个小网址，基于es6+gulp+webpack，后台用的mockjs的模拟数据<br>我把es6知识点的代码跟彩票项目代码放在一起的，这个给出地址:<a href=\"https://github.com/zhangjing9898/Lottery\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangjing9898/Lottery</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1><br>ES6 知识点总结<br></h1>\n\n<p>主要有19个小节，会贴出相对应的demo代码，也会在最后给出对应GitHub地址</p>\n\n<h3 id=\"1-let-const\"><a href=\"#1-let-const\" class=\"headerlink\" title=\"1.let const\"></a>1.let const</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**let，const 块作用域内有效  &#123;&#125;内代表一块*/</span></span><br><span class=\"line\"><span class=\"comment\">/**ES6 use strict*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for(let i=1;i&lt;3;i++)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(i);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(i);</span></span><br><span class=\"line\">    <span class=\"comment\">/**let 申明变量是不能重复定义*/</span></span><br><span class=\"line\">    <span class=\"comment\">// let a= 1;</span></span><br><span class=\"line\">    <span class=\"comment\">// let a=2;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">last</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*const常量不能修改(数值)  对象可以，如const k=&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    * 申明时必须赋值</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> PI=<span class=\"number\">3.1415926</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> k=&#123;</span><br><span class=\"line\">        a:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k.b=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(PI,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">last();</span><br></pre></td></tr></table></figure>\n<p>2.解构赋值<br>主要讲解了数组解构赋值和对象解构赋值,其他的都可以在上面拓展<br>依然贴上代码:</p>\n<p>3.正则拓展<br>新增了2个修饰符 y和u，下面给出代码：</p>\n<p>4.字符串拓展（上）<br>Unicode编码的一些问题，贴上代码，应该去敲一遍就可以理解<br>这里提醒，需要npm install babel-polyfill；得安装这么个补丁包才行</p>\n<p>5.字符串拓展（下）<br>主要讲解了一些日常中实用方便的方法,老规矩贴上代码:</p>\n<p>6.数值拓展<br>跟数值有关的一些小方法，仅仅码出了常用的小部分，更多请查阅</p>\n<p>7.数组拓展</p>\n<p>8.函数拓展<br>箭头函数，尾调用…</p>\n<p>9.对象拓展</p>\n<p>10.Symbol的用法</p>\n<p>11.set map数据结构<br>简单介绍了Set WeakSet Map WeakMap</p>\n<p>12.map-set与数组和对象的比较<br>将map set与数组和object都进行了增删改查的比较</p>\n<p>13.Proxy和Reflect</p>\n<p>14.类与对象</p>\n<p>15.promise<br>主要讲解了promise的原理，以及promise.all和promise.race的用法</p>\n<p>16.Iterator 和 for of</p>\n<p>17 Generator<br>Generator基本定义，以及2个工作学习中常用到2个方法，长轮询和类似抽奖的一个次数记录</p>\n<p>18.Decorators<br>修饰器</p>\n<p>19.模块化<br>export:(2种方法，个人比较喜欢最后一种)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模块引用 import</span></span><br><span class=\"line\"><span class=\"comment\">//模块导出 export</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export let A=123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// export function test() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('test');</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// export class Hello&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log('class');</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> A=<span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">    test()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    A,test,Hello</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import &#123;A,test,Hello&#125; from './class/lesson17';</span></span><br><span class=\"line\"><span class=\"comment\">// import * as lesson17 from './class/lesson17';</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(lesson17.A);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Lesson17 <span class=\"keyword\">from</span> <span class=\"string\">'./class/lesson17'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Lesson17.A);</span><br></pre></td></tr></table></figure>\n<p>在学习完ES6的基本语法后，我也去做了一个购买彩票的一个小网址，基于es6+gulp+webpack，后台用的mockjs的模拟数据<br>我把es6知识点的代码跟彩票项目代码放在一起的，这个给出地址:<a href=\"https://github.com/zhangjing9898/Lottery\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangjing9898/Lottery</a></p>\n"},{"layout":"post","title":"node.js(1)","date":"2017-09-15T16:00:00.000Z","description":"Node.js入门","_content":"\n<pre>\n一、Node.js的三大特点：\n\n1.单线程\n优点：\n让node.js宏观上并发。\n操作系统不再有线程创建、销毁的时间开销。\n坏：\n一个用户崩溃，整个服务器所有用户崩溃。\n\n2.非阻塞I/O\n相当于异步\n线程cpu核心利用率永远是100%\n\n3.事件驱动\n事件机制、事件环\n\n其实3个特点就是一个特点，少一个环节都没有办法运行\n\n二、Node.js适合开发的业务：\n简单来说：\nnode.js: 善于I/O 不善于计算；\n\n三、helloWorld代码\n\n<blockquote>\n\nvar http = require(\"http\");\n\nvar server = http.createServer(function (req,res) {\n    res.writeHead(200,{\n        \"Content-type\":\"text/html;charset=UTF-8\"\n    });\n    res.end(\"我买了5个iphone\"+(1+2+3)+\"s\");\n});\n\n//运行服务器,监听3000端口，端口号可更改\nserver.listen(3000,\"127.0.0.1\");\n\n</blockquote>\n\n四、如何在cmd中运行文件：\nnode + “文件名”\nsuch as：C：\\Users\\ZJ>node d:\\workspaces\\node.js\\demo1\\01_helloWorld.js\n\n五、总结\nnode.js是服务器的程序，写的js脚本是运行在服务器上！返回给客户的，只是纯html语句（重点提醒）\n\n！！！node.js 可以直接运行js文件，不需要html模块的封装\nnode相当于js的执行环境\n\n总结来说：\n我们现在要跑起一个服务器，这个服务器的脚本，要以.js存储，是一个js文件，用node命令运行这个js文件罢了。\n</pre>\n","source":"_posts/2017-09-16-node.js(1).markdown","raw":"---\nlayout: post\ntitle: \"node.js(1)\"\ndate: 2017-09-16\ncategories:\n  - Node.js\ndescription: Node.js入门\n---\n\n<pre>\n一、Node.js的三大特点：\n\n1.单线程\n优点：\n让node.js宏观上并发。\n操作系统不再有线程创建、销毁的时间开销。\n坏：\n一个用户崩溃，整个服务器所有用户崩溃。\n\n2.非阻塞I/O\n相当于异步\n线程cpu核心利用率永远是100%\n\n3.事件驱动\n事件机制、事件环\n\n其实3个特点就是一个特点，少一个环节都没有办法运行\n\n二、Node.js适合开发的业务：\n简单来说：\nnode.js: 善于I/O 不善于计算；\n\n三、helloWorld代码\n\n<blockquote>\n\nvar http = require(\"http\");\n\nvar server = http.createServer(function (req,res) {\n    res.writeHead(200,{\n        \"Content-type\":\"text/html;charset=UTF-8\"\n    });\n    res.end(\"我买了5个iphone\"+(1+2+3)+\"s\");\n});\n\n//运行服务器,监听3000端口，端口号可更改\nserver.listen(3000,\"127.0.0.1\");\n\n</blockquote>\n\n四、如何在cmd中运行文件：\nnode + “文件名”\nsuch as：C：\\Users\\ZJ>node d:\\workspaces\\node.js\\demo1\\01_helloWorld.js\n\n五、总结\nnode.js是服务器的程序，写的js脚本是运行在服务器上！返回给客户的，只是纯html语句（重点提醒）\n\n！！！node.js 可以直接运行js文件，不需要html模块的封装\nnode相当于js的执行环境\n\n总结来说：\n我们现在要跑起一个服务器，这个服务器的脚本，要以.js存储，是一个js文件，用node命令运行这个js文件罢了。\n</pre>\n","slug":"2017-09-16-node.js(1)","published":1,"updated":"2019-01-31T07:15:59.696Z","comments":1,"photos":[],"link":"","_id":"cjvaywevo00025096bh0pml35","content":"<pre>\n一、Node.js的三大特点：\n\n1.单线程\n优点：\n让node.js宏观上并发。\n操作系统不再有线程创建、销毁的时间开销。\n坏：\n一个用户崩溃，整个服务器所有用户崩溃。\n\n2.非阻塞I/O\n相当于异步\n线程cpu核心利用率永远是100%\n\n3.事件驱动\n事件机制、事件环\n\n其实3个特点就是一个特点，少一个环节都没有办法运行\n\n二、Node.js适合开发的业务：\n简单来说：\nnode.js: 善于I/O 不善于计算；\n\n三、helloWorld代码\n\n<blockquote>\n\nvar http = require(\"http\");\n\nvar server = http.createServer(function (req,res) {\n    res.writeHead(200,{\n        \"Content-type\":\"text/html;charset=UTF-8\"\n    });\n    res.end(\"我买了5个iphone\"+(1+2+3)+\"s\");\n});\n\n//运行服务器,监听3000端口，端口号可更改\nserver.listen(3000,\"127.0.0.1\");\n\n</blockquote>\n\n四、如何在cmd中运行文件：\nnode + “文件名”\nsuch as：C：\\Users\\ZJ>node d:\\workspaces\\node.js\\demo1\\01_helloWorld.js\n\n五、总结\nnode.js是服务器的程序，写的js脚本是运行在服务器上！返回给客户的，只是纯html语句（重点提醒）\n\n！！！node.js 可以直接运行js文件，不需要html模块的封装\nnode相当于js的执行环境\n\n总结来说：\n我们现在要跑起一个服务器，这个服务器的脚本，要以.js存储，是一个js文件，用node命令运行这个js文件罢了。\n</pre>\n","site":{"data":{}},"excerpt":"","more":"<pre>\n一、Node.js的三大特点：\n\n1.单线程\n优点：\n让node.js宏观上并发。\n操作系统不再有线程创建、销毁的时间开销。\n坏：\n一个用户崩溃，整个服务器所有用户崩溃。\n\n2.非阻塞I/O\n相当于异步\n线程cpu核心利用率永远是100%\n\n3.事件驱动\n事件机制、事件环\n\n其实3个特点就是一个特点，少一个环节都没有办法运行\n\n二、Node.js适合开发的业务：\n简单来说：\nnode.js: 善于I/O 不善于计算；\n\n三、helloWorld代码\n\n<blockquote>\n\nvar http = require(\"http\");\n\nvar server = http.createServer(function (req,res) {\n    res.writeHead(200,{\n        \"Content-type\":\"text/html;charset=UTF-8\"\n    });\n    res.end(\"我买了5个iphone\"+(1+2+3)+\"s\");\n});\n\n//运行服务器,监听3000端口，端口号可更改\nserver.listen(3000,\"127.0.0.1\");\n\n</blockquote>\n\n四、如何在cmd中运行文件：\nnode + “文件名”\nsuch as：C：\\Users\\ZJ>node d:\\workspaces\\node.js\\demo1\\01_helloWorld.js\n\n五、总结\nnode.js是服务器的程序，写的js脚本是运行在服务器上！返回给客户的，只是纯html语句（重点提醒）\n\n！！！node.js 可以直接运行js文件，不需要html模块的封装\nnode相当于js的执行环境\n\n总结来说：\n我们现在要跑起一个服务器，这个服务器的脚本，要以.js存储，是一个js文件，用node命令运行这个js文件罢了。\n</pre>\n"},{"layout":"post","title":"node.js(2)","date":"2017-09-16T16:00:00.000Z","description":"node.js 入门第二篇","_content":"\n<pre>\n\n#很重要的一点：node.js本质上是没有web容器\n\n一、node.js本质上是没有web容器的，它可以把router做的非常漂亮，也非常具有隐蔽性和欺骗性\n\n下面给出一段代码：\n\n先给出目录结构：\n>demo1  \n>>test \n>>>0.jpg\n>>>aaaaaa.css\n>>>haha.html\n>>>xixi.html\n>>02_staticRender.js\n\n代码：\n<blockquote>\n//require表示引包，引包就是引用自己的一个特殊功能\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n// import a from 'one.html'\n//创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么\nvar server = http.createServer(function(req,res){\n    console.log(req.url);\n    if(req.url == \"/fang\"){\n        fs.readFile(path.join(__dirname,'./test/xixi.html'),(err,data)=>{\n\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/yuan\"){\n        fs.readFile(path.join(__dirname,\"./test/haha.html\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/0.jpg\"){\n        fs.readFile(path.join(__dirname,\"./test/0.jpg\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"image/jpg\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/bbbbbb.css\"){\n        fs.readFile(path.join(__dirname,\"./test/aaaaaa.css\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/css\"});\n            res.end(data);\n        });\n    }else{\n        res.writeHead(404,{\"Content-type\":\"text/html;charset=UTF-8\"});\n        res.end(\"没有这个页面呦\");\n    }\n});\n\n//运行服务器，监听3000端口（端口号可以任改）\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n最后，总结：\n\nnode.js本质上是没有web容器\n\nurl通过了node的顶层路由设计，呈递某个静态文件\n\n举一个经典的例子：\n\n127.0.0.1:3000/yuan\n这个页面有有一个图片\n图片的源码是 <img src=\"0,jpg\">\n那么你是不是会认为img是在127.0.0.1:3000/yuan/0.jpg\n这个认为是错误的！\n中的yuan不是文件夹，所有都处于根目录，意思是img是127.0.0.1:3000/0.jpg\n\n</pre>\n","source":"_posts/2017-09-17-node.js(2).markdown","raw":"---\nlayout: post\ntitle: \"node.js(2)\"\ndate: 2017-09-17\ncategories:\n  - Node.js\ndescription: node.js 入门第二篇\n---\n\n<pre>\n\n#很重要的一点：node.js本质上是没有web容器\n\n一、node.js本质上是没有web容器的，它可以把router做的非常漂亮，也非常具有隐蔽性和欺骗性\n\n下面给出一段代码：\n\n先给出目录结构：\n>demo1  \n>>test \n>>>0.jpg\n>>>aaaaaa.css\n>>>haha.html\n>>>xixi.html\n>>02_staticRender.js\n\n代码：\n<blockquote>\n//require表示引包，引包就是引用自己的一个特殊功能\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n// import a from 'one.html'\n//创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么\nvar server = http.createServer(function(req,res){\n    console.log(req.url);\n    if(req.url == \"/fang\"){\n        fs.readFile(path.join(__dirname,'./test/xixi.html'),(err,data)=>{\n\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/yuan\"){\n        fs.readFile(path.join(__dirname,\"./test/haha.html\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/0.jpg\"){\n        fs.readFile(path.join(__dirname,\"./test/0.jpg\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"image/jpg\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/bbbbbb.css\"){\n        fs.readFile(path.join(__dirname,\"./test/aaaaaa.css\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/css\"});\n            res.end(data);\n        });\n    }else{\n        res.writeHead(404,{\"Content-type\":\"text/html;charset=UTF-8\"});\n        res.end(\"没有这个页面呦\");\n    }\n});\n\n//运行服务器，监听3000端口（端口号可以任改）\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n最后，总结：\n\nnode.js本质上是没有web容器\n\nurl通过了node的顶层路由设计，呈递某个静态文件\n\n举一个经典的例子：\n\n127.0.0.1:3000/yuan\n这个页面有有一个图片\n图片的源码是 <img src=\"0,jpg\">\n那么你是不是会认为img是在127.0.0.1:3000/yuan/0.jpg\n这个认为是错误的！\n中的yuan不是文件夹，所有都处于根目录，意思是img是127.0.0.1:3000/0.jpg\n\n</pre>\n","slug":"2017-09-17-node.js(2)","published":1,"updated":"2019-01-31T07:15:59.697Z","comments":1,"photos":[],"link":"","_id":"cjvaywewb00055096l5wfvo48","content":"<pre>\n\n#很重要的一点：node.js本质上是没有web容器\n\n一、node.js本质上是没有web容器的，它可以把router做的非常漂亮，也非常具有隐蔽性和欺骗性\n\n下面给出一段代码：\n\n先给出目录结构：\n>demo1  \n>>test \n>>>0.jpg\n>>>aaaaaa.css\n>>>haha.html\n>>>xixi.html\n>>02_staticRender.js\n\n代码：\n<blockquote>\n//require表示引包，引包就是引用自己的一个特殊功能\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n// import a from 'one.html'\n//创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么\nvar server = http.createServer(function(req,res){\n    console.log(req.url);\n    if(req.url == \"/fang\"){\n        fs.readFile(path.join(__dirname,'./test/xixi.html'),(err,data)=>{\n\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/yuan\"){\n        fs.readFile(path.join(__dirname,\"./test/haha.html\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/0.jpg\"){\n        fs.readFile(path.join(__dirname,\"./test/0.jpg\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"image/jpg\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/bbbbbb.css\"){\n        fs.readFile(path.join(__dirname,\"./test/aaaaaa.css\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/css\"});\n            res.end(data);\n        });\n    }else{\n        res.writeHead(404,{\"Content-type\":\"text/html;charset=UTF-8\"});\n        res.end(\"没有这个页面呦\");\n    }\n});\n\n//运行服务器，监听3000端口（端口号可以任改）\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n最后，总结：\n\nnode.js本质上是没有web容器\n\nurl通过了node的顶层路由设计，呈递某个静态文件\n\n举一个经典的例子：\n\n127.0.0.1:3000/yuan\n这个页面有有一个图片\n图片的源码是 <img src=\"0,jpg\">\n那么你是不是会认为img是在127.0.0.1:3000/yuan/0.jpg\n这个认为是错误的！\n中的yuan不是文件夹，所有都处于根目录，意思是img是127.0.0.1:3000/0.jpg\n\n</pre>\n","site":{"data":{}},"excerpt":"","more":"<pre>\n\n#很重要的一点：node.js本质上是没有web容器\n\n一、node.js本质上是没有web容器的，它可以把router做的非常漂亮，也非常具有隐蔽性和欺骗性\n\n下面给出一段代码：\n\n先给出目录结构：\n>demo1  \n>>test \n>>>0.jpg\n>>>aaaaaa.css\n>>>haha.html\n>>>xixi.html\n>>02_staticRender.js\n\n代码：\n<blockquote>\n//require表示引包，引包就是引用自己的一个特殊功能\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n// import a from 'one.html'\n//创建服务器，参数是一个回调函数，表示如果有请求进来，要做什么\nvar server = http.createServer(function(req,res){\n    console.log(req.url);\n    if(req.url == \"/fang\"){\n        fs.readFile(path.join(__dirname,'./test/xixi.html'),(err,data)=>{\n\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/yuan\"){\n        fs.readFile(path.join(__dirname,\"./test/haha.html\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/html;charset=UTF-8\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/0.jpg\"){\n        fs.readFile(path.join(__dirname,\"./test/0.jpg\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"image/jpg\"});\n            res.end(data);\n        });\n    }else if(req.url == \"/bbbbbb.css\"){\n        fs.readFile(path.join(__dirname,\"./test/aaaaaa.css\"),function(err,data){\n            //req表示请求，request;  res表示响应，response\n            //设置HTTP头部，状态码是200，文件类型是html，字符集是utf8\n            res.writeHead(200,{\"Content-type\":\"text/css\"});\n            res.end(data);\n        });\n    }else{\n        res.writeHead(404,{\"Content-type\":\"text/html;charset=UTF-8\"});\n        res.end(\"没有这个页面呦\");\n    }\n});\n\n//运行服务器，监听3000端口（端口号可以任改）\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n最后，总结：\n\nnode.js本质上是没有web容器\n\nurl通过了node的顶层路由设计，呈递某个静态文件\n\n举一个经典的例子：\n\n127.0.0.1:3000/yuan\n这个页面有有一个图片\n图片的源码是 <img src=\"0,jpg\">\n那么你是不是会认为img是在127.0.0.1:3000/yuan/0.jpg\n这个认为是错误的！\n中的yuan不是文件夹，所有都处于根目录，意思是img是127.0.0.1:3000/0.jpg\n\n</pre>\n"},{"layout":"post","title":"node.js(3)","date":"2017-09-16T16:00:00.000Z","description":"node.js中的http模块","_content":"\n<h1>HTTP模块</h1>\n\n<p>node.js中，将很多的功能划分为一个个module，你想用什么就require什么。</p>\n\n<p>http模块中比较重要的一点就是，要记得res.end()!</p>\n<pre>\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.writeHead(200,{\"Content-Type\":\"text/html;charset=UTF8\"});\n    res.write(\"1121\");\n    //write和end中都必须是字符串\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n  </blockquote>\n  </pre>\n\n","source":"_posts/2017-09-17-node.js(3).markdown","raw":"---\nlayout: post\ntitle: \"node.js(3)\"\ndate: 2017-09-17\ncategories:\n  - Node.js\ndescription: node.js中的http模块\n---\n\n<h1>HTTP模块</h1>\n\n<p>node.js中，将很多的功能划分为一个个module，你想用什么就require什么。</p>\n\n<p>http模块中比较重要的一点就是，要记得res.end()!</p>\n<pre>\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.writeHead(200,{\"Content-Type\":\"text/html;charset=UTF8\"});\n    res.write(\"1121\");\n    //write和end中都必须是字符串\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n  </blockquote>\n  </pre>\n\n","slug":"2017-09-17-node.js(3)","published":1,"updated":"2019-01-31T07:15:59.698Z","comments":1,"photos":[],"link":"","_id":"cjvaywewf000650960ch1j43p","content":"<h1>HTTP模块</h1>\n\n<p>node.js中，将很多的功能划分为一个个module，你想用什么就require什么。</p>\n\n<p></p><p>http模块中比较重要的一点就是，要记得res.end()!</p><p></p>\n<pre>\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.writeHead(200,{\"Content-Type\":\"text/html;charset=UTF8\"});\n    res.write(\"1121\");\n    //write和end中都必须是字符串\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n  </blockquote>\n  </pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1>HTTP模块</h1>\n\n<p>node.js中，将很多的功能划分为一个个module，你想用什么就require什么。</p>\n\n<p></p><p>http模块中比较重要的一点就是，要记得res.end()!</p><p></p>\n<pre>\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n<blockquote>\nvar http=require(\"http\");\n\n//创建一个服务器，回调函数表示接收到请求之后做的事情\nvar server = http.createServer(function (req,res) {\n    //req参数表示request，res=response\n    console.log(\"服务器接收到了请求:\"+req.url);\n    //每一次都要res.end（）,不然loading会一直转\n    res.writeHead(200,{\"Content-Type\":\"text/html;charset=UTF8\"});\n    res.write(\"1121\");\n    //write和end中都必须是字符串\n    res.end(\"完毕\")\n});\n\nserver.listen(3000,\"127.0.0.1\");\n  </blockquote>\n  </pre>\n\n"},{"layout":"post","title":"node.js(4)","date":"2017-09-16T16:00:00.000Z","description":"原生node.js中，如何处理这么一个问题，把异步变同步","_content":"\n<pre>\n原生node.js中，如何处理这么一个问题，把异步变同步\n\n这里会运用到迭代器这个小函数\n\n话不多说，直接上代码：\n\n<blockquote>\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar server = http.createServer(function(req,res){\n\t//不处理收藏夹小图标\n\tif(req.url == \"/favicon.ico\"){\n\t\treturn;\n\t}\n\t//遍历album里面的所有文件、文件夹\n\tfs.readdir(\"./album/\",function(err,files){\n\t\t//files : [\"0.jpg\",\"1.jpg\" ……,\"aaa\",\"bbb\"];\n\t\t//files是一个存放文件(夹)名的数组\n\t\t//存放文件夹的数组\n\t\tvar wenjianjia = [];\n\t\t//迭代器就是强行把异步的函数，变成同步的函数\n\t\t//1做完了，再做2；2做完了，再做3\n\t\t(function iterator(i){\n\t\t\t//遍历结束\n\t\t\tif(i == files.length){\n\t\t\t\tconsole.log(wenjianjia);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfs.stat(\"./album/\" + files[i],function(err,stats){\n\t\t\t\t//检测成功之后做的事情\n\t\t\t\tif(stats.isDirectory()){\n\t\t\t\t\t//如果是文件夹，那么放入数组。不是，什么也不做。\n\t\t\t\t\twenjianjia.push(files[i]);\n\t\t\t\t}\n\t\t\t\titerator(i+1);\n\t\t\t});\n\t\t})(0);\n\t});\n\tres.end();\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n</pre>\n","source":"_posts/2017-09-17-node.js(4).markdown","raw":"---\nlayout: post\ntitle: \"node.js(4)\"\ndate: 2017-09-17\ncategories:\n  - Node.js\ndescription: 原生node.js中，如何处理这么一个问题，把异步变同步\n---\n\n<pre>\n原生node.js中，如何处理这么一个问题，把异步变同步\n\n这里会运用到迭代器这个小函数\n\n话不多说，直接上代码：\n\n<blockquote>\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar server = http.createServer(function(req,res){\n\t//不处理收藏夹小图标\n\tif(req.url == \"/favicon.ico\"){\n\t\treturn;\n\t}\n\t//遍历album里面的所有文件、文件夹\n\tfs.readdir(\"./album/\",function(err,files){\n\t\t//files : [\"0.jpg\",\"1.jpg\" ……,\"aaa\",\"bbb\"];\n\t\t//files是一个存放文件(夹)名的数组\n\t\t//存放文件夹的数组\n\t\tvar wenjianjia = [];\n\t\t//迭代器就是强行把异步的函数，变成同步的函数\n\t\t//1做完了，再做2；2做完了，再做3\n\t\t(function iterator(i){\n\t\t\t//遍历结束\n\t\t\tif(i == files.length){\n\t\t\t\tconsole.log(wenjianjia);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfs.stat(\"./album/\" + files[i],function(err,stats){\n\t\t\t\t//检测成功之后做的事情\n\t\t\t\tif(stats.isDirectory()){\n\t\t\t\t\t//如果是文件夹，那么放入数组。不是，什么也不做。\n\t\t\t\t\twenjianjia.push(files[i]);\n\t\t\t\t}\n\t\t\t\titerator(i+1);\n\t\t\t});\n\t\t})(0);\n\t});\n\tres.end();\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n</pre>\n","slug":"2017-09-17-node.js(4)","published":1,"updated":"2019-01-31T07:15:59.699Z","comments":1,"photos":[],"link":"","_id":"cjvaywewh00075096t3rjwskp","content":"<pre>\n原生node.js中，如何处理这么一个问题，把异步变同步\n\n这里会运用到迭代器这个小函数\n\n话不多说，直接上代码：\n\n<blockquote>\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar server = http.createServer(function(req,res){\n    //不处理收藏夹小图标\n    if(req.url == \"/favicon.ico\"){\n        return;\n    }\n    //遍历album里面的所有文件、文件夹\n    fs.readdir(\"./album/\",function(err,files){\n        //files : [\"0.jpg\",\"1.jpg\" ……,\"aaa\",\"bbb\"];\n        //files是一个存放文件(夹)名的数组\n        //存放文件夹的数组\n        var wenjianjia = [];\n        //迭代器就是强行把异步的函数，变成同步的函数\n        //1做完了，再做2；2做完了，再做3\n        (function iterator(i){\n            //遍历结束\n            if(i == files.length){\n                console.log(wenjianjia);\n                return;\n            }\n            fs.stat(\"./album/\" + files[i],function(err,stats){\n                //检测成功之后做的事情\n                if(stats.isDirectory()){\n                    //如果是文件夹，那么放入数组。不是，什么也不做。\n                    wenjianjia.push(files[i]);\n                }\n                iterator(i+1);\n            });\n        })(0);\n    });\n    res.end();\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n</pre>\n","site":{"data":{}},"excerpt":"","more":"<pre>\n原生node.js中，如何处理这么一个问题，把异步变同步\n\n这里会运用到迭代器这个小函数\n\n话不多说，直接上代码：\n\n<blockquote>\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar server = http.createServer(function(req,res){\n    //不处理收藏夹小图标\n    if(req.url == \"/favicon.ico\"){\n        return;\n    }\n    //遍历album里面的所有文件、文件夹\n    fs.readdir(\"./album/\",function(err,files){\n        //files : [\"0.jpg\",\"1.jpg\" ……,\"aaa\",\"bbb\"];\n        //files是一个存放文件(夹)名的数组\n        //存放文件夹的数组\n        var wenjianjia = [];\n        //迭代器就是强行把异步的函数，变成同步的函数\n        //1做完了，再做2；2做完了，再做3\n        (function iterator(i){\n            //遍历结束\n            if(i == files.length){\n                console.log(wenjianjia);\n                return;\n            }\n            fs.stat(\"./album/\" + files[i],function(err,stats){\n                //检测成功之后做的事情\n                if(stats.isDirectory()){\n                    //如果是文件夹，那么放入数组。不是，什么也不做。\n                    wenjianjia.push(files[i]);\n                }\n                iterator(i+1);\n            });\n        })(0);\n    });\n    res.end();\n});\n\nserver.listen(3000,\"127.0.0.1\");\n</blockquote>\n\n</pre>\n"},{"layout":"post","title":"node.js(5)","date":"2017-09-16T16:00:00.000Z","description":"node.js重点复习","_content":"\n\n<pre>\n复习：\n\nNode.js开发服务器，数据、路由。本地关心的效果，交互；\n\nNode.js实际上是极客开发出的一个小玩具，不是银弹。有着别人不具备的怪异特点：\n\n单线程、Non-blocking I/O、Event Driven。 实际上是一个特点。\n\n首先，Node不为每个用户开辟一个线程，所以非常极端的选择了单线程。\n单线程，要照顾所有的用户，那么就必须有非阻塞I/O，否则一个人的I/O就把别人、自己都阻塞了。\n一旦有非阻塞I/O，一个人如果I/O去了，就会放弃CPU的使用权，换成另一个人使用CPU（或者执行此人后面的语句）。\n所以CPU的利用率100%。第一个人I/O结束了，就要用事件来通知线程，执行回调函数。\n此时必须有事件环，就有一个排队调度机制。Node中有超过半数的C++代码，在搭建事件环。\n\nNode.js和别的老牌3P不一样： \n1)没有自己的语法，使用V8引擎，所以就是JS。\nV8引擎解析JS的，效率非常高，并且V8中很多东西都是异步的。\nNode就是将V8中的一些功能自己没有重写（别人做了，自己就站在巨人肩膀上），移植到了服务器上。  \n2)没有web容器，就是安装配置完成之后，没有一个根目录。  \n\n命令提示符所在路径太重要了，因为程序中的所有相对路径”./”，都是相对这个命令提示符路径的，而不是相对于js文件自己。  \n系统中，80端口，就是默认http端口。所以当没有端口号的时候，就是80端口。  \nserver.listen(80,\"127.0.0.1\");  \n\n二、模块\n● 在Node.js中，以模块为单位划分所有功能，\n并且提供了一个完整的模块加载机制，\n这时的我们可以将应用程序划分为各个不同的部分。\n不可能用一个js文件去写全部的业务。肯定要有MVC。\n\n● 狭义的说，每一个JavaScript文件都是一个模块；\n而多个JavaScript文件之间可以相互require，他们共同实现了一个功能，\n他们整体对外，又称为一个广义上的模块。\n\n● Node.js中，一个JavaScript文件中定义的变量、函数，都只在这个文件内部有效。\n当需要从此JS文件外部引用这些变量、函数时，必须使用exports对象进行暴露。\n使用者要用require()命令引用这个JS文件。\n\nfoo.js文件中的代码：\n1var msg = \"你好\";\n2\n3exports.msg = msg;\nmsg这个变量，是一个js文件内部才有作用域的变量。\n如果别人想用这个变量，那么就要用exports进行暴露。\n\n使用者：\n1var foo = require(\"./test/foo.js\");\n2\n3console.log(foo.msg);\n使用者用foo来接收exports对象，也就是说，这里的foo变量，就是文件中的exports变量。\n\n● 一个JavaScript文件，可以向外exports无数个变量、函数。\n但是require的时候，仅仅需要require这个JS文件一次。\n使用的它的变量、函数的时候，用点语法即可。\n所以，无形之中，增加了一个顶层命名空间。\n\njs文件中，可以用exports暴露很多东西，比如函数、变量。\n1var msg = \"你好\";\n2var info = \"呵呵\";\n3\n4function showInfo(){\n5    console.log(info);\n6}\n7\n8exports.msg = msg;\n9exports.info = info;\n10exports.showInfo = showInfo;\n在使用者中，只需要require一次。\n1var foo = require(\"./test/foo.js\");\n相当于增加了顶层变量。所有的函数、变量都要从这个顶层变量走：\n1console.log(foo.msg);\n2console.log(foo.info);\n3foo.showInfo();\n\nNode中，js文件和js文件，就是被一个个exports和require构建成为网状的。\n不是靠html文件统一在一起的。\n\n● 可以将一个JavaScript文件中，描述一个类。用\nmodule.export = 构造函数名;\n   的方式向外暴露一个类。\n\n也就是说，js文件和js文件之间有两种合作的模式：\n1） 某一个js文件中，提供了函数，供别人使用。 只需要暴露函数就行了； exports.msg=msg;\n2） 某一个js文件，描述了一个类。   module.exports = People;\n\n\n● 如果在require命令中，这么写:\n1var foo = require(\"foo.js\");   //没有写./， 所以不是一个相对路径。是一个特殊的路径\n那么Node.js将该文件视为node_modules目录下的一个文件\n\n● node_modules文件夹并不一定在同级目录里面，在任何直接祖先级目录中，都可以。甚至可以放到NODE_PATH环境变量的文件夹中。\n分享项目的时候，不需要带着modules一起给别人。\n\n● 我们可以使用文件夹来管理模块，比如\n1var bar = require(\"bar\"); \n那么Node.js将会去寻找node_modules目录下的bar文件夹中的index.js去执行。\n\n每一个模块文件夹中，推荐都写一个package.json文件，这个文件的名字不能改。\nnode将自动读取里面的配置。有一个main项，就是入口文件：\n1{\n2  \"name\": \"kaoladebar\",\n3  \"version\": \"1.0.1\",\n4  \"main\" : \"app.js\"\n5}\n6\npackage.json文件，要放到模块文件夹的根目录去。\n\n我们刚才学习了，模块就是一些功能的封装，所以一些成熟的、经常使用的功能，都有人封装成为了模块。\n并且放到了社区中，供人免费下载。\n这个伟大的社区，叫做npm。 也是一个工具名字  node package management\nhttps://www.npmjs.com/\n\n去社区搜索需求，然后点进去，看api。\n如果要配置一个模块，那么直接在cmd使用\n1npm install 模块名字\n就可以安装。 模块名字全球唯一。\n安装的时候，要注意，命令提示符的所在位置。\n\n\n1.我们的依赖包，可能在随时更新，我们永远想保持更新，或者某持某一个版本；\n2.项目越来越大的时候，给别人看的时候，没有必要再次共享我们引用的第三方模块。\n\n我们可以用package.json来管理依赖。\n在cmd中，使用npm init可以初始化一个package.json文件，用回答问题的方式生成一个新的package.json文件。\n\n\n使用\nnpm install\n将能安装所有依赖。\nnpm也有文档，这是package.json的介绍：\nhttps://docs.npmjs.com/files/package.json\n\nrequire()别的js文件的时候，将执行那个js文件。\n\n注意：\nrequire()中的路径，是从当前这个js文件出发，找到别人。而fs是从命令提示符找到别人。\n所以，桌面上有一个a.js， test文件夹中有b.js、c.js、1.txt\na要引用b：\nvar b = require(“./test/b.js”);\nb要引用c：\nvar b = require(“./c.js”);\n\n但是，fs等其他的模块用到路径的时候，都是相对于cmd命令光标所在位置。\n所以，在b.js中想读1.txt文件，推荐用绝对路径：\n1fs.readFile(__dirname + \"/1.txt\",function(err,data){\n2\tif(err) { throw err; }\n3\tconsole.log(data.toString());\n4});\n\n</pre>\n","source":"_posts/2017-09-17-node.js(5).markdown","raw":"---\nlayout: post\ntitle: \"node.js(5)\"\ndate: 2017-09-17\ncategories:\n  - Node.js\ndescription: node.js重点复习\n---\n\n\n<pre>\n复习：\n\nNode.js开发服务器，数据、路由。本地关心的效果，交互；\n\nNode.js实际上是极客开发出的一个小玩具，不是银弹。有着别人不具备的怪异特点：\n\n单线程、Non-blocking I/O、Event Driven。 实际上是一个特点。\n\n首先，Node不为每个用户开辟一个线程，所以非常极端的选择了单线程。\n单线程，要照顾所有的用户，那么就必须有非阻塞I/O，否则一个人的I/O就把别人、自己都阻塞了。\n一旦有非阻塞I/O，一个人如果I/O去了，就会放弃CPU的使用权，换成另一个人使用CPU（或者执行此人后面的语句）。\n所以CPU的利用率100%。第一个人I/O结束了，就要用事件来通知线程，执行回调函数。\n此时必须有事件环，就有一个排队调度机制。Node中有超过半数的C++代码，在搭建事件环。\n\nNode.js和别的老牌3P不一样： \n1)没有自己的语法，使用V8引擎，所以就是JS。\nV8引擎解析JS的，效率非常高，并且V8中很多东西都是异步的。\nNode就是将V8中的一些功能自己没有重写（别人做了，自己就站在巨人肩膀上），移植到了服务器上。  \n2)没有web容器，就是安装配置完成之后，没有一个根目录。  \n\n命令提示符所在路径太重要了，因为程序中的所有相对路径”./”，都是相对这个命令提示符路径的，而不是相对于js文件自己。  \n系统中，80端口，就是默认http端口。所以当没有端口号的时候，就是80端口。  \nserver.listen(80,\"127.0.0.1\");  \n\n二、模块\n● 在Node.js中，以模块为单位划分所有功能，\n并且提供了一个完整的模块加载机制，\n这时的我们可以将应用程序划分为各个不同的部分。\n不可能用一个js文件去写全部的业务。肯定要有MVC。\n\n● 狭义的说，每一个JavaScript文件都是一个模块；\n而多个JavaScript文件之间可以相互require，他们共同实现了一个功能，\n他们整体对外，又称为一个广义上的模块。\n\n● Node.js中，一个JavaScript文件中定义的变量、函数，都只在这个文件内部有效。\n当需要从此JS文件外部引用这些变量、函数时，必须使用exports对象进行暴露。\n使用者要用require()命令引用这个JS文件。\n\nfoo.js文件中的代码：\n1var msg = \"你好\";\n2\n3exports.msg = msg;\nmsg这个变量，是一个js文件内部才有作用域的变量。\n如果别人想用这个变量，那么就要用exports进行暴露。\n\n使用者：\n1var foo = require(\"./test/foo.js\");\n2\n3console.log(foo.msg);\n使用者用foo来接收exports对象，也就是说，这里的foo变量，就是文件中的exports变量。\n\n● 一个JavaScript文件，可以向外exports无数个变量、函数。\n但是require的时候，仅仅需要require这个JS文件一次。\n使用的它的变量、函数的时候，用点语法即可。\n所以，无形之中，增加了一个顶层命名空间。\n\njs文件中，可以用exports暴露很多东西，比如函数、变量。\n1var msg = \"你好\";\n2var info = \"呵呵\";\n3\n4function showInfo(){\n5    console.log(info);\n6}\n7\n8exports.msg = msg;\n9exports.info = info;\n10exports.showInfo = showInfo;\n在使用者中，只需要require一次。\n1var foo = require(\"./test/foo.js\");\n相当于增加了顶层变量。所有的函数、变量都要从这个顶层变量走：\n1console.log(foo.msg);\n2console.log(foo.info);\n3foo.showInfo();\n\nNode中，js文件和js文件，就是被一个个exports和require构建成为网状的。\n不是靠html文件统一在一起的。\n\n● 可以将一个JavaScript文件中，描述一个类。用\nmodule.export = 构造函数名;\n   的方式向外暴露一个类。\n\n也就是说，js文件和js文件之间有两种合作的模式：\n1） 某一个js文件中，提供了函数，供别人使用。 只需要暴露函数就行了； exports.msg=msg;\n2） 某一个js文件，描述了一个类。   module.exports = People;\n\n\n● 如果在require命令中，这么写:\n1var foo = require(\"foo.js\");   //没有写./， 所以不是一个相对路径。是一个特殊的路径\n那么Node.js将该文件视为node_modules目录下的一个文件\n\n● node_modules文件夹并不一定在同级目录里面，在任何直接祖先级目录中，都可以。甚至可以放到NODE_PATH环境变量的文件夹中。\n分享项目的时候，不需要带着modules一起给别人。\n\n● 我们可以使用文件夹来管理模块，比如\n1var bar = require(\"bar\"); \n那么Node.js将会去寻找node_modules目录下的bar文件夹中的index.js去执行。\n\n每一个模块文件夹中，推荐都写一个package.json文件，这个文件的名字不能改。\nnode将自动读取里面的配置。有一个main项，就是入口文件：\n1{\n2  \"name\": \"kaoladebar\",\n3  \"version\": \"1.0.1\",\n4  \"main\" : \"app.js\"\n5}\n6\npackage.json文件，要放到模块文件夹的根目录去。\n\n我们刚才学习了，模块就是一些功能的封装，所以一些成熟的、经常使用的功能，都有人封装成为了模块。\n并且放到了社区中，供人免费下载。\n这个伟大的社区，叫做npm。 也是一个工具名字  node package management\nhttps://www.npmjs.com/\n\n去社区搜索需求，然后点进去，看api。\n如果要配置一个模块，那么直接在cmd使用\n1npm install 模块名字\n就可以安装。 模块名字全球唯一。\n安装的时候，要注意，命令提示符的所在位置。\n\n\n1.我们的依赖包，可能在随时更新，我们永远想保持更新，或者某持某一个版本；\n2.项目越来越大的时候，给别人看的时候，没有必要再次共享我们引用的第三方模块。\n\n我们可以用package.json来管理依赖。\n在cmd中，使用npm init可以初始化一个package.json文件，用回答问题的方式生成一个新的package.json文件。\n\n\n使用\nnpm install\n将能安装所有依赖。\nnpm也有文档，这是package.json的介绍：\nhttps://docs.npmjs.com/files/package.json\n\nrequire()别的js文件的时候，将执行那个js文件。\n\n注意：\nrequire()中的路径，是从当前这个js文件出发，找到别人。而fs是从命令提示符找到别人。\n所以，桌面上有一个a.js， test文件夹中有b.js、c.js、1.txt\na要引用b：\nvar b = require(“./test/b.js”);\nb要引用c：\nvar b = require(“./c.js”);\n\n但是，fs等其他的模块用到路径的时候，都是相对于cmd命令光标所在位置。\n所以，在b.js中想读1.txt文件，推荐用绝对路径：\n1fs.readFile(__dirname + \"/1.txt\",function(err,data){\n2\tif(err) { throw err; }\n3\tconsole.log(data.toString());\n4});\n\n</pre>\n","slug":"2017-09-17-node.js(5)","published":1,"updated":"2019-01-31T07:15:59.700Z","comments":1,"photos":[],"link":"","_id":"cjvaywewu00095096syjnnltb","content":"<pre>\n复习：\n\nNode.js开发服务器，数据、路由。本地关心的效果，交互；\n\nNode.js实际上是极客开发出的一个小玩具，不是银弹。有着别人不具备的怪异特点：\n\n单线程、Non-blocking I/O、Event Driven。 实际上是一个特点。\n\n首先，Node不为每个用户开辟一个线程，所以非常极端的选择了单线程。\n单线程，要照顾所有的用户，那么就必须有非阻塞I/O，否则一个人的I/O就把别人、自己都阻塞了。\n一旦有非阻塞I/O，一个人如果I/O去了，就会放弃CPU的使用权，换成另一个人使用CPU（或者执行此人后面的语句）。\n所以CPU的利用率100%。第一个人I/O结束了，就要用事件来通知线程，执行回调函数。\n此时必须有事件环，就有一个排队调度机制。Node中有超过半数的C++代码，在搭建事件环。\n\nNode.js和别的老牌3P不一样： \n1)没有自己的语法，使用V8引擎，所以就是JS。\nV8引擎解析JS的，效率非常高，并且V8中很多东西都是异步的。\nNode就是将V8中的一些功能自己没有重写（别人做了，自己就站在巨人肩膀上），移植到了服务器上。  \n2)没有web容器，就是安装配置完成之后，没有一个根目录。  \n\n命令提示符所在路径太重要了，因为程序中的所有相对路径”./”，都是相对这个命令提示符路径的，而不是相对于js文件自己。  \n系统中，80端口，就是默认http端口。所以当没有端口号的时候，就是80端口。  \nserver.listen(80,\"127.0.0.1\");  \n\n二、模块\n● 在Node.js中，以模块为单位划分所有功能，\n并且提供了一个完整的模块加载机制，\n这时的我们可以将应用程序划分为各个不同的部分。\n不可能用一个js文件去写全部的业务。肯定要有MVC。\n\n● 狭义的说，每一个JavaScript文件都是一个模块；\n而多个JavaScript文件之间可以相互require，他们共同实现了一个功能，\n他们整体对外，又称为一个广义上的模块。\n\n● Node.js中，一个JavaScript文件中定义的变量、函数，都只在这个文件内部有效。\n当需要从此JS文件外部引用这些变量、函数时，必须使用exports对象进行暴露。\n使用者要用require()命令引用这个JS文件。\n\nfoo.js文件中的代码：\n1var msg = \"你好\";\n2\n3exports.msg = msg;\nmsg这个变量，是一个js文件内部才有作用域的变量。\n如果别人想用这个变量，那么就要用exports进行暴露。\n\n使用者：\n1var foo = require(\"./test/foo.js\");\n2\n3console.log(foo.msg);\n使用者用foo来接收exports对象，也就是说，这里的foo变量，就是文件中的exports变量。\n\n● 一个JavaScript文件，可以向外exports无数个变量、函数。\n但是require的时候，仅仅需要require这个JS文件一次。\n使用的它的变量、函数的时候，用点语法即可。\n所以，无形之中，增加了一个顶层命名空间。\n\njs文件中，可以用exports暴露很多东西，比如函数、变量。\n1var msg = \"你好\";\n2var info = \"呵呵\";\n3\n4function showInfo(){\n5    console.log(info);\n6}\n7\n8exports.msg = msg;\n9exports.info = info;\n10exports.showInfo = showInfo;\n在使用者中，只需要require一次。\n1var foo = require(\"./test/foo.js\");\n相当于增加了顶层变量。所有的函数、变量都要从这个顶层变量走：\n1console.log(foo.msg);\n2console.log(foo.info);\n3foo.showInfo();\n\nNode中，js文件和js文件，就是被一个个exports和require构建成为网状的。\n不是靠html文件统一在一起的。\n\n● 可以将一个JavaScript文件中，描述一个类。用\nmodule.export = 构造函数名;\n   的方式向外暴露一个类。\n\n也就是说，js文件和js文件之间有两种合作的模式：\n1） 某一个js文件中，提供了函数，供别人使用。 只需要暴露函数就行了； exports.msg=msg;\n2） 某一个js文件，描述了一个类。   module.exports = People;\n\n\n● 如果在require命令中，这么写:\n1var foo = require(\"foo.js\");   //没有写./， 所以不是一个相对路径。是一个特殊的路径\n那么Node.js将该文件视为node_modules目录下的一个文件\n\n● node_modules文件夹并不一定在同级目录里面，在任何直接祖先级目录中，都可以。甚至可以放到NODE_PATH环境变量的文件夹中。\n分享项目的时候，不需要带着modules一起给别人。\n\n● 我们可以使用文件夹来管理模块，比如\n1var bar = require(\"bar\"); \n那么Node.js将会去寻找node_modules目录下的bar文件夹中的index.js去执行。\n\n每一个模块文件夹中，推荐都写一个package.json文件，这个文件的名字不能改。\nnode将自动读取里面的配置。有一个main项，就是入口文件：\n1{\n2  \"name\": \"kaoladebar\",\n3  \"version\": \"1.0.1\",\n4  \"main\" : \"app.js\"\n5}\n6\npackage.json文件，要放到模块文件夹的根目录去。\n\n我们刚才学习了，模块就是一些功能的封装，所以一些成熟的、经常使用的功能，都有人封装成为了模块。\n并且放到了社区中，供人免费下载。\n这个伟大的社区，叫做npm。 也是一个工具名字  node package management\nhttps://www.npmjs.com/\n\n去社区搜索需求，然后点进去，看api。\n如果要配置一个模块，那么直接在cmd使用\n1npm install 模块名字\n就可以安装。 模块名字全球唯一。\n安装的时候，要注意，命令提示符的所在位置。\n\n\n1.我们的依赖包，可能在随时更新，我们永远想保持更新，或者某持某一个版本；\n2.项目越来越大的时候，给别人看的时候，没有必要再次共享我们引用的第三方模块。\n\n我们可以用package.json来管理依赖。\n在cmd中，使用npm init可以初始化一个package.json文件，用回答问题的方式生成一个新的package.json文件。\n\n\n使用\nnpm install\n将能安装所有依赖。\nnpm也有文档，这是package.json的介绍：\nhttps://docs.npmjs.com/files/package.json\n\nrequire()别的js文件的时候，将执行那个js文件。\n\n注意：\nrequire()中的路径，是从当前这个js文件出发，找到别人。而fs是从命令提示符找到别人。\n所以，桌面上有一个a.js， test文件夹中有b.js、c.js、1.txt\na要引用b：\nvar b = require(“./test/b.js”);\nb要引用c：\nvar b = require(“./c.js”);\n\n但是，fs等其他的模块用到路径的时候，都是相对于cmd命令光标所在位置。\n所以，在b.js中想读1.txt文件，推荐用绝对路径：\n1fs.readFile(__dirname + \"/1.txt\",function(err,data){\n2    if(err) { throw err; }\n3    console.log(data.toString());\n4});\n\n</pre>\n","site":{"data":{}},"excerpt":"","more":"<pre>\n复习：\n\nNode.js开发服务器，数据、路由。本地关心的效果，交互；\n\nNode.js实际上是极客开发出的一个小玩具，不是银弹。有着别人不具备的怪异特点：\n\n单线程、Non-blocking I/O、Event Driven。 实际上是一个特点。\n\n首先，Node不为每个用户开辟一个线程，所以非常极端的选择了单线程。\n单线程，要照顾所有的用户，那么就必须有非阻塞I/O，否则一个人的I/O就把别人、自己都阻塞了。\n一旦有非阻塞I/O，一个人如果I/O去了，就会放弃CPU的使用权，换成另一个人使用CPU（或者执行此人后面的语句）。\n所以CPU的利用率100%。第一个人I/O结束了，就要用事件来通知线程，执行回调函数。\n此时必须有事件环，就有一个排队调度机制。Node中有超过半数的C++代码，在搭建事件环。\n\nNode.js和别的老牌3P不一样： \n1)没有自己的语法，使用V8引擎，所以就是JS。\nV8引擎解析JS的，效率非常高，并且V8中很多东西都是异步的。\nNode就是将V8中的一些功能自己没有重写（别人做了，自己就站在巨人肩膀上），移植到了服务器上。  \n2)没有web容器，就是安装配置完成之后，没有一个根目录。  \n\n命令提示符所在路径太重要了，因为程序中的所有相对路径”./”，都是相对这个命令提示符路径的，而不是相对于js文件自己。  \n系统中，80端口，就是默认http端口。所以当没有端口号的时候，就是80端口。  \nserver.listen(80,\"127.0.0.1\");  \n\n二、模块\n● 在Node.js中，以模块为单位划分所有功能，\n并且提供了一个完整的模块加载机制，\n这时的我们可以将应用程序划分为各个不同的部分。\n不可能用一个js文件去写全部的业务。肯定要有MVC。\n\n● 狭义的说，每一个JavaScript文件都是一个模块；\n而多个JavaScript文件之间可以相互require，他们共同实现了一个功能，\n他们整体对外，又称为一个广义上的模块。\n\n● Node.js中，一个JavaScript文件中定义的变量、函数，都只在这个文件内部有效。\n当需要从此JS文件外部引用这些变量、函数时，必须使用exports对象进行暴露。\n使用者要用require()命令引用这个JS文件。\n\nfoo.js文件中的代码：\n1var msg = \"你好\";\n2\n3exports.msg = msg;\nmsg这个变量，是一个js文件内部才有作用域的变量。\n如果别人想用这个变量，那么就要用exports进行暴露。\n\n使用者：\n1var foo = require(\"./test/foo.js\");\n2\n3console.log(foo.msg);\n使用者用foo来接收exports对象，也就是说，这里的foo变量，就是文件中的exports变量。\n\n● 一个JavaScript文件，可以向外exports无数个变量、函数。\n但是require的时候，仅仅需要require这个JS文件一次。\n使用的它的变量、函数的时候，用点语法即可。\n所以，无形之中，增加了一个顶层命名空间。\n\njs文件中，可以用exports暴露很多东西，比如函数、变量。\n1var msg = \"你好\";\n2var info = \"呵呵\";\n3\n4function showInfo(){\n5    console.log(info);\n6}\n7\n8exports.msg = msg;\n9exports.info = info;\n10exports.showInfo = showInfo;\n在使用者中，只需要require一次。\n1var foo = require(\"./test/foo.js\");\n相当于增加了顶层变量。所有的函数、变量都要从这个顶层变量走：\n1console.log(foo.msg);\n2console.log(foo.info);\n3foo.showInfo();\n\nNode中，js文件和js文件，就是被一个个exports和require构建成为网状的。\n不是靠html文件统一在一起的。\n\n● 可以将一个JavaScript文件中，描述一个类。用\nmodule.export = 构造函数名;\n   的方式向外暴露一个类。\n\n也就是说，js文件和js文件之间有两种合作的模式：\n1） 某一个js文件中，提供了函数，供别人使用。 只需要暴露函数就行了； exports.msg=msg;\n2） 某一个js文件，描述了一个类。   module.exports = People;\n\n\n● 如果在require命令中，这么写:\n1var foo = require(\"foo.js\");   //没有写./， 所以不是一个相对路径。是一个特殊的路径\n那么Node.js将该文件视为node_modules目录下的一个文件\n\n● node_modules文件夹并不一定在同级目录里面，在任何直接祖先级目录中，都可以。甚至可以放到NODE_PATH环境变量的文件夹中。\n分享项目的时候，不需要带着modules一起给别人。\n\n● 我们可以使用文件夹来管理模块，比如\n1var bar = require(\"bar\"); \n那么Node.js将会去寻找node_modules目录下的bar文件夹中的index.js去执行。\n\n每一个模块文件夹中，推荐都写一个package.json文件，这个文件的名字不能改。\nnode将自动读取里面的配置。有一个main项，就是入口文件：\n1{\n2  \"name\": \"kaoladebar\",\n3  \"version\": \"1.0.1\",\n4  \"main\" : \"app.js\"\n5}\n6\npackage.json文件，要放到模块文件夹的根目录去。\n\n我们刚才学习了，模块就是一些功能的封装，所以一些成熟的、经常使用的功能，都有人封装成为了模块。\n并且放到了社区中，供人免费下载。\n这个伟大的社区，叫做npm。 也是一个工具名字  node package management\nhttps://www.npmjs.com/\n\n去社区搜索需求，然后点进去，看api。\n如果要配置一个模块，那么直接在cmd使用\n1npm install 模块名字\n就可以安装。 模块名字全球唯一。\n安装的时候，要注意，命令提示符的所在位置。\n\n\n1.我们的依赖包，可能在随时更新，我们永远想保持更新，或者某持某一个版本；\n2.项目越来越大的时候，给别人看的时候，没有必要再次共享我们引用的第三方模块。\n\n我们可以用package.json来管理依赖。\n在cmd中，使用npm init可以初始化一个package.json文件，用回答问题的方式生成一个新的package.json文件。\n\n\n使用\nnpm install\n将能安装所有依赖。\nnpm也有文档，这是package.json的介绍：\nhttps://docs.npmjs.com/files/package.json\n\nrequire()别的js文件的时候，将执行那个js文件。\n\n注意：\nrequire()中的路径，是从当前这个js文件出发，找到别人。而fs是从命令提示符找到别人。\n所以，桌面上有一个a.js， test文件夹中有b.js、c.js、1.txt\na要引用b：\nvar b = require(“./test/b.js”);\nb要引用c：\nvar b = require(“./c.js”);\n\n但是，fs等其他的模块用到路径的时候，都是相对于cmd命令光标所在位置。\n所以，在b.js中想读1.txt文件，推荐用绝对路径：\n1fs.readFile(__dirname + \"/1.txt\",function(err,data){\n2    if(err) { throw err; }\n3    console.log(data.toString());\n4});\n\n</pre>\n"},{"layout":"post","title":"express框架","date":"2017-09-18T16:00:00.000Z","description":"Express框架，Express框架是后台的Node框","_content":"<pre>\nExpress框架\n\nExpress框架是后台的Node框架，所以和jQuery、zepto、yui、bootstrap都不一个东西。\n\nExpress在后台的受欢迎的程度，和jQuery一样，就是企业的事实上的标准。\n\n● 原生Node开发，会发现有很多问题。比如：\n\n■ 呈递静态页面很不方便，需要处理每个HTTP请求，还要考虑304问题\n■ 路由处理代码不直观清晰，需要写很多正则表达式和字符串函数\n■ 不能集中精力写业务，要考虑很多其他的东西\n\n</pre>\n<br/>\n<p>EXPRESS的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着他不够健壮，或者没有足够的有用特性,而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。</p>\n\n<pre>\n英语官网：<http://expressjs.com/>\n中文官网：<http://www.expressjs.com.cn/>\n\n安装Express框架，就是使用npm的命令\n<blockquote>\nnpm install --save express\n</blockquote>\n--save参数，表示自动修改package.json文件，自动添加依赖项。\n\n路由功能:\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.get(\"/\",function(req,res){\n6    res.send(\"你好\");\n7});\n8\n9app.get(\"/haha\",function(req,res){\n10    res.send(\"这是haha页面，哈哈哈哈哈哈\");\n11});\n12\n13app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n14    res.send(\"学生信息，学号\" + req.params[0]);\n15});\n16\n17app.get(\"/teacher/:gonghao\",function(req,res){\n18    res.send(\"老师信息，工号\" + req.params.gonghao);\n19});\n20\napp.listen(3000);\n</blockquote>\n\n静态文件能力：\n<blockquote>\napp.use(express.static(\"./public\"));\n</blockquote>\n\n模板引擎：\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.set(\"view engine\",\"ejs\");\n6\n7app.get(\"/\",function(req,res){\n8    res.render(\"haha\",{\n9        \"news\" : [\"我是小新闻啊\",\"我也是啊\",\"哈哈哈哈\"]\n10    });\n11});\n12\napp.listen(3000);\n</blockquote>\n</pre>\n","source":"_posts/2017-09-19-express框架.markdown","raw":"---\nlayout: post\ntitle: \"express框架\"\ndate: 2017-09-19\ncategories:\n  - Express\n  - Node.js\ndescription: Express框架，Express框架是后台的Node框\n---\n<pre>\nExpress框架\n\nExpress框架是后台的Node框架，所以和jQuery、zepto、yui、bootstrap都不一个东西。\n\nExpress在后台的受欢迎的程度，和jQuery一样，就是企业的事实上的标准。\n\n● 原生Node开发，会发现有很多问题。比如：\n\n■ 呈递静态页面很不方便，需要处理每个HTTP请求，还要考虑304问题\n■ 路由处理代码不直观清晰，需要写很多正则表达式和字符串函数\n■ 不能集中精力写业务，要考虑很多其他的东西\n\n</pre>\n<br/>\n<p>EXPRESS的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着他不够健壮，或者没有足够的有用特性,而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。</p>\n\n<pre>\n英语官网：<http://expressjs.com/>\n中文官网：<http://www.expressjs.com.cn/>\n\n安装Express框架，就是使用npm的命令\n<blockquote>\nnpm install --save express\n</blockquote>\n--save参数，表示自动修改package.json文件，自动添加依赖项。\n\n路由功能:\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.get(\"/\",function(req,res){\n6    res.send(\"你好\");\n7});\n8\n9app.get(\"/haha\",function(req,res){\n10    res.send(\"这是haha页面，哈哈哈哈哈哈\");\n11});\n12\n13app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n14    res.send(\"学生信息，学号\" + req.params[0]);\n15});\n16\n17app.get(\"/teacher/:gonghao\",function(req,res){\n18    res.send(\"老师信息，工号\" + req.params.gonghao);\n19});\n20\napp.listen(3000);\n</blockquote>\n\n静态文件能力：\n<blockquote>\napp.use(express.static(\"./public\"));\n</blockquote>\n\n模板引擎：\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.set(\"view engine\",\"ejs\");\n6\n7app.get(\"/\",function(req,res){\n8    res.render(\"haha\",{\n9        \"news\" : [\"我是小新闻啊\",\"我也是啊\",\"哈哈哈哈\"]\n10    });\n11});\n12\napp.listen(3000);\n</blockquote>\n</pre>\n","slug":"2017-09-19-express框架","published":1,"updated":"2019-01-31T07:15:59.701Z","comments":1,"photos":[],"link":"","_id":"cjvaywewz000a5096dbeectpl","content":"<pre>\nExpress框架\n\nExpress框架是后台的Node框架，所以和jQuery、zepto、yui、bootstrap都不一个东西。\n\nExpress在后台的受欢迎的程度，和jQuery一样，就是企业的事实上的标准。\n\n● 原生Node开发，会发现有很多问题。比如：\n\n■ 呈递静态页面很不方便，需要处理每个HTTP请求，还要考虑304问题\n■ 路由处理代码不直观清晰，需要写很多正则表达式和字符串函数\n■ 不能集中精力写业务，要考虑很多其他的东西\n\n</pre>\n<br>\n<p>EXPRESS的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着他不够健壮，或者没有足够的有用特性,而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。</p>\n\n<pre>\n英语官网：<http: expressjs.com=\"\">\n中文官网：<http: www.expressjs.com.cn=\"\">\n\n安装Express框架，就是使用npm的命令\n<blockquote>\nnpm install --save express\n</blockquote>\n--save参数，表示自动修改package.json文件，自动添加依赖项。\n\n路由功能:\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.get(\"/\",function(req,res){\n6    res.send(\"你好\");\n7});\n8\n9app.get(\"/haha\",function(req,res){\n10    res.send(\"这是haha页面，哈哈哈哈哈哈\");\n11});\n12\n13app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n14    res.send(\"学生信息，学号\" + req.params[0]);\n15});\n16\n17app.get(\"/teacher/:gonghao\",function(req,res){\n18    res.send(\"老师信息，工号\" + req.params.gonghao);\n19});\n20\napp.listen(3000);\n</blockquote>\n\n静态文件能力：\n<blockquote>\napp.use(express.static(\"./public\"));\n</blockquote>\n\n模板引擎：\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.set(\"view engine\",\"ejs\");\n6\n7app.get(\"/\",function(req,res){\n8    res.render(\"haha\",{\n9        \"news\" : [\"我是小新闻啊\",\"我也是啊\",\"哈哈哈哈\"]\n10    });\n11});\n12\napp.listen(3000);\n</blockquote>\n</http:></http:></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre>\nExpress框架\n\nExpress框架是后台的Node框架，所以和jQuery、zepto、yui、bootstrap都不一个东西。\n\nExpress在后台的受欢迎的程度，和jQuery一样，就是企业的事实上的标准。\n\n● 原生Node开发，会发现有很多问题。比如：\n\n■ 呈递静态页面很不方便，需要处理每个HTTP请求，还要考虑304问题\n■ 路由处理代码不直观清晰，需要写很多正则表达式和字符串函数\n■ 不能集中精力写业务，要考虑很多其他的东西\n\n</pre>\n<br>\n<p>EXPRESS的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着他不够健壮，或者没有足够的有用特性,而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。</p>\n\n<pre>\n英语官网：<http: expressjs.com=\"\">\n中文官网：<http: www.expressjs.com.cn=\"\">\n\n安装Express框架，就是使用npm的命令\n<blockquote>\nnpm install --save express\n</blockquote>\n--save参数，表示自动修改package.json文件，自动添加依赖项。\n\n路由功能:\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.get(\"/\",function(req,res){\n6    res.send(\"你好\");\n7});\n8\n9app.get(\"/haha\",function(req,res){\n10    res.send(\"这是haha页面，哈哈哈哈哈哈\");\n11});\n12\n13app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n14    res.send(\"学生信息，学号\" + req.params[0]);\n15});\n16\n17app.get(\"/teacher/:gonghao\",function(req,res){\n18    res.send(\"老师信息，工号\" + req.params.gonghao);\n19});\n20\napp.listen(3000);\n</blockquote>\n\n静态文件能力：\n<blockquote>\napp.use(express.static(\"./public\"));\n</blockquote>\n\n模板引擎：\n<blockquote>\n1var express = require(\"express\");\n2\n3var app = express();\n4\n5app.set(\"view engine\",\"ejs\");\n6\n7app.get(\"/\",function(req,res){\n8    res.render(\"haha\",{\n9        \"news\" : [\"我是小新闻啊\",\"我也是啊\",\"哈哈哈哈\"]\n10    });\n11});\n12\napp.listen(3000);\n</blockquote>\n</http:></http:></pre>\n"},{"layout":"post","title":"express-中间件","date":"2017-09-19T16:00:00.000Z","description":"express中的中间件","_content":"\n<h1>中间件</h1>\n\n<pre>\n<P>\n如果我的的get、post回调函数中，没有next参数，那么就匹配上第一个路由，就不会往下匹配了。\n如果想往下匹配的话，那么需要写next()\n</p>\n\n<blockquote>\n1app.get(\"/\",function(req,res,next){\n2    console.log(\"1\");\n3    next();\n4});\n5\n6app.get(\"/\",function(req,res){\n7    console.log(\"2\");\n8});\n</blockquote>\n\n<p>\n下面两个路由，感觉没有关系：(但是实际上冲突了，因为admin可以当做用户名 login可以当做id。)\n</p>\n<blockquote>\n1app.get(\"/:username/:id\",function(req,res){\n2    console.log(\"1\");\n3    res.send(\"用户信息\" + req.params.username);\n4});\n5\n6app.get(\"/admin/login\",function(req,res){\n7    console.log(\"2\");\n8    res.send(\"管理员登录\");\n9});\n</blockquote>\n\n<p>\n解决方法1：交换位置。 也就是说，express中所有的路由（中间件）的顺序至关重要。\n匹配上第一个，就不会往下匹配了。 具体的往上写，抽象的往下写。\n</p>\n<blockquote>\n1app.get(\"/admin/login\",function(req,res){\n2    console.log(\"2\");\n3    res.send(\"管理员登录\");\n4});\n5\n6app.get(\"/:username/:id\",function(req,res){\n7    console.log(\"1\");\n8    res.send(\"用户信息\" + req.params.username);\n9});\n</blockquote>\n\n解决方法2： \n<blockquote>\n1app.get(\"/:username/:id\",function(req,res,next){\n2    var username = req.params.username;\n3    //检索数据库，如果username不存在，那么next()\n4    if(检索数据库){\n5        console.log(\"1\");\n6        res.send(\"用户信息\");\n7    }else{\n8        next();\n9    }\n10});\n11\n12app.get(\"/admin/login\",function(req,res){\n13    console.log(\"2\");\n14    res.send(\"管理员登录\");\n15});\n</blockquote>\n</pre>\n","source":"_posts/2017-09-20-中间件.markdown","raw":"---\nlayout: post\ntitle: \"express-中间件\"\ndate: 2017-09-20\ncategories:\n  - Node.js\n  - Express\ndescription: express中的中间件\n---\n\n<h1>中间件</h1>\n\n<pre>\n<P>\n如果我的的get、post回调函数中，没有next参数，那么就匹配上第一个路由，就不会往下匹配了。\n如果想往下匹配的话，那么需要写next()\n</p>\n\n<blockquote>\n1app.get(\"/\",function(req,res,next){\n2    console.log(\"1\");\n3    next();\n4});\n5\n6app.get(\"/\",function(req,res){\n7    console.log(\"2\");\n8});\n</blockquote>\n\n<p>\n下面两个路由，感觉没有关系：(但是实际上冲突了，因为admin可以当做用户名 login可以当做id。)\n</p>\n<blockquote>\n1app.get(\"/:username/:id\",function(req,res){\n2    console.log(\"1\");\n3    res.send(\"用户信息\" + req.params.username);\n4});\n5\n6app.get(\"/admin/login\",function(req,res){\n7    console.log(\"2\");\n8    res.send(\"管理员登录\");\n9});\n</blockquote>\n\n<p>\n解决方法1：交换位置。 也就是说，express中所有的路由（中间件）的顺序至关重要。\n匹配上第一个，就不会往下匹配了。 具体的往上写，抽象的往下写。\n</p>\n<blockquote>\n1app.get(\"/admin/login\",function(req,res){\n2    console.log(\"2\");\n3    res.send(\"管理员登录\");\n4});\n5\n6app.get(\"/:username/:id\",function(req,res){\n7    console.log(\"1\");\n8    res.send(\"用户信息\" + req.params.username);\n9});\n</blockquote>\n\n解决方法2： \n<blockquote>\n1app.get(\"/:username/:id\",function(req,res,next){\n2    var username = req.params.username;\n3    //检索数据库，如果username不存在，那么next()\n4    if(检索数据库){\n5        console.log(\"1\");\n6        res.send(\"用户信息\");\n7    }else{\n8        next();\n9    }\n10});\n11\n12app.get(\"/admin/login\",function(req,res){\n13    console.log(\"2\");\n14    res.send(\"管理员登录\");\n15});\n</blockquote>\n</pre>\n","slug":"2017-09-20-中间件","published":1,"updated":"2019-01-31T07:15:59.702Z","comments":1,"photos":[],"link":"","_id":"cjvaywexg000d50966u121k3g","content":"<h1>中间件</h1>\n\n<pre>\n<p>\n如果我的的get、post回调函数中，没有next参数，那么就匹配上第一个路由，就不会往下匹配了。\n如果想往下匹配的话，那么需要写next()\n</p>\n\n<blockquote>\n1app.get(\"/\",function(req,res,next){\n2    console.log(\"1\");\n3    next();\n4});\n5\n6app.get(\"/\",function(req,res){\n7    console.log(\"2\");\n8});\n</blockquote>\n\n<p>\n下面两个路由，感觉没有关系：(但是实际上冲突了，因为admin可以当做用户名 login可以当做id。)\n</p>\n<blockquote>\n1app.get(\"/:username/:id\",function(req,res){\n2    console.log(\"1\");\n3    res.send(\"用户信息\" + req.params.username);\n4});\n5\n6app.get(\"/admin/login\",function(req,res){\n7    console.log(\"2\");\n8    res.send(\"管理员登录\");\n9});\n</blockquote>\n\n<p>\n解决方法1：交换位置。 也就是说，express中所有的路由（中间件）的顺序至关重要。\n匹配上第一个，就不会往下匹配了。 具体的往上写，抽象的往下写。\n</p>\n<blockquote>\n1app.get(\"/admin/login\",function(req,res){\n2    console.log(\"2\");\n3    res.send(\"管理员登录\");\n4});\n5\n6app.get(\"/:username/:id\",function(req,res){\n7    console.log(\"1\");\n8    res.send(\"用户信息\" + req.params.username);\n9});\n</blockquote>\n\n解决方法2： \n<blockquote>\n1app.get(\"/:username/:id\",function(req,res,next){\n2    var username = req.params.username;\n3    //检索数据库，如果username不存在，那么next()\n4    if(检索数据库){\n5        console.log(\"1\");\n6        res.send(\"用户信息\");\n7    }else{\n8        next();\n9    }\n10});\n11\n12app.get(\"/admin/login\",function(req,res){\n13    console.log(\"2\");\n14    res.send(\"管理员登录\");\n15});\n</blockquote>\n</pre>\n","site":{"data":{}},"excerpt":"","more":"<h1>中间件</h1>\n\n<pre>\n<p>\n如果我的的get、post回调函数中，没有next参数，那么就匹配上第一个路由，就不会往下匹配了。\n如果想往下匹配的话，那么需要写next()\n</p>\n\n<blockquote>\n1app.get(\"/\",function(req,res,next){\n2    console.log(\"1\");\n3    next();\n4});\n5\n6app.get(\"/\",function(req,res){\n7    console.log(\"2\");\n8});\n</blockquote>\n\n<p>\n下面两个路由，感觉没有关系：(但是实际上冲突了，因为admin可以当做用户名 login可以当做id。)\n</p>\n<blockquote>\n1app.get(\"/:username/:id\",function(req,res){\n2    console.log(\"1\");\n3    res.send(\"用户信息\" + req.params.username);\n4});\n5\n6app.get(\"/admin/login\",function(req,res){\n7    console.log(\"2\");\n8    res.send(\"管理员登录\");\n9});\n</blockquote>\n\n<p>\n解决方法1：交换位置。 也就是说，express中所有的路由（中间件）的顺序至关重要。\n匹配上第一个，就不会往下匹配了。 具体的往上写，抽象的往下写。\n</p>\n<blockquote>\n1app.get(\"/admin/login\",function(req,res){\n2    console.log(\"2\");\n3    res.send(\"管理员登录\");\n4});\n5\n6app.get(\"/:username/:id\",function(req,res){\n7    console.log(\"1\");\n8    res.send(\"用户信息\" + req.params.username);\n9});\n</blockquote>\n\n解决方法2： \n<blockquote>\n1app.get(\"/:username/:id\",function(req,res,next){\n2    var username = req.params.username;\n3    //检索数据库，如果username不存在，那么next()\n4    if(检索数据库){\n5        console.log(\"1\");\n6        res.send(\"用户信息\");\n7    }else{\n8        next();\n9    }\n10});\n11\n12app.get(\"/admin/login\",function(req,res){\n13    console.log(\"2\");\n14    res.send(\"管理员登录\");\n15});\n</blockquote>\n</pre>\n"},{"layout":"post","title":"express 路由","date":"2017-09-20T16:00:00.000Z","description":"Express中的路由","_content":"\n<h1>路由</h1>\n\n<pre>\n<p>当用get请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.get(\"网址\",function(req,res){\n2\t\n3});\n</blockquote>\n\n<p>当用post请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.post(\"网址\",function(req,res){\n2\t\n3});\n</blockquote>\n\n<p>这里的网址，不分大小写，也就是说，你路由是</p>\n<blockquote>\n1app.get(\"/AAb\",function(req,res){\n2    res.send(\"你好\");\n3});\n</blockquote>\n实际上小写的访问也行。\n\n<p>所有的GET参数，? 后面的都已经被忽略。 锚点#也被忽略\n你路由到/a ， 实际/a?id=2&sex=nan 也能被处理。\n正则表达式可以被使用。正则表达式中，未知部分用圆括号分组，然后可以用req.params[0]、[1]得到。</p>\n\n<p>req.params类数组对象。</p>\n<blockquote>\n1app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n2    res.send(\"学生信息，学号\" + req.params[0]);\n3});\n</blockquote>\n\n<p>冒号是更推荐的写法。</p>\n<blockquote>\n1app.get(\"/student/:id\",function(req,res){\n2    var id = req.params[\"id\"];\n3    var reg= /^[\\d]{6}$/;   //正则验证\n4    if(reg.test(id)){\n5        res.send(id);\n6    }else{\n7        res.send(\"请检查格式\");\n8    }\n9});\n</blockquote>\n\n<p>表单可以自己提交到自己上。下面这是一段伪代码 </p>\n<blockquote>\n1app.get(\"/\",function(req,res){\n2    res.render(\"form\");\n3});\n4\n5app.post(\"/\",function(req,res){\n6    //将数据添加进入数据库\n7    res.send(\"成功\");\n8});\n</blockquote>\n\n<p>总结：</p>\n<p>\n适合进行 RESTful路由设计。简单说，就是一个路径，但是http method不同，对这个页面的使用也不同。\n</p>\n/student/345345\n\nget  读取学生信息\nadd\t 添加学生信息\ndelete  删除学生新\n</pre>\n","source":"_posts/2017-09-20-路由.markdown","raw":"---\nlayout: post\ntitle: \"express 路由\"\ndate: 2017-09-21\ncategories:\n  - Node.js\n  - Express\ndescription: Express中的路由\n---\n\n<h1>路由</h1>\n\n<pre>\n<p>当用get请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.get(\"网址\",function(req,res){\n2\t\n3});\n</blockquote>\n\n<p>当用post请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.post(\"网址\",function(req,res){\n2\t\n3});\n</blockquote>\n\n<p>这里的网址，不分大小写，也就是说，你路由是</p>\n<blockquote>\n1app.get(\"/AAb\",function(req,res){\n2    res.send(\"你好\");\n3});\n</blockquote>\n实际上小写的访问也行。\n\n<p>所有的GET参数，? 后面的都已经被忽略。 锚点#也被忽略\n你路由到/a ， 实际/a?id=2&sex=nan 也能被处理。\n正则表达式可以被使用。正则表达式中，未知部分用圆括号分组，然后可以用req.params[0]、[1]得到。</p>\n\n<p>req.params类数组对象。</p>\n<blockquote>\n1app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n2    res.send(\"学生信息，学号\" + req.params[0]);\n3});\n</blockquote>\n\n<p>冒号是更推荐的写法。</p>\n<blockquote>\n1app.get(\"/student/:id\",function(req,res){\n2    var id = req.params[\"id\"];\n3    var reg= /^[\\d]{6}$/;   //正则验证\n4    if(reg.test(id)){\n5        res.send(id);\n6    }else{\n7        res.send(\"请检查格式\");\n8    }\n9});\n</blockquote>\n\n<p>表单可以自己提交到自己上。下面这是一段伪代码 </p>\n<blockquote>\n1app.get(\"/\",function(req,res){\n2    res.render(\"form\");\n3});\n4\n5app.post(\"/\",function(req,res){\n6    //将数据添加进入数据库\n7    res.send(\"成功\");\n8});\n</blockquote>\n\n<p>总结：</p>\n<p>\n适合进行 RESTful路由设计。简单说，就是一个路径，但是http method不同，对这个页面的使用也不同。\n</p>\n/student/345345\n\nget  读取学生信息\nadd\t 添加学生信息\ndelete  删除学生新\n</pre>\n","slug":"2017-09-20-路由","published":1,"updated":"2019-01-31T07:15:59.703Z","comments":1,"photos":[],"link":"","_id":"cjvaywexr000e5096bg6b7568","content":"<h1>路由</h1>\n\n<pre>\n<p>当用get请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.get(\"网址\",function(req,res){\n2    \n3});\n</blockquote>\n\n<p>当用post请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.post(\"网址\",function(req,res){\n2    \n3});\n</blockquote>\n\n<p>这里的网址，不分大小写，也就是说，你路由是</p>\n<blockquote>\n1app.get(\"/AAb\",function(req,res){\n2    res.send(\"你好\");\n3});\n</blockquote>\n实际上小写的访问也行。\n\n<p>所有的GET参数，? 后面的都已经被忽略。 锚点#也被忽略\n你路由到/a ， 实际/a?id=2&sex=nan 也能被处理。\n正则表达式可以被使用。正则表达式中，未知部分用圆括号分组，然后可以用req.params[0]、[1]得到。</p>\n\n<p>req.params类数组对象。</p>\n<blockquote>\n1app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n2    res.send(\"学生信息，学号\" + req.params[0]);\n3});\n</blockquote>\n\n<p>冒号是更推荐的写法。</p>\n<blockquote>\n1app.get(\"/student/:id\",function(req,res){\n2    var id = req.params[\"id\"];\n3    var reg= /^[\\d]{6}$/;   //正则验证\n4    if(reg.test(id)){\n5        res.send(id);\n6    }else{\n7        res.send(\"请检查格式\");\n8    }\n9});\n</blockquote>\n\n<p>表单可以自己提交到自己上。下面这是一段伪代码 </p>\n<blockquote>\n1app.get(\"/\",function(req,res){\n2    res.render(\"form\");\n3});\n4\n5app.post(\"/\",function(req,res){\n6    //将数据添加进入数据库\n7    res.send(\"成功\");\n8});\n</blockquote>\n\n<p>总结：</p>\n<p>\n适合进行 RESTful路由设计。简单说，就是一个路径，但是http method不同，对这个页面的使用也不同。\n</p>\n/student/345345\n\nget  读取学生信息\nadd     添加学生信息\ndelete  删除学生新\n</pre>\n","site":{"data":{}},"excerpt":"","more":"<h1>路由</h1>\n\n<pre>\n<p>当用get请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.get(\"网址\",function(req,res){\n2    \n3});\n</blockquote>\n\n<p>当用post请求访问一个网址的时候，做什么事情： </p>\n<blockquote>\n1app.post(\"网址\",function(req,res){\n2    \n3});\n</blockquote>\n\n<p>这里的网址，不分大小写，也就是说，你路由是</p>\n<blockquote>\n1app.get(\"/AAb\",function(req,res){\n2    res.send(\"你好\");\n3});\n</blockquote>\n实际上小写的访问也行。\n\n<p>所有的GET参数，? 后面的都已经被忽略。 锚点#也被忽略\n你路由到/a ， 实际/a?id=2&sex=nan 也能被处理。\n正则表达式可以被使用。正则表达式中，未知部分用圆括号分组，然后可以用req.params[0]、[1]得到。</p>\n\n<p>req.params类数组对象。</p>\n<blockquote>\n1app.get(/^\\/student\\/([\\d]{10})$/,function(req,res){\n2    res.send(\"学生信息，学号\" + req.params[0]);\n3});\n</blockquote>\n\n<p>冒号是更推荐的写法。</p>\n<blockquote>\n1app.get(\"/student/:id\",function(req,res){\n2    var id = req.params[\"id\"];\n3    var reg= /^[\\d]{6}$/;   //正则验证\n4    if(reg.test(id)){\n5        res.send(id);\n6    }else{\n7        res.send(\"请检查格式\");\n8    }\n9});\n</blockquote>\n\n<p>表单可以自己提交到自己上。下面这是一段伪代码 </p>\n<blockquote>\n1app.get(\"/\",function(req,res){\n2    res.render(\"form\");\n3});\n4\n5app.post(\"/\",function(req,res){\n6    //将数据添加进入数据库\n7    res.send(\"成功\");\n8});\n</blockquote>\n\n<p>总结：</p>\n<p>\n适合进行 RESTful路由设计。简单说，就是一个路径，但是http method不同，对这个页面的使用也不同。\n</p>\n/student/345345\n\nget  读取学生信息\nadd     添加学生信息\ndelete  删除学生新\n</pre>\n"},{"layout":"post","title":"mongoVUE","date":"2017-09-22T16:00:00.000Z","description":"mongoVUE记坑","_content":"\n<h1>mongoVUE</h1>\n\n\n<p>这里有一个坑，关于安装好mongoVUE之后，更新了collections，可vue中无法显示的问题,根据强大的网友，找出了破解的方法，在下面记录一番，防止自己忘记了。</p>\n<br/>\n<p>今天安装MongoDB v3.2.8后，安装了它的一个可视化工具，MongoVUE，但是在操作数据库一切正常的情况下，在MongoVUE中无法查看到collections中的文件，但是在cmd中一切操作正常，也能用find()找到刚才插入的数据。\n百度了一下，换了很多关键词，找了很久没有找到对策，最后终于发现了一条，并且成功解决了这个问题。原因是mongodb3.2版本以后默认的开启的是wiredTiger存储引擎，而之前一直使用mmavp1存储，而且两种文件不兼容。</p>\n<br/>\n<P>废话不多说，直接写具体操作:</p>\n<ul>\n  <li>1.首先将存放数据的文件夹清空，比如我放的就是c:\\mongo,直接将里面的内容全部删除</li>\n  <li>2.在cmd中，进入mongodb所在的文件夹，例如我放的是c:\\mongo，然后输入mongod  --storageEngine mmapv1 --dbpath c:\\mongo 注意输入的是引号中的内容，注意其中的空格，以及最后的是数据存储路径,这样就可以了</li>\n</ul>\n","source":"_posts/2017-09-23-mongoVUE.markdown","raw":"---\nlayout: post\ntitle: \"mongoVUE\"\ndate: 2017-09-23\ncategories:\n  - Mongo\ndescription: mongoVUE记坑\n---\n\n<h1>mongoVUE</h1>\n\n\n<p>这里有一个坑，关于安装好mongoVUE之后，更新了collections，可vue中无法显示的问题,根据强大的网友，找出了破解的方法，在下面记录一番，防止自己忘记了。</p>\n<br/>\n<p>今天安装MongoDB v3.2.8后，安装了它的一个可视化工具，MongoVUE，但是在操作数据库一切正常的情况下，在MongoVUE中无法查看到collections中的文件，但是在cmd中一切操作正常，也能用find()找到刚才插入的数据。\n百度了一下，换了很多关键词，找了很久没有找到对策，最后终于发现了一条，并且成功解决了这个问题。原因是mongodb3.2版本以后默认的开启的是wiredTiger存储引擎，而之前一直使用mmavp1存储，而且两种文件不兼容。</p>\n<br/>\n<P>废话不多说，直接写具体操作:</p>\n<ul>\n  <li>1.首先将存放数据的文件夹清空，比如我放的就是c:\\mongo,直接将里面的内容全部删除</li>\n  <li>2.在cmd中，进入mongodb所在的文件夹，例如我放的是c:\\mongo，然后输入mongod  --storageEngine mmapv1 --dbpath c:\\mongo 注意输入的是引号中的内容，注意其中的空格，以及最后的是数据存储路径,这样就可以了</li>\n</ul>\n","slug":"2017-09-23-mongoVUE","published":1,"updated":"2019-01-31T07:15:59.703Z","comments":1,"photos":[],"link":"","_id":"cjvaywexy000h5096i4ermdpv","content":"<h1>mongoVUE</h1>\n\n\n<p></p><p>这里有一个坑，关于安装好mongoVUE之后，更新了collections，可vue中无法显示的问题,根据强大的网友，找出了破解的方法，在下面记录一番，防止自己忘记了。</p><br><br><p></p>\n<p></p><p>今天安装MongoDB v3.2.8后，安装了它的一个可视化工具，MongoVUE，但是在操作数据库一切正常的情况下，在MongoVUE中无法查看到collections中的文件，但是在cmd中一切操作正常，也能用find()找到刚才插入的数据。<br>百度了一下，换了很多关键词，找了很久没有找到对策，最后终于发现了一条，并且成功解决了这个问题。原因是mongodb3.2版本以后默认的开启的是wiredTiger存储引擎，而之前一直使用mmavp1存储，而且两种文件不兼容。</p><br><br><p></p>\n<p></p><p>废话不多说，直接写具体操作:</p><p></p>\n<ul><br>  <li>1.首先将存放数据的文件夹清空，比如我放的就是c:\\mongo,直接将里面的内容全部删除</li><br>  <li>2.在cmd中，进入mongodb所在的文件夹，例如我放的是c:\\mongo，然后输入mongod  –storageEngine mmapv1 –dbpath c:\\mongo 注意输入的是引号中的内容，注意其中的空格，以及最后的是数据存储路径,这样就可以了</li><br></ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>mongoVUE</h1>\n\n\n<p></p><p>这里有一个坑，关于安装好mongoVUE之后，更新了collections，可vue中无法显示的问题,根据强大的网友，找出了破解的方法，在下面记录一番，防止自己忘记了。</p><br><br><p></p>\n<p></p><p>今天安装MongoDB v3.2.8后，安装了它的一个可视化工具，MongoVUE，但是在操作数据库一切正常的情况下，在MongoVUE中无法查看到collections中的文件，但是在cmd中一切操作正常，也能用find()找到刚才插入的数据。<br>百度了一下，换了很多关键词，找了很久没有找到对策，最后终于发现了一条，并且成功解决了这个问题。原因是mongodb3.2版本以后默认的开启的是wiredTiger存储引擎，而之前一直使用mmavp1存储，而且两种文件不兼容。</p><br><br><p></p>\n<p></p><p>废话不多说，直接写具体操作:</p><p></p>\n<ul><br>  <li>1.首先将存放数据的文件夹清空，比如我放的就是c:\\mongo,直接将里面的内容全部删除</li><br>  <li>2.在cmd中，进入mongodb所在的文件夹，例如我放的是c:\\mongo，然后输入mongod  –storageEngine mmapv1 –dbpath c:\\mongo 注意输入的是引号中的内容，注意其中的空格，以及最后的是数据存储路径,这样就可以了</li><br></ul>\n"},{"layout":"post","title":"在cmd中kill 端口","date":"2017-09-24T16:00:00.000Z","description":"cmd中杀死一个占用端口的进程","_content":"\n<h1>通过控制台杀死一个占用端口的进程</h1>\n\n<p>今天在写代码的时候，重开了2个3000端口，所以需要先kill掉再重开，网上的解决的方法很多，最简单有效的是重启电脑，我们也可以重启编译器，但是这个方法有时候会失效，可是重启电脑又很麻烦。这时就可以通过控制台来杀死占用端口的进程。</p>\n<br/>\n\n<p>接下来使用一个特别简单的方法，记录一哈：</p>\n<ul>\n  <li>1.首先打开控制台,输入cmd</li>\n  <li>2.输入netstat -ano|findstr 3000(端口号)</li>\n  <li>3.taskkill /pid 1780(这个数字是上一行命令结束后，显示的一行中最后一组数字，每个端口不同，LISTENING 后面的那一组数字)</li>\n  <li>4.如果提示无法终止进程，就用/f强制杀死进程：输入taskkill /f /pid 1780</li>\n</ul>\n","source":"_posts/2017-09-25-cmd中kill 端口.markdown","raw":"---\nlayout: post\ntitle: \"在cmd中kill 端口\"\ndate: 2017-09-25\ncategories:\n  - cmd\ndescription: cmd中杀死一个占用端口的进程\n---\n\n<h1>通过控制台杀死一个占用端口的进程</h1>\n\n<p>今天在写代码的时候，重开了2个3000端口，所以需要先kill掉再重开，网上的解决的方法很多，最简单有效的是重启电脑，我们也可以重启编译器，但是这个方法有时候会失效，可是重启电脑又很麻烦。这时就可以通过控制台来杀死占用端口的进程。</p>\n<br/>\n\n<p>接下来使用一个特别简单的方法，记录一哈：</p>\n<ul>\n  <li>1.首先打开控制台,输入cmd</li>\n  <li>2.输入netstat -ano|findstr 3000(端口号)</li>\n  <li>3.taskkill /pid 1780(这个数字是上一行命令结束后，显示的一行中最后一组数字，每个端口不同，LISTENING 后面的那一组数字)</li>\n  <li>4.如果提示无法终止进程，就用/f强制杀死进程：输入taskkill /f /pid 1780</li>\n</ul>\n","slug":"2017-09-25-cmd中kill 端口","published":1,"updated":"2019-01-31T07:15:59.704Z","comments":1,"photos":[],"link":"","_id":"cjvaywey6000j5096sisiq1a4","content":"<h1>通过控制台杀死一个占用端口的进程</h1>\n\n<p></p><p>今天在写代码的时候，重开了2个3000端口，所以需要先kill掉再重开，网上的解决的方法很多，最简单有效的是重启电脑，我们也可以重启编译器，但是这个方法有时候会失效，可是重启电脑又很麻烦。这时就可以通过控制台来杀死占用端口的进程。</p><br><br><p></p>\n<p></p><p>接下来使用一个特别简单的方法，记录一哈：</p><p></p>\n<ul><br>  <li>1.首先打开控制台,输入cmd</li><br>  <li>2.输入netstat -ano|findstr 3000(端口号)</li><br>  <li>3.taskkill /pid 1780(这个数字是上一行命令结束后，显示的一行中最后一组数字，每个端口不同，LISTENING 后面的那一组数字)</li><br>  <li>4.如果提示无法终止进程，就用/f强制杀死进程：输入taskkill /f /pid 1780</li><br></ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>通过控制台杀死一个占用端口的进程</h1>\n\n<p></p><p>今天在写代码的时候，重开了2个3000端口，所以需要先kill掉再重开，网上的解决的方法很多，最简单有效的是重启电脑，我们也可以重启编译器，但是这个方法有时候会失效，可是重启电脑又很麻烦。这时就可以通过控制台来杀死占用端口的进程。</p><br><br><p></p>\n<p></p><p>接下来使用一个特别简单的方法，记录一哈：</p><p></p>\n<ul><br>  <li>1.首先打开控制台,输入cmd</li><br>  <li>2.输入netstat -ano|findstr 3000(端口号)</li><br>  <li>3.taskkill /pid 1780(这个数字是上一行命令结束后，显示的一行中最后一组数字，每个端口不同，LISTENING 后面的那一组数字)</li><br>  <li>4.如果提示无法终止进程，就用/f强制杀死进程：输入taskkill /f /pid 1780</li><br></ul>\n"},{"layout":"post","title":"DHC安装","date":"2017-12-10T16:00:00.000Z","description":"DHC的安装","_content":"\n<h1>DHC的安装</h1>\n\n<p>前端儿们在使用ajax的时候，总会遇到需要测试get或者post请求，get还好直接在浏览器上测试，post就比较麻烦了，这里推荐一款DHC插件，挺不错的，但是需要你科学上网，也就是fanqiang才能用。</p>\n\n<p>所以这里给出3个教程，按步走下去，就可以安装成功，亲测有效</p>\n\n<ul>\n  <li>1.http://chromecj.com/web-development/2015-08/549.html    下载插件</li>\n  <li>2.http://chromecj.com/utilities/2014-09/181.html</li>\n  <li>3.第二步如果执行不成功，请参考这篇教程 http://chromecj.com/utilities/2015-04/423.html </li>\n\n</ul>\n","source":"_posts/2017-12-11-DHC安装.markdown","raw":"---\nlayout: post\ntitle: \"DHC安装\"\ndate: 2017-12-11\ncategories:\n  - Tool\ndescription: DHC的安装\n---\n\n<h1>DHC的安装</h1>\n\n<p>前端儿们在使用ajax的时候，总会遇到需要测试get或者post请求，get还好直接在浏览器上测试，post就比较麻烦了，这里推荐一款DHC插件，挺不错的，但是需要你科学上网，也就是fanqiang才能用。</p>\n\n<p>所以这里给出3个教程，按步走下去，就可以安装成功，亲测有效</p>\n\n<ul>\n  <li>1.http://chromecj.com/web-development/2015-08/549.html    下载插件</li>\n  <li>2.http://chromecj.com/utilities/2014-09/181.html</li>\n  <li>3.第二步如果执行不成功，请参考这篇教程 http://chromecj.com/utilities/2015-04/423.html </li>\n\n</ul>\n","slug":"2017-12-11-DHC安装","published":1,"updated":"2019-01-31T07:15:59.704Z","comments":1,"photos":[],"link":"","_id":"cjvayweyc000m5096bbid0xwg","content":"<h1>DHC的安装</h1>\n\n<p>前端儿们在使用ajax的时候，总会遇到需要测试get或者post请求，get还好直接在浏览器上测试，post就比较麻烦了，这里推荐一款DHC插件，挺不错的，但是需要你科学上网，也就是fanqiang才能用。</p>\n\n<p>所以这里给出3个教程，按步走下去，就可以安装成功，亲测有效</p>\n\n<ul><br>  <li>1.<a href=\"http://chromecj.com/web-development/2015-08/549.html\" target=\"_blank\" rel=\"noopener\">http://chromecj.com/web-development/2015-08/549.html</a>    下载插件</li><br>  <li>2.<a href=\"http://chromecj.com/utilities/2014-09/181.html\" target=\"_blank\" rel=\"noopener\">http://chromecj.com/utilities/2014-09/181.html</a></li><br>  <li>3.第二步如果执行不成功，请参考这篇教程 <a href=\"http://chromecj.com/utilities/2015-04/423.html\" target=\"_blank\" rel=\"noopener\">http://chromecj.com/utilities/2015-04/423.html</a> </li><br><br></ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>DHC的安装</h1>\n\n<p>前端儿们在使用ajax的时候，总会遇到需要测试get或者post请求，get还好直接在浏览器上测试，post就比较麻烦了，这里推荐一款DHC插件，挺不错的，但是需要你科学上网，也就是fanqiang才能用。</p>\n\n<p>所以这里给出3个教程，按步走下去，就可以安装成功，亲测有效</p>\n\n<ul><br>  <li>1.<a href=\"http://chromecj.com/web-development/2015-08/549.html\" target=\"_blank\" rel=\"noopener\">http://chromecj.com/web-development/2015-08/549.html</a>    下载插件</li><br>  <li>2.<a href=\"http://chromecj.com/utilities/2014-09/181.html\" target=\"_blank\" rel=\"noopener\">http://chromecj.com/utilities/2014-09/181.html</a></li><br>  <li>3.第二步如果执行不成功，请参考这篇教程 <a href=\"http://chromecj.com/utilities/2015-04/423.html\" target=\"_blank\" rel=\"noopener\">http://chromecj.com/utilities/2015-04/423.html</a> </li><br><br></ul>\n"},{"layout":"post","title":"css3瀑布流","date":"2018-01-20T16:00:00.000Z","description":"css3瀑布流","_content":"\n<p>大一的时候用css3，原生js和jQuery3中写过瀑布流效果。现在开发一个摄影网站，里面会用到瀑布流效果，我选择使用css3，因为他的性能优于js。然后遇到一个问题，图片跟底部的文字有时候会发生分离。尝试了几种办法都不行。直到！！！/p>\n\n<h4>我发现css3的一个新属性，非常好用！column-break-inside: avoid;这里的avoid:避免在元素内部断行并产生新列</h4>\n<p>这样问题就得到了解决</p>\n<p>html代码:</p>\n<code>\n<div class=\"gallery\">\n    <div class=\"white-panel\">\n        <img src=\"img/photo/1.jpg\" />\n        <h1><a href=\"#\">Title 1</a></h1>\n        <p>Description 1</p>\n    </div>\n   ....//more\n</div>\n</code>\n\n<p>less</p>\n<code>\n.gallery{\n  width: 1000px;\n  column-width: 280px;\n  -webkit-column-width: 280px;\n  -moz-column-width: 280px;\n  -webkit-column-gap: 10px;\n  column-gap: 10px;\n  margin: 0 auto;\n  padding-top: 30px;\n  margin-bottom: 20px;\n  .white-panel{\n    display: block;\n    background: #f9f9f9;\n    border-bottom: 2px solid #c99a05;\n    padding: 8px;\n    padding-top: 20px;\n    -webkit-column-break-inside: avoid; //很重要的一个属性  avoid:避免在元素内部断行并产生新列\n    -moz-column-break-inside: avoid;\n    column-break-inside: avoid;\n    img{\n      width: 100%;\n      max-width: 100%;\n      height: auto;\n    }\n    h1 {\n      font-size: 1em;\n    }\n    a{\n      color: #8a6d3b;\n      font-size: 18px;\n    }\n    &:hover {\n      cursor: pointer;\n      border-bottom-color: #3c99b0;\n      -webkit-transition: all 0.3s ease-in-out;\n      -moz-transition: all 0.3s ease-in-out;\n      -o-transition: all 0.3s ease-in-out;\n      transition: all 0.3s ease-in-out;\n    }\n  }\n}\n</code>\n\n<p>最后，今天在安装sass的时候，一直出一个问题，推荐一篇博客http://blog.csdn.net/chris_ime/article/details/52013349</p>\n","source":"_posts/2018-01-21-css3瀑布流.markdown","raw":"---\nlayout: post\ntitle: \"css3瀑布流\"\ndate: 2018-01-21\ncategories:\n  - css\ndescription: css3瀑布流\n---\n\n<p>大一的时候用css3，原生js和jQuery3中写过瀑布流效果。现在开发一个摄影网站，里面会用到瀑布流效果，我选择使用css3，因为他的性能优于js。然后遇到一个问题，图片跟底部的文字有时候会发生分离。尝试了几种办法都不行。直到！！！/p>\n\n<h4>我发现css3的一个新属性，非常好用！column-break-inside: avoid;这里的avoid:避免在元素内部断行并产生新列</h4>\n<p>这样问题就得到了解决</p>\n<p>html代码:</p>\n<code>\n<div class=\"gallery\">\n    <div class=\"white-panel\">\n        <img src=\"img/photo/1.jpg\" />\n        <h1><a href=\"#\">Title 1</a></h1>\n        <p>Description 1</p>\n    </div>\n   ....//more\n</div>\n</code>\n\n<p>less</p>\n<code>\n.gallery{\n  width: 1000px;\n  column-width: 280px;\n  -webkit-column-width: 280px;\n  -moz-column-width: 280px;\n  -webkit-column-gap: 10px;\n  column-gap: 10px;\n  margin: 0 auto;\n  padding-top: 30px;\n  margin-bottom: 20px;\n  .white-panel{\n    display: block;\n    background: #f9f9f9;\n    border-bottom: 2px solid #c99a05;\n    padding: 8px;\n    padding-top: 20px;\n    -webkit-column-break-inside: avoid; //很重要的一个属性  avoid:避免在元素内部断行并产生新列\n    -moz-column-break-inside: avoid;\n    column-break-inside: avoid;\n    img{\n      width: 100%;\n      max-width: 100%;\n      height: auto;\n    }\n    h1 {\n      font-size: 1em;\n    }\n    a{\n      color: #8a6d3b;\n      font-size: 18px;\n    }\n    &:hover {\n      cursor: pointer;\n      border-bottom-color: #3c99b0;\n      -webkit-transition: all 0.3s ease-in-out;\n      -moz-transition: all 0.3s ease-in-out;\n      -o-transition: all 0.3s ease-in-out;\n      transition: all 0.3s ease-in-out;\n    }\n  }\n}\n</code>\n\n<p>最后，今天在安装sass的时候，一直出一个问题，推荐一篇博客http://blog.csdn.net/chris_ime/article/details/52013349</p>\n","slug":"2018-01-21-css3瀑布流","published":1,"updated":"2019-01-31T07:15:59.705Z","comments":1,"photos":[],"link":"","_id":"cjvayweye000n5096tujmb0ko","content":"<p>大一的时候用css3，原生js和jQuery3中写过瀑布流效果。现在开发一个摄影网站，里面会用到瀑布流效果，我选择使用css3，因为他的性能优于js。然后遇到一个问题，图片跟底部的文字有时候会发生分离。尝试了几种办法都不行。直到！！！/p&gt;<br><br></p><h4>我发现css3的一个新属性，非常好用！column-break-inside: avoid;这里的avoid:避免在元素内部断行并产生新列</h4><br><p>这样问题就得到了解决</p><br><p>html代码:</p><br><code><br><div class=\"gallery\"><br>    <div class=\"white-panel\"><br>        <img src=\"img/photo/1.jpg\"><br>        <h1><a href=\"#\">Title 1</a></h1><br>        <p>Description 1</p><br>    </div><br>   ….//more<br></div><br></code><br><br><p>less</p><br><code><br>.gallery{<br>  width: 1000px;<br>  column-width: 280px;<br>  -webkit-column-width: 280px;<br>  -moz-column-width: 280px;<br>  -webkit-column-gap: 10px;<br>  column-gap: 10px;<br>  margin: 0 auto;<br>  padding-top: 30px;<br>  margin-bottom: 20px;<br>  .white-panel{<br>    display: block;<br>    background: #f9f9f9;<br>    border-bottom: 2px solid #c99a05;<br>    padding: 8px;<br>    padding-top: 20px;<br>    -webkit-column-break-inside: avoid; //很重要的一个属性  avoid:避免在元素内部断行并产生新列<br>    -moz-column-break-inside: avoid;<br>    column-break-inside: avoid;<br>    img{<br>      width: 100%;<br>      max-width: 100%;<br>      height: auto;<br>    }<br>    h1 {<br>      font-size: 1em;<br>    }<br>    a{<br>      color: #8a6d3b;<br>      font-size: 18px;<br>    }<br>    &amp;:hover {<br>      cursor: pointer;<br>      border-bottom-color: #3c99b0;<br>      -webkit-transition: all 0.3s ease-in-out;<br>      -moz-transition: all 0.3s ease-in-out;<br>      -o-transition: all 0.3s ease-in-out;<br>      transition: all 0.3s ease-in-out;<br>    }<br>  }<br>}<br></code><br><br><p>最后，今天在安装sass的时候，一直出一个问题，推荐一篇博客<a href=\"http://blog.csdn.net/chris_ime/article/details/52013349\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/chris_ime/article/details/52013349</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>大一的时候用css3，原生js和jQuery3中写过瀑布流效果。现在开发一个摄影网站，里面会用到瀑布流效果，我选择使用css3，因为他的性能优于js。然后遇到一个问题，图片跟底部的文字有时候会发生分离。尝试了几种办法都不行。直到！！！/p&gt;<br><br></p><h4>我发现css3的一个新属性，非常好用！column-break-inside: avoid;这里的avoid:避免在元素内部断行并产生新列</h4><br><p>这样问题就得到了解决</p><br><p>html代码:</p><br><code><br><div class=\"gallery\"><br>    <div class=\"white-panel\"><br>        <img src=\"img/photo/1.jpg\"><br>        <h1><a href=\"#\">Title 1</a></h1><br>        <p>Description 1</p><br>    </div><br>   ….//more<br></div><br></code><br><br><p>less</p><br><code><br>.gallery{<br>  width: 1000px;<br>  column-width: 280px;<br>  -webkit-column-width: 280px;<br>  -moz-column-width: 280px;<br>  -webkit-column-gap: 10px;<br>  column-gap: 10px;<br>  margin: 0 auto;<br>  padding-top: 30px;<br>  margin-bottom: 20px;<br>  .white-panel{<br>    display: block;<br>    background: #f9f9f9;<br>    border-bottom: 2px solid #c99a05;<br>    padding: 8px;<br>    padding-top: 20px;<br>    -webkit-column-break-inside: avoid; //很重要的一个属性  avoid:避免在元素内部断行并产生新列<br>    -moz-column-break-inside: avoid;<br>    column-break-inside: avoid;<br>    img{<br>      width: 100%;<br>      max-width: 100%;<br>      height: auto;<br>    }<br>    h1 {<br>      font-size: 1em;<br>    }<br>    a{<br>      color: #8a6d3b;<br>      font-size: 18px;<br>    }<br>    &amp;:hover {<br>      cursor: pointer;<br>      border-bottom-color: #3c99b0;<br>      -webkit-transition: all 0.3s ease-in-out;<br>      -moz-transition: all 0.3s ease-in-out;<br>      -o-transition: all 0.3s ease-in-out;<br>      transition: all 0.3s ease-in-out;<br>    }<br>  }<br>}<br></code><br><br><p>最后，今天在安装sass的时候，一直出一个问题，推荐一篇博客<a href=\"http://blog.csdn.net/chris_ime/article/details/52013349\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/chris_ime/article/details/52013349</a></p>\n"},{"layout":"post","title":"antd pro","date":"2018-01-24T16:00:00.000Z","description":null,"image":"https://unsplash.it/2000/1200?image=236","image-sm":"https://unsplash.it/2000/1200?image=236","_content":"\n<p>在使用ant design pro 的时候遇到一个问题，webstorm一直报一个错误：ESLint: Expected linebreaks to be 'CRLF' but found 'LF';试过2个办法都不行，后来找到一个办法：</p>\n\n<h4>将.eslintrc文件下的\"rules\":{ \"linebreak-style\": 0,}</h4>\n","source":"_posts/2018-01-25-antd pro.markdown","raw":"---\nlayout: post\ntitle: \"antd pro\"\ndate: 2018-01-25\ncategories:\n  - ESlint\ndescription: \nimage: https://unsplash.it/2000/1200?image=236\nimage-sm: https://unsplash.it/2000/1200?image=236\n---\n\n<p>在使用ant design pro 的时候遇到一个问题，webstorm一直报一个错误：ESLint: Expected linebreaks to be 'CRLF' but found 'LF';试过2个办法都不行，后来找到一个办法：</p>\n\n<h4>将.eslintrc文件下的\"rules\":{ \"linebreak-style\": 0,}</h4>\n","slug":"2018-01-25-antd pro","published":1,"updated":"2019-01-31T07:15:59.705Z","comments":1,"photos":[],"link":"","_id":"cjvayweyl000q5096l6cgjymc","content":"<p>在使用ant design pro 的时候遇到一个问题，webstorm一直报一个错误：ESLint: Expected linebreaks to be ‘CRLF’ but found ‘LF’;试过2个办法都不行，后来找到一个办法：</p>\n\n<h4>将.eslintrc文件下的”rules”:{ “linebreak-style”: 0,}</h4>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用ant design pro 的时候遇到一个问题，webstorm一直报一个错误：ESLint: Expected linebreaks to be ‘CRLF’ but found ‘LF’;试过2个办法都不行，后来找到一个办法：</p>\n\n<h4>将.eslintrc文件下的”rules”:{ “linebreak-style”: 0,}</h4>\n"},{"layout":"post","title":"node.js爬知乎数据并分析","date":"2018-01-29T16:00:00.000Z","description":"node.js爬知乎数据并分析","_content":"\n前段时间看了一节公开课，教的是用node.js来爬知乎的数据。\n下面会给出github地址，也会附上代码，简单记录一下自己踩过的坑。\nhttps://github.com/zhangjing9898/crawler\n这是爬问题的函数\n```\nasync function getQuestion(db, id) {\n    let res = await rp({url: `https://www.zhihu.com/question/${id}`});\n    let $ = cheerio.load(res);\n\n    let data = $('#data').attr('data-state');\n\n    let state = JSON.parse(htmlDecode(data));\n    let question = state.entities.questions[id];\n\n    db.collection(\"questions\")\n        .insert(question)\n    console.log(`question id : ${id} insert into db`)\n    await getAnswers(db, id, question.answerCount)\n\n}\n```\n这是爬该问题的评论数\n```\nasync function getAnswers(db, id, answerCount) {\n    for (let offset = 0; offset < answerCount; offset += 20) {\n        let res = await rp({\n            url: `https://www.zhihu.com/api/v4/questions/${id}/answers?sort_by=default&include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cupvoted_followees%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%3F%28type%3Dbest_answerer%29%5D.topics&limit=20&offset=${offset}`,\n            headers: {\n                authorization: \"oauth c3cef7c66a1843f8b3a9e6a1e3160e20\"\n            }\n        })\n        let data = JSON.parse(res);\n        let answers = data.data;\n        db.collection(\"answers\").insertMany(answers);\n    }\n}\n```\n这是main·函数：\n```\nasync function main() {\n    let url = 'mongodb://localhost:27017/crawler';\n    let db = await MongoClient.connect(url);\n\n    for(let id=30000000;id<40000000;id++){\n        try {\n            await getQuestion(db,id);\n        }catch (err){\n            console.log(`question id : ${id}`);\n        }\n    }\n    //爬知乎数据，详细版：\n    // let url=\"mongodb://localhost:27017/crawler\";\n    // let db=await MongoClient.connect(url);\n    //\n    // await Promise.map(\n    //     [...range(start,end)],\n    //     async i=>{\n    //         try{\n    //             await retry(async()=>{\n    //                 let question=await db.collection('questions').findOne({id:i});\n    //                 if(question){\n    //                     console.log(`question id：${i} already exists,skip`)\n    //                 }else{\n    //                     try {\n    //                         await Promise.resolve(getQuestion(db,i)).timeout(20000);\n    //                     }catch(err){\n    //                         if(err.name=='StatusCodeError'){\n    //                             return console.log(`question id：${i} StatusCodeError is ${err.statusCode}`)\n    //                         }\n    //                         console.log(`question id：${i} error occur,${err.name},retry......`);\n    //                         throw err;\n    //                     }\n    //                 }\n    //             },{max_tries:10,interval:2000})\n    //         }catch (err){\n    //             console.log(`question id： ${i} retry fail,drop`)\n    //         }\n    //     },\n    //     {concurrency:50}  /*控制并发数*/\n    // )\n}\nmain().catch(err => console.log(err))\n```\n\n数据爬出来了，下一步就是将它可视化展示，这里用到了echarts，其实用图表展示可以使用echarts或者d3，d3展示的图类更加丰富，同时难度大于echarts，所以这里用的vue-echarts，用了vue的脚手架来构建，下面会给出github地址。\n坑：\n1.vue的脚手架下 使用eslintrc规范，如果不想使用这种规范，可以在config目录下的index.js的useEslint: 设置为false。\n2.在对数据库中的数据进行聚合已经分类等的时候，我用了mongovue中的aggravate。\n下面来记录一哈步骤：\n```\n //stage 1\n            {\n                $group: {\n                    _id: '$id',\n                    visitCount: {$last: '$visitCount'},\n                    topics: {$last: '$topics'},\n                    answerCount: {$last: '$answerCount'},\n                    created: {$last: '$created'},\n                    updateTime: {$last: '$updateTime'},\n                    commentCount: {$last: 'commentCount'},\n                    followerCount: {$last: 'followerCount'}\n                }\n            },\n//stage 2\n            {\n                $out: \"d_questions\"\n            },\n```\n选中collections 然后找到aggressive选项 然后把上面这一块paste上去 。它的意思就相当于mysql中的distinct+group by ，再把结果输出在d_questions这个collections里面。\n\n```\n{\n                $group: {\n                    _id: '$answerCount',\n                    count:{\"$sum\":1}\n                }\n            },\n            {\n                $out: \"t\"\n            },\n```\n同理 这一块的意思是 聚合分类  比如评论数为1的个数是5000条 评论数为60 的个数只有1 ，用于后面做词云图等等。\n这是爬知乎数据做可视化分析的 github地址：https://github.com/zhangjing9898/zhihu-data-view\n","source":"_posts/2018-01-30-node爬知乎数据并分析.md","raw":"---\nlayout: post\ntitle: \"node.js爬知乎数据并分析\"\ndate: 2018-01-30\ncategories:\n  - Node.js\ndescription: node.js爬知乎数据并分析\n---\n\n前段时间看了一节公开课，教的是用node.js来爬知乎的数据。\n下面会给出github地址，也会附上代码，简单记录一下自己踩过的坑。\nhttps://github.com/zhangjing9898/crawler\n这是爬问题的函数\n```\nasync function getQuestion(db, id) {\n    let res = await rp({url: `https://www.zhihu.com/question/${id}`});\n    let $ = cheerio.load(res);\n\n    let data = $('#data').attr('data-state');\n\n    let state = JSON.parse(htmlDecode(data));\n    let question = state.entities.questions[id];\n\n    db.collection(\"questions\")\n        .insert(question)\n    console.log(`question id : ${id} insert into db`)\n    await getAnswers(db, id, question.answerCount)\n\n}\n```\n这是爬该问题的评论数\n```\nasync function getAnswers(db, id, answerCount) {\n    for (let offset = 0; offset < answerCount; offset += 20) {\n        let res = await rp({\n            url: `https://www.zhihu.com/api/v4/questions/${id}/answers?sort_by=default&include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cupvoted_followees%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%3F%28type%3Dbest_answerer%29%5D.topics&limit=20&offset=${offset}`,\n            headers: {\n                authorization: \"oauth c3cef7c66a1843f8b3a9e6a1e3160e20\"\n            }\n        })\n        let data = JSON.parse(res);\n        let answers = data.data;\n        db.collection(\"answers\").insertMany(answers);\n    }\n}\n```\n这是main·函数：\n```\nasync function main() {\n    let url = 'mongodb://localhost:27017/crawler';\n    let db = await MongoClient.connect(url);\n\n    for(let id=30000000;id<40000000;id++){\n        try {\n            await getQuestion(db,id);\n        }catch (err){\n            console.log(`question id : ${id}`);\n        }\n    }\n    //爬知乎数据，详细版：\n    // let url=\"mongodb://localhost:27017/crawler\";\n    // let db=await MongoClient.connect(url);\n    //\n    // await Promise.map(\n    //     [...range(start,end)],\n    //     async i=>{\n    //         try{\n    //             await retry(async()=>{\n    //                 let question=await db.collection('questions').findOne({id:i});\n    //                 if(question){\n    //                     console.log(`question id：${i} already exists,skip`)\n    //                 }else{\n    //                     try {\n    //                         await Promise.resolve(getQuestion(db,i)).timeout(20000);\n    //                     }catch(err){\n    //                         if(err.name=='StatusCodeError'){\n    //                             return console.log(`question id：${i} StatusCodeError is ${err.statusCode}`)\n    //                         }\n    //                         console.log(`question id：${i} error occur,${err.name},retry......`);\n    //                         throw err;\n    //                     }\n    //                 }\n    //             },{max_tries:10,interval:2000})\n    //         }catch (err){\n    //             console.log(`question id： ${i} retry fail,drop`)\n    //         }\n    //     },\n    //     {concurrency:50}  /*控制并发数*/\n    // )\n}\nmain().catch(err => console.log(err))\n```\n\n数据爬出来了，下一步就是将它可视化展示，这里用到了echarts，其实用图表展示可以使用echarts或者d3，d3展示的图类更加丰富，同时难度大于echarts，所以这里用的vue-echarts，用了vue的脚手架来构建，下面会给出github地址。\n坑：\n1.vue的脚手架下 使用eslintrc规范，如果不想使用这种规范，可以在config目录下的index.js的useEslint: 设置为false。\n2.在对数据库中的数据进行聚合已经分类等的时候，我用了mongovue中的aggravate。\n下面来记录一哈步骤：\n```\n //stage 1\n            {\n                $group: {\n                    _id: '$id',\n                    visitCount: {$last: '$visitCount'},\n                    topics: {$last: '$topics'},\n                    answerCount: {$last: '$answerCount'},\n                    created: {$last: '$created'},\n                    updateTime: {$last: '$updateTime'},\n                    commentCount: {$last: 'commentCount'},\n                    followerCount: {$last: 'followerCount'}\n                }\n            },\n//stage 2\n            {\n                $out: \"d_questions\"\n            },\n```\n选中collections 然后找到aggressive选项 然后把上面这一块paste上去 。它的意思就相当于mysql中的distinct+group by ，再把结果输出在d_questions这个collections里面。\n\n```\n{\n                $group: {\n                    _id: '$answerCount',\n                    count:{\"$sum\":1}\n                }\n            },\n            {\n                $out: \"t\"\n            },\n```\n同理 这一块的意思是 聚合分类  比如评论数为1的个数是5000条 评论数为60 的个数只有1 ，用于后面做词云图等等。\n这是爬知乎数据做可视化分析的 github地址：https://github.com/zhangjing9898/zhihu-data-view\n","slug":"2018-01-30-node爬知乎数据并分析","published":1,"updated":"2019-01-31T07:15:59.706Z","comments":1,"photos":[],"link":"","_id":"cjvayweyq000r50961qfqhmlh","content":"<p>前段时间看了一节公开课，教的是用node.js来爬知乎的数据。<br>下面会给出github地址，也会附上代码，简单记录一下自己踩过的坑。<br><a href=\"https://github.com/zhangjing9898/crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangjing9898/crawler</a><br>这是爬问题的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function getQuestion(db, id) &#123;</span><br><span class=\"line\">    let res = await rp(&#123;url: `https://www.zhihu.com/question/$&#123;id&#125;`&#125;);</span><br><span class=\"line\">    let $ = cheerio.load(res);</span><br><span class=\"line\"></span><br><span class=\"line\">    let data = $(&apos;#data&apos;).attr(&apos;data-state&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let state = JSON.parse(htmlDecode(data));</span><br><span class=\"line\">    let question = state.entities.questions[id];</span><br><span class=\"line\"></span><br><span class=\"line\">    db.collection(&quot;questions&quot;)</span><br><span class=\"line\">        .insert(question)</span><br><span class=\"line\">    console.log(`question id : $&#123;id&#125; insert into db`)</span><br><span class=\"line\">    await getAnswers(db, id, question.answerCount)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是爬该问题的评论数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function getAnswers(db, id, answerCount) &#123;</span><br><span class=\"line\">    for (let offset = 0; offset &lt; answerCount; offset += 20) &#123;</span><br><span class=\"line\">        let res = await rp(&#123;</span><br><span class=\"line\">            url: `https://www.zhihu.com/api/v4/questions/$&#123;id&#125;/answers?sort_by=default&amp;include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cupvoted_followees%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%3F%28type%3Dbest_answerer%29%5D.topics&amp;limit=20&amp;offset=$&#123;offset&#125;`,</span><br><span class=\"line\">            headers: &#123;</span><br><span class=\"line\">                authorization: &quot;oauth c3cef7c66a1843f8b3a9e6a1e3160e20&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        let data = JSON.parse(res);</span><br><span class=\"line\">        let answers = data.data;</span><br><span class=\"line\">        db.collection(&quot;answers&quot;).insertMany(answers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是main·函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function main() &#123;</span><br><span class=\"line\">    let url = &apos;mongodb://localhost:27017/crawler&apos;;</span><br><span class=\"line\">    let db = await MongoClient.connect(url);</span><br><span class=\"line\"></span><br><span class=\"line\">    for(let id=30000000;id&lt;40000000;id++)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            await getQuestion(db,id);</span><br><span class=\"line\">        &#125;catch (err)&#123;</span><br><span class=\"line\">            console.log(`question id : $&#123;id&#125;`);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //爬知乎数据，详细版：</span><br><span class=\"line\">    // let url=&quot;mongodb://localhost:27017/crawler&quot;;</span><br><span class=\"line\">    // let db=await MongoClient.connect(url);</span><br><span class=\"line\">    //</span><br><span class=\"line\">    // await Promise.map(</span><br><span class=\"line\">    //     [...range(start,end)],</span><br><span class=\"line\">    //     async i=&gt;&#123;</span><br><span class=\"line\">    //         try&#123;</span><br><span class=\"line\">    //             await retry(async()=&gt;&#123;</span><br><span class=\"line\">    //                 let question=await db.collection(&apos;questions&apos;).findOne(&#123;id:i&#125;);</span><br><span class=\"line\">    //                 if(question)&#123;</span><br><span class=\"line\">    //                     console.log(`question id：$&#123;i&#125; already exists,skip`)</span><br><span class=\"line\">    //                 &#125;else&#123;</span><br><span class=\"line\">    //                     try &#123;</span><br><span class=\"line\">    //                         await Promise.resolve(getQuestion(db,i)).timeout(20000);</span><br><span class=\"line\">    //                     &#125;catch(err)&#123;</span><br><span class=\"line\">    //                         if(err.name==&apos;StatusCodeError&apos;)&#123;</span><br><span class=\"line\">    //                             return console.log(`question id：$&#123;i&#125; StatusCodeError is $&#123;err.statusCode&#125;`)</span><br><span class=\"line\">    //                         &#125;</span><br><span class=\"line\">    //                         console.log(`question id：$&#123;i&#125; error occur,$&#123;err.name&#125;,retry......`);</span><br><span class=\"line\">    //                         throw err;</span><br><span class=\"line\">    //                     &#125;</span><br><span class=\"line\">    //                 &#125;</span><br><span class=\"line\">    //             &#125;,&#123;max_tries:10,interval:2000&#125;)</span><br><span class=\"line\">    //         &#125;catch (err)&#123;</span><br><span class=\"line\">    //             console.log(`question id： $&#123;i&#125; retry fail,drop`)</span><br><span class=\"line\">    //         &#125;</span><br><span class=\"line\">    //     &#125;,</span><br><span class=\"line\">    //     &#123;concurrency:50&#125;  /*控制并发数*/</span><br><span class=\"line\">    // )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main().catch(err =&gt; console.log(err))</span><br></pre></td></tr></table></figure></p>\n<p>数据爬出来了，下一步就是将它可视化展示，这里用到了echarts，其实用图表展示可以使用echarts或者d3，d3展示的图类更加丰富，同时难度大于echarts，所以这里用的vue-echarts，用了vue的脚手架来构建，下面会给出github地址。<br>坑：<br>1.vue的脚手架下 使用eslintrc规范，如果不想使用这种规范，可以在config目录下的index.js的useEslint: 设置为false。<br>2.在对数据库中的数据进行聚合已经分类等的时候，我用了mongovue中的aggravate。<br>下面来记录一哈步骤：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //stage 1</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $group: &#123;</span><br><span class=\"line\">                    _id: &apos;$id&apos;,</span><br><span class=\"line\">                    visitCount: &#123;$last: &apos;$visitCount&apos;&#125;,</span><br><span class=\"line\">                    topics: &#123;$last: &apos;$topics&apos;&#125;,</span><br><span class=\"line\">                    answerCount: &#123;$last: &apos;$answerCount&apos;&#125;,</span><br><span class=\"line\">                    created: &#123;$last: &apos;$created&apos;&#125;,</span><br><span class=\"line\">                    updateTime: &#123;$last: &apos;$updateTime&apos;&#125;,</span><br><span class=\"line\">                    commentCount: &#123;$last: &apos;commentCount&apos;&#125;,</span><br><span class=\"line\">                    followerCount: &#123;$last: &apos;followerCount&apos;&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">//stage 2</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $out: &quot;d_questions&quot;</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>选中collections 然后找到aggressive选项 然后把上面这一块paste上去 。它的意思就相当于mysql中的distinct+group by ，再把结果输出在d_questions这个collections里面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">                $group: &#123;</span><br><span class=\"line\">                    _id: &apos;$answerCount&apos;,</span><br><span class=\"line\">                    count:&#123;&quot;$sum&quot;:1&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $out: &quot;t&quot;</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure>\n<p>同理 这一块的意思是 聚合分类  比如评论数为1的个数是5000条 评论数为60 的个数只有1 ，用于后面做词云图等等。<br>这是爬知乎数据做可视化分析的 github地址：<a href=\"https://github.com/zhangjing9898/zhihu-data-view\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangjing9898/zhihu-data-view</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间看了一节公开课，教的是用node.js来爬知乎的数据。<br>下面会给出github地址，也会附上代码，简单记录一下自己踩过的坑。<br><a href=\"https://github.com/zhangjing9898/crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangjing9898/crawler</a><br>这是爬问题的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function getQuestion(db, id) &#123;</span><br><span class=\"line\">    let res = await rp(&#123;url: `https://www.zhihu.com/question/$&#123;id&#125;`&#125;);</span><br><span class=\"line\">    let $ = cheerio.load(res);</span><br><span class=\"line\"></span><br><span class=\"line\">    let data = $(&apos;#data&apos;).attr(&apos;data-state&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let state = JSON.parse(htmlDecode(data));</span><br><span class=\"line\">    let question = state.entities.questions[id];</span><br><span class=\"line\"></span><br><span class=\"line\">    db.collection(&quot;questions&quot;)</span><br><span class=\"line\">        .insert(question)</span><br><span class=\"line\">    console.log(`question id : $&#123;id&#125; insert into db`)</span><br><span class=\"line\">    await getAnswers(db, id, question.answerCount)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是爬该问题的评论数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function getAnswers(db, id, answerCount) &#123;</span><br><span class=\"line\">    for (let offset = 0; offset &lt; answerCount; offset += 20) &#123;</span><br><span class=\"line\">        let res = await rp(&#123;</span><br><span class=\"line\">            url: `https://www.zhihu.com/api/v4/questions/$&#123;id&#125;/answers?sort_by=default&amp;include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cupvoted_followees%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%3F%28type%3Dbest_answerer%29%5D.topics&amp;limit=20&amp;offset=$&#123;offset&#125;`,</span><br><span class=\"line\">            headers: &#123;</span><br><span class=\"line\">                authorization: &quot;oauth c3cef7c66a1843f8b3a9e6a1e3160e20&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        let data = JSON.parse(res);</span><br><span class=\"line\">        let answers = data.data;</span><br><span class=\"line\">        db.collection(&quot;answers&quot;).insertMany(answers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是main·函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function main() &#123;</span><br><span class=\"line\">    let url = &apos;mongodb://localhost:27017/crawler&apos;;</span><br><span class=\"line\">    let db = await MongoClient.connect(url);</span><br><span class=\"line\"></span><br><span class=\"line\">    for(let id=30000000;id&lt;40000000;id++)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            await getQuestion(db,id);</span><br><span class=\"line\">        &#125;catch (err)&#123;</span><br><span class=\"line\">            console.log(`question id : $&#123;id&#125;`);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //爬知乎数据，详细版：</span><br><span class=\"line\">    // let url=&quot;mongodb://localhost:27017/crawler&quot;;</span><br><span class=\"line\">    // let db=await MongoClient.connect(url);</span><br><span class=\"line\">    //</span><br><span class=\"line\">    // await Promise.map(</span><br><span class=\"line\">    //     [...range(start,end)],</span><br><span class=\"line\">    //     async i=&gt;&#123;</span><br><span class=\"line\">    //         try&#123;</span><br><span class=\"line\">    //             await retry(async()=&gt;&#123;</span><br><span class=\"line\">    //                 let question=await db.collection(&apos;questions&apos;).findOne(&#123;id:i&#125;);</span><br><span class=\"line\">    //                 if(question)&#123;</span><br><span class=\"line\">    //                     console.log(`question id：$&#123;i&#125; already exists,skip`)</span><br><span class=\"line\">    //                 &#125;else&#123;</span><br><span class=\"line\">    //                     try &#123;</span><br><span class=\"line\">    //                         await Promise.resolve(getQuestion(db,i)).timeout(20000);</span><br><span class=\"line\">    //                     &#125;catch(err)&#123;</span><br><span class=\"line\">    //                         if(err.name==&apos;StatusCodeError&apos;)&#123;</span><br><span class=\"line\">    //                             return console.log(`question id：$&#123;i&#125; StatusCodeError is $&#123;err.statusCode&#125;`)</span><br><span class=\"line\">    //                         &#125;</span><br><span class=\"line\">    //                         console.log(`question id：$&#123;i&#125; error occur,$&#123;err.name&#125;,retry......`);</span><br><span class=\"line\">    //                         throw err;</span><br><span class=\"line\">    //                     &#125;</span><br><span class=\"line\">    //                 &#125;</span><br><span class=\"line\">    //             &#125;,&#123;max_tries:10,interval:2000&#125;)</span><br><span class=\"line\">    //         &#125;catch (err)&#123;</span><br><span class=\"line\">    //             console.log(`question id： $&#123;i&#125; retry fail,drop`)</span><br><span class=\"line\">    //         &#125;</span><br><span class=\"line\">    //     &#125;,</span><br><span class=\"line\">    //     &#123;concurrency:50&#125;  /*控制并发数*/</span><br><span class=\"line\">    // )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main().catch(err =&gt; console.log(err))</span><br></pre></td></tr></table></figure></p>\n<p>数据爬出来了，下一步就是将它可视化展示，这里用到了echarts，其实用图表展示可以使用echarts或者d3，d3展示的图类更加丰富，同时难度大于echarts，所以这里用的vue-echarts，用了vue的脚手架来构建，下面会给出github地址。<br>坑：<br>1.vue的脚手架下 使用eslintrc规范，如果不想使用这种规范，可以在config目录下的index.js的useEslint: 设置为false。<br>2.在对数据库中的数据进行聚合已经分类等的时候，我用了mongovue中的aggravate。<br>下面来记录一哈步骤：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //stage 1</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $group: &#123;</span><br><span class=\"line\">                    _id: &apos;$id&apos;,</span><br><span class=\"line\">                    visitCount: &#123;$last: &apos;$visitCount&apos;&#125;,</span><br><span class=\"line\">                    topics: &#123;$last: &apos;$topics&apos;&#125;,</span><br><span class=\"line\">                    answerCount: &#123;$last: &apos;$answerCount&apos;&#125;,</span><br><span class=\"line\">                    created: &#123;$last: &apos;$created&apos;&#125;,</span><br><span class=\"line\">                    updateTime: &#123;$last: &apos;$updateTime&apos;&#125;,</span><br><span class=\"line\">                    commentCount: &#123;$last: &apos;commentCount&apos;&#125;,</span><br><span class=\"line\">                    followerCount: &#123;$last: &apos;followerCount&apos;&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">//stage 2</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $out: &quot;d_questions&quot;</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>选中collections 然后找到aggressive选项 然后把上面这一块paste上去 。它的意思就相当于mysql中的distinct+group by ，再把结果输出在d_questions这个collections里面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">                $group: &#123;</span><br><span class=\"line\">                    _id: &apos;$answerCount&apos;,</span><br><span class=\"line\">                    count:&#123;&quot;$sum&quot;:1&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $out: &quot;t&quot;</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure>\n<p>同理 这一块的意思是 聚合分类  比如评论数为1的个数是5000条 评论数为60 的个数只有1 ，用于后面做词云图等等。<br>这是爬知乎数据做可视化分析的 github地址：<a href=\"https://github.com/zhangjing9898/zhihu-data-view\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangjing9898/zhihu-data-view</a></p>\n"},{"layout":"post","title":"react小记","date":"2018-01-30T16:00:00.000Z","description":"react小记","_content":"\n时隔半年，再次复习一下react\n\n刚刚自己画了个react生命周期图，简版：\n![react生命周期图.png](http://upload-images.jianshu.io/upload_images/3378252-6aac1c077df286c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n顺便画了个react 技术栈的思维导图：\n![react.png](http://upload-images.jianshu.io/upload_images/3378252-5c8b7fa49eb744ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后再提一提web component 这是一个规范 组件主要考虑2点：1.可复用  2.可维护\n","source":"_posts/2018-01-31-react小记.markdown","raw":"---\nlayout: post\ntitle: \"react小记\"\ndate: 2018-01-31\ncategories:\n  - React\ndescription: react小记\n---\n\n时隔半年，再次复习一下react\n\n刚刚自己画了个react生命周期图，简版：\n![react生命周期图.png](http://upload-images.jianshu.io/upload_images/3378252-6aac1c077df286c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n顺便画了个react 技术栈的思维导图：\n![react.png](http://upload-images.jianshu.io/upload_images/3378252-5c8b7fa49eb744ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后再提一提web component 这是一个规范 组件主要考虑2点：1.可复用  2.可维护\n","slug":"2018-01-31-react小记","published":1,"updated":"2019-01-31T07:15:59.706Z","comments":1,"photos":[],"link":"","_id":"cjvayweyu000u5096e18rdh6d","content":"<p>时隔半年，再次复习一下react</p>\n<p>刚刚自己画了个react生命周期图，简版：<br><img src=\"http://upload-images.jianshu.io/upload_images/3378252-6aac1c077df286c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"react生命周期图.png\"></p>\n<p>顺便画了个react 技术栈的思维导图：<br><img src=\"http://upload-images.jianshu.io/upload_images/3378252-5c8b7fa49eb744ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"react.png\"></p>\n<p>最后再提一提web component 这是一个规范 组件主要考虑2点：1.可复用  2.可维护</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时隔半年，再次复习一下react</p>\n<p>刚刚自己画了个react生命周期图，简版：<br><img src=\"http://upload-images.jianshu.io/upload_images/3378252-6aac1c077df286c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"react生命周期图.png\"></p>\n<p>顺便画了个react 技术栈的思维导图：<br><img src=\"http://upload-images.jianshu.io/upload_images/3378252-5c8b7fa49eb744ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"react.png\"></p>\n<p>最后再提一提web component 这是一个规范 组件主要考虑2点：1.可复用  2.可维护</p>\n"},{"layout":"post","title":"websocket","date":"2018-04-14T16:00:00.000Z","description":"websocket知识点","_content":"\n#HTTP无法轻松实现实时应用：\n* HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。\n*  我们可以非常轻松的捕获浏览器上发生的事件（比如用户点击了盒子），这个事件可以轻松产生与服务器的数据交互（比如Ajax）。但是，反过来却是不可能的：服务器端发生了一个事件，服务器无法将这个事件的信息实时主动通知它的客户端。只有在客户端查询服务器的当前状态的时候，所发生事件的信息才会从服务器传递到客户端。\n\n## 但是，确实聊天室确实存在。\n### 方法有2个：\n- 长轮询：客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。\n- 长连接：客户端只请求一次，但是服务器会将连接保持，不会返回结果（想象一下我们没有写res.end()时，浏览器一直转小菊花）。服务器有了新数据，就将数据发回来，又有了新数据，就将数据发回来，而一直保持挂起状态。这种做法的也造成了大量的性能浪费。\n\n###WebSocket协议能够让浏览器和服务器全双工实时通信，互相的，服务器也能主动通知客户端了。\n\n- WebSocket的原理非常的简单：利用HTTP请求产生握手，HTTP头部中含有WebSocket协议的请求，所以握手之后，二者转用TCP协议进行交流（QQ的协议）。现在的浏览器和服务器之间，就是QQ和QQ服务器的关系了。\n\n所以WebSocket协议，需要浏览器支持，更需要服务器支持。\n\n- 支持WebSocket协议的浏览器有：Chrome 4、火狐4、IE10、Safari5\n- 支持WebSocket协议的服务器有：Node 0、Apach7.0.2、Nginx1.3\n\n###Node.js上需要写一些程序，来处理TCP请求。\n- Node.js从诞生之日起，就支持WebSocket协议。不过，从底层一步一步搭建一个Socket服务器很费劲（想象一下Node写一个静态文件服务都那么费劲）。所以，有大神帮我们写了一个库Socket.IO。\n- Socket.IO是业界良心，新手福音。它屏蔽了所有底层细节，让顶层调用非常简单。并且还为不支持WebSocket协议的浏览器，提供了长轮询的透明模拟机制。\n- Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合Socket服务器\n\n###写原生的JS，搭建一个服务器，server创建好之后，创建一个io对象\n\n```\n1var http = require(\"http\");\n2\n3var server = http.createServer(function(req,res){\n4\tres.end(\"你好\");\n5});\n6\n7var io = require('socket.io')(server);\n//监听连接事件\nio.on(\"connection\",function(socket){\n\tconsole.log(\"1个客户端连接了\");\n})\n\n8\nserver.listen(3000,\"127.0.0.1\");\n```\n写完这句话之后，你就会发现，http://127.0.0.1:3000/socket.io/socket.io.js  就是一个js文件的地址了。\n\n现在需要制作一个index页面，这个页面中，必须引用秘密js文件。调用io函数，取得socket对象。\n```\n1<!DOCTYPE html>\n2<html lang=\"en\">\n3<head>\n4\t<meta charset=\"UTF-8\">\n5\t<title>Document</title>\n6</head>\n7<body>\n8\t<h1>我是index页面，我引用了秘密script文件</h1>\n9\t<script type=\"text/javascript\" src=\"/socket.io/socket.io.js\"></script>\n10\t<script type=\"text/javascript\">\n11\t\tvar socket = io();\n12\t</script>\n13</body>\n</html>\n```\n此时，在服务器上，app.js中就要书写静态文件呈递程序，能够呈递静态页面。\n```\n1var server = http.createServer(function(req,res){\n2\tif(req.url == \"/\"){\n3\t\t//显示首页\n4\t\tfs.readFile(\"./index.html\",function(err,data){\n5\t\t\tres.end(data);\n6\t\t});\n7\t}\n});\n```\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-1c511eb8e3bf7898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####至此，服务器和客户端都有socket对象了。服务器的socket对象：\n\n服务器端:\n```\n1var io = require('socket.io')(server);\n2//监听连接事件\n3io.on(\"connection\",function(socket){\n4\tconsole.log(\"1个客户端连接了\");\n5\tsocket.on(\"tiwen\",function(msg){\n6\t\tconsole.log(\"本服务器得到了一个提问\" + msg);\n7\t\tsocket.emit(\"huida\",\"吃了\");\n8\t});\n});\n```\n每一个连接上来的用户，都有一个socket。 由于我们的emit语句，是socket.emit()发出的，所以指的是向这个客户端发出语句。\n\n广播，就是给所有当前连接的用户发送信息：\n\n\n```\n1//创建一个io对象 \n2var io = require('socket.io')(server);\n3//监听连接事件\n4io.on(\"connection\",function(socket){\n5\tconsole.log(\"1个客户端连接了\");\n6\tsocket.on(\"tiwen\",function(msg){\n7\t\tconsole.log(\"本服务器得到了一个提问\" + msg);\n8\t\tio.emit(\"huida\",\"吃了\");\n9\t});\n});\n```\n","source":"_posts/2018-04-15-websocket.markdown","raw":"---\nlayout: post\ntitle: \"websocket\"\ndate: 2018-04-15\ncategories:\n  - websocket\ndescription: websocket知识点\n---\n\n#HTTP无法轻松实现实时应用：\n* HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。\n*  我们可以非常轻松的捕获浏览器上发生的事件（比如用户点击了盒子），这个事件可以轻松产生与服务器的数据交互（比如Ajax）。但是，反过来却是不可能的：服务器端发生了一个事件，服务器无法将这个事件的信息实时主动通知它的客户端。只有在客户端查询服务器的当前状态的时候，所发生事件的信息才会从服务器传递到客户端。\n\n## 但是，确实聊天室确实存在。\n### 方法有2个：\n- 长轮询：客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。\n- 长连接：客户端只请求一次，但是服务器会将连接保持，不会返回结果（想象一下我们没有写res.end()时，浏览器一直转小菊花）。服务器有了新数据，就将数据发回来，又有了新数据，就将数据发回来，而一直保持挂起状态。这种做法的也造成了大量的性能浪费。\n\n###WebSocket协议能够让浏览器和服务器全双工实时通信，互相的，服务器也能主动通知客户端了。\n\n- WebSocket的原理非常的简单：利用HTTP请求产生握手，HTTP头部中含有WebSocket协议的请求，所以握手之后，二者转用TCP协议进行交流（QQ的协议）。现在的浏览器和服务器之间，就是QQ和QQ服务器的关系了。\n\n所以WebSocket协议，需要浏览器支持，更需要服务器支持。\n\n- 支持WebSocket协议的浏览器有：Chrome 4、火狐4、IE10、Safari5\n- 支持WebSocket协议的服务器有：Node 0、Apach7.0.2、Nginx1.3\n\n###Node.js上需要写一些程序，来处理TCP请求。\n- Node.js从诞生之日起，就支持WebSocket协议。不过，从底层一步一步搭建一个Socket服务器很费劲（想象一下Node写一个静态文件服务都那么费劲）。所以，有大神帮我们写了一个库Socket.IO。\n- Socket.IO是业界良心，新手福音。它屏蔽了所有底层细节，让顶层调用非常简单。并且还为不支持WebSocket协议的浏览器，提供了长轮询的透明模拟机制。\n- Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合Socket服务器\n\n###写原生的JS，搭建一个服务器，server创建好之后，创建一个io对象\n\n```\n1var http = require(\"http\");\n2\n3var server = http.createServer(function(req,res){\n4\tres.end(\"你好\");\n5});\n6\n7var io = require('socket.io')(server);\n//监听连接事件\nio.on(\"connection\",function(socket){\n\tconsole.log(\"1个客户端连接了\");\n})\n\n8\nserver.listen(3000,\"127.0.0.1\");\n```\n写完这句话之后，你就会发现，http://127.0.0.1:3000/socket.io/socket.io.js  就是一个js文件的地址了。\n\n现在需要制作一个index页面，这个页面中，必须引用秘密js文件。调用io函数，取得socket对象。\n```\n1<!DOCTYPE html>\n2<html lang=\"en\">\n3<head>\n4\t<meta charset=\"UTF-8\">\n5\t<title>Document</title>\n6</head>\n7<body>\n8\t<h1>我是index页面，我引用了秘密script文件</h1>\n9\t<script type=\"text/javascript\" src=\"/socket.io/socket.io.js\"></script>\n10\t<script type=\"text/javascript\">\n11\t\tvar socket = io();\n12\t</script>\n13</body>\n</html>\n```\n此时，在服务器上，app.js中就要书写静态文件呈递程序，能够呈递静态页面。\n```\n1var server = http.createServer(function(req,res){\n2\tif(req.url == \"/\"){\n3\t\t//显示首页\n4\t\tfs.readFile(\"./index.html\",function(err,data){\n5\t\t\tres.end(data);\n6\t\t});\n7\t}\n});\n```\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-1c511eb8e3bf7898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####至此，服务器和客户端都有socket对象了。服务器的socket对象：\n\n服务器端:\n```\n1var io = require('socket.io')(server);\n2//监听连接事件\n3io.on(\"connection\",function(socket){\n4\tconsole.log(\"1个客户端连接了\");\n5\tsocket.on(\"tiwen\",function(msg){\n6\t\tconsole.log(\"本服务器得到了一个提问\" + msg);\n7\t\tsocket.emit(\"huida\",\"吃了\");\n8\t});\n});\n```\n每一个连接上来的用户，都有一个socket。 由于我们的emit语句，是socket.emit()发出的，所以指的是向这个客户端发出语句。\n\n广播，就是给所有当前连接的用户发送信息：\n\n\n```\n1//创建一个io对象 \n2var io = require('socket.io')(server);\n3//监听连接事件\n4io.on(\"connection\",function(socket){\n5\tconsole.log(\"1个客户端连接了\");\n6\tsocket.on(\"tiwen\",function(msg){\n7\t\tconsole.log(\"本服务器得到了一个提问\" + msg);\n8\t\tio.emit(\"huida\",\"吃了\");\n9\t});\n});\n```\n","slug":"2018-04-15-websocket","published":1,"updated":"2019-01-31T07:15:59.707Z","comments":1,"photos":[],"link":"","_id":"cjvayweyz000v5096zwf3kwi5","content":"<p>#HTTP无法轻松实现实时应用：</p>\n<ul>\n<li>HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。</li>\n<li>我们可以非常轻松的捕获浏览器上发生的事件（比如用户点击了盒子），这个事件可以轻松产生与服务器的数据交互（比如Ajax）。但是，反过来却是不可能的：服务器端发生了一个事件，服务器无法将这个事件的信息实时主动通知它的客户端。只有在客户端查询服务器的当前状态的时候，所发生事件的信息才会从服务器传递到客户端。</li>\n</ul>\n<h2 id=\"但是，确实聊天室确实存在。\"><a href=\"#但是，确实聊天室确实存在。\" class=\"headerlink\" title=\"但是，确实聊天室确实存在。\"></a>但是，确实聊天室确实存在。</h2><h3 id=\"方法有2个：\"><a href=\"#方法有2个：\" class=\"headerlink\" title=\"方法有2个：\"></a>方法有2个：</h3><ul>\n<li>长轮询：客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。</li>\n<li>长连接：客户端只请求一次，但是服务器会将连接保持，不会返回结果（想象一下我们没有写res.end()时，浏览器一直转小菊花）。服务器有了新数据，就将数据发回来，又有了新数据，就将数据发回来，而一直保持挂起状态。这种做法的也造成了大量的性能浪费。</li>\n</ul>\n<p>###WebSocket协议能够让浏览器和服务器全双工实时通信，互相的，服务器也能主动通知客户端了。</p>\n<ul>\n<li>WebSocket的原理非常的简单：利用HTTP请求产生握手，HTTP头部中含有WebSocket协议的请求，所以握手之后，二者转用TCP协议进行交流（QQ的协议）。现在的浏览器和服务器之间，就是QQ和QQ服务器的关系了。</li>\n</ul>\n<p>所以WebSocket协议，需要浏览器支持，更需要服务器支持。</p>\n<ul>\n<li>支持WebSocket协议的浏览器有：Chrome 4、火狐4、IE10、Safari5</li>\n<li>支持WebSocket协议的服务器有：Node 0、Apach7.0.2、Nginx1.3</li>\n</ul>\n<p>###Node.js上需要写一些程序，来处理TCP请求。</p>\n<ul>\n<li>Node.js从诞生之日起，就支持WebSocket协议。不过，从底层一步一步搭建一个Socket服务器很费劲（想象一下Node写一个静态文件服务都那么费劲）。所以，有大神帮我们写了一个库Socket.IO。</li>\n<li>Socket.IO是业界良心，新手福音。它屏蔽了所有底层细节，让顶层调用非常简单。并且还为不支持WebSocket协议的浏览器，提供了长轮询的透明模拟机制。</li>\n<li>Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合Socket服务器</li>\n</ul>\n<p>###写原生的JS，搭建一个服务器，server创建好之后，创建一个io对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1var http = require(&quot;http&quot;);</span><br><span class=\"line\">2</span><br><span class=\"line\">3var server = http.createServer(function(req,res)&#123;</span><br><span class=\"line\">4\tres.end(&quot;你好&quot;);</span><br><span class=\"line\">5&#125;);</span><br><span class=\"line\">6</span><br><span class=\"line\">7var io = require(&apos;socket.io&apos;)(server);</span><br><span class=\"line\">//监听连接事件</span><br><span class=\"line\">io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class=\"line\">\tconsole.log(&quot;1个客户端连接了&quot;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">8</span><br><span class=\"line\">server.listen(3000,&quot;127.0.0.1&quot;);</span><br></pre></td></tr></table></figure>\n<p>写完这句话之后，你就会发现，<a href=\"http://127.0.0.1:3000/socket.io/socket.io.js\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/socket.io/socket.io.js</a>  就是一个js文件的地址了。</p>\n<p>现在需要制作一个index页面，这个页面中，必须引用秘密js文件。调用io函数，取得socket对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">2&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">3&lt;head&gt;</span><br><span class=\"line\">4\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">5\t&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">6&lt;/head&gt;</span><br><span class=\"line\">7&lt;body&gt;</span><br><span class=\"line\">8\t&lt;h1&gt;我是index页面，我引用了秘密script文件&lt;/h1&gt;</span><br><span class=\"line\">9\t&lt;script type=&quot;text/javascript&quot; src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">10\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">11\t\tvar socket = io();</span><br><span class=\"line\">12\t&lt;/script&gt;</span><br><span class=\"line\">13&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>此时，在服务器上，app.js中就要书写静态文件呈递程序，能够呈递静态页面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1var server = http.createServer(function(req,res)&#123;</span><br><span class=\"line\">2\tif(req.url == &quot;/&quot;)&#123;</span><br><span class=\"line\">3\t\t//显示首页</span><br><span class=\"line\">4\t\tfs.readFile(&quot;./index.html&quot;,function(err,data)&#123;</span><br><span class=\"line\">5\t\t\tres.end(data);</span><br><span class=\"line\">6\t\t&#125;);</span><br><span class=\"line\">7\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-1c511eb8e3bf7898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>####至此，服务器和客户端都有socket对象了。服务器的socket对象：</p>\n<p>服务器端:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1var io = require(&apos;socket.io&apos;)(server);</span><br><span class=\"line\">2//监听连接事件</span><br><span class=\"line\">3io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class=\"line\">4\tconsole.log(&quot;1个客户端连接了&quot;);</span><br><span class=\"line\">5\tsocket.on(&quot;tiwen&quot;,function(msg)&#123;</span><br><span class=\"line\">6\t\tconsole.log(&quot;本服务器得到了一个提问&quot; + msg);</span><br><span class=\"line\">7\t\tsocket.emit(&quot;huida&quot;,&quot;吃了&quot;);</span><br><span class=\"line\">8\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>每一个连接上来的用户，都有一个socket。 由于我们的emit语句，是socket.emit()发出的，所以指的是向这个客户端发出语句。</p>\n<p>广播，就是给所有当前连接的用户发送信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1//创建一个io对象 </span><br><span class=\"line\">2var io = require(&apos;socket.io&apos;)(server);</span><br><span class=\"line\">3//监听连接事件</span><br><span class=\"line\">4io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class=\"line\">5\tconsole.log(&quot;1个客户端连接了&quot;);</span><br><span class=\"line\">6\tsocket.on(&quot;tiwen&quot;,function(msg)&#123;</span><br><span class=\"line\">7\t\tconsole.log(&quot;本服务器得到了一个提问&quot; + msg);</span><br><span class=\"line\">8\t\tio.emit(&quot;huida&quot;,&quot;吃了&quot;);</span><br><span class=\"line\">9\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>#HTTP无法轻松实现实时应用：</p>\n<ul>\n<li>HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。</li>\n<li>我们可以非常轻松的捕获浏览器上发生的事件（比如用户点击了盒子），这个事件可以轻松产生与服务器的数据交互（比如Ajax）。但是，反过来却是不可能的：服务器端发生了一个事件，服务器无法将这个事件的信息实时主动通知它的客户端。只有在客户端查询服务器的当前状态的时候，所发生事件的信息才会从服务器传递到客户端。</li>\n</ul>\n<h2 id=\"但是，确实聊天室确实存在。\"><a href=\"#但是，确实聊天室确实存在。\" class=\"headerlink\" title=\"但是，确实聊天室确实存在。\"></a>但是，确实聊天室确实存在。</h2><h3 id=\"方法有2个：\"><a href=\"#方法有2个：\" class=\"headerlink\" title=\"方法有2个：\"></a>方法有2个：</h3><ul>\n<li>长轮询：客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。</li>\n<li>长连接：客户端只请求一次，但是服务器会将连接保持，不会返回结果（想象一下我们没有写res.end()时，浏览器一直转小菊花）。服务器有了新数据，就将数据发回来，又有了新数据，就将数据发回来，而一直保持挂起状态。这种做法的也造成了大量的性能浪费。</li>\n</ul>\n<p>###WebSocket协议能够让浏览器和服务器全双工实时通信，互相的，服务器也能主动通知客户端了。</p>\n<ul>\n<li>WebSocket的原理非常的简单：利用HTTP请求产生握手，HTTP头部中含有WebSocket协议的请求，所以握手之后，二者转用TCP协议进行交流（QQ的协议）。现在的浏览器和服务器之间，就是QQ和QQ服务器的关系了。</li>\n</ul>\n<p>所以WebSocket协议，需要浏览器支持，更需要服务器支持。</p>\n<ul>\n<li>支持WebSocket协议的浏览器有：Chrome 4、火狐4、IE10、Safari5</li>\n<li>支持WebSocket协议的服务器有：Node 0、Apach7.0.2、Nginx1.3</li>\n</ul>\n<p>###Node.js上需要写一些程序，来处理TCP请求。</p>\n<ul>\n<li>Node.js从诞生之日起，就支持WebSocket协议。不过，从底层一步一步搭建一个Socket服务器很费劲（想象一下Node写一个静态文件服务都那么费劲）。所以，有大神帮我们写了一个库Socket.IO。</li>\n<li>Socket.IO是业界良心，新手福音。它屏蔽了所有底层细节，让顶层调用非常简单。并且还为不支持WebSocket协议的浏览器，提供了长轮询的透明模拟机制。</li>\n<li>Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合Socket服务器</li>\n</ul>\n<p>###写原生的JS，搭建一个服务器，server创建好之后，创建一个io对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1var http = require(&quot;http&quot;);</span><br><span class=\"line\">2</span><br><span class=\"line\">3var server = http.createServer(function(req,res)&#123;</span><br><span class=\"line\">4\tres.end(&quot;你好&quot;);</span><br><span class=\"line\">5&#125;);</span><br><span class=\"line\">6</span><br><span class=\"line\">7var io = require(&apos;socket.io&apos;)(server);</span><br><span class=\"line\">//监听连接事件</span><br><span class=\"line\">io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class=\"line\">\tconsole.log(&quot;1个客户端连接了&quot;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">8</span><br><span class=\"line\">server.listen(3000,&quot;127.0.0.1&quot;);</span><br></pre></td></tr></table></figure>\n<p>写完这句话之后，你就会发现，<a href=\"http://127.0.0.1:3000/socket.io/socket.io.js\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/socket.io/socket.io.js</a>  就是一个js文件的地址了。</p>\n<p>现在需要制作一个index页面，这个页面中，必须引用秘密js文件。调用io函数，取得socket对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">2&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">3&lt;head&gt;</span><br><span class=\"line\">4\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">5\t&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">6&lt;/head&gt;</span><br><span class=\"line\">7&lt;body&gt;</span><br><span class=\"line\">8\t&lt;h1&gt;我是index页面，我引用了秘密script文件&lt;/h1&gt;</span><br><span class=\"line\">9\t&lt;script type=&quot;text/javascript&quot; src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">10\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">11\t\tvar socket = io();</span><br><span class=\"line\">12\t&lt;/script&gt;</span><br><span class=\"line\">13&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>此时，在服务器上，app.js中就要书写静态文件呈递程序，能够呈递静态页面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1var server = http.createServer(function(req,res)&#123;</span><br><span class=\"line\">2\tif(req.url == &quot;/&quot;)&#123;</span><br><span class=\"line\">3\t\t//显示首页</span><br><span class=\"line\">4\t\tfs.readFile(&quot;./index.html&quot;,function(err,data)&#123;</span><br><span class=\"line\">5\t\t\tres.end(data);</span><br><span class=\"line\">6\t\t&#125;);</span><br><span class=\"line\">7\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-1c511eb8e3bf7898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>####至此，服务器和客户端都有socket对象了。服务器的socket对象：</p>\n<p>服务器端:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1var io = require(&apos;socket.io&apos;)(server);</span><br><span class=\"line\">2//监听连接事件</span><br><span class=\"line\">3io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class=\"line\">4\tconsole.log(&quot;1个客户端连接了&quot;);</span><br><span class=\"line\">5\tsocket.on(&quot;tiwen&quot;,function(msg)&#123;</span><br><span class=\"line\">6\t\tconsole.log(&quot;本服务器得到了一个提问&quot; + msg);</span><br><span class=\"line\">7\t\tsocket.emit(&quot;huida&quot;,&quot;吃了&quot;);</span><br><span class=\"line\">8\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>每一个连接上来的用户，都有一个socket。 由于我们的emit语句，是socket.emit()发出的，所以指的是向这个客户端发出语句。</p>\n<p>广播，就是给所有当前连接的用户发送信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1//创建一个io对象 </span><br><span class=\"line\">2var io = require(&apos;socket.io&apos;)(server);</span><br><span class=\"line\">3//监听连接事件</span><br><span class=\"line\">4io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class=\"line\">5\tconsole.log(&quot;1个客户端连接了&quot;);</span><br><span class=\"line\">6\tsocket.on(&quot;tiwen&quot;,function(msg)&#123;</span><br><span class=\"line\">7\t\tconsole.log(&quot;本服务器得到了一个提问&quot; + msg);</span><br><span class=\"line\">8\t\tio.emit(&quot;huida&quot;,&quot;吃了&quot;);</span><br><span class=\"line\">9\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"js基础点","date":"2018-04-16T16:00:00.000Z","description":"介绍js的基本数据类型","_content":"介绍js的基本数据类型﻿\n\n﻿Undefined、Null、Boolean、Number、String、 ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )\n\n如何将字符串转化为数字，例如'12.3b'?﻿\n\nparseFloat('12.3b');\n\nJavascript作用链域?﻿\n\n﻿全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。﻿\n\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链\n","source":"_posts/2018-04-17-js基础点.markdown","raw":"---\nlayout: post\ntitle: \"js基础点\"\ndate: 2018-04-17\ncategories:\n  - JavaScript\ndescription: 介绍js的基本数据类型\n---\n介绍js的基本数据类型﻿\n\n﻿Undefined、Null、Boolean、Number、String、 ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )\n\n如何将字符串转化为数字，例如'12.3b'?﻿\n\nparseFloat('12.3b');\n\nJavascript作用链域?﻿\n\n﻿全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。﻿\n\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链\n","slug":"2018-04-17-js基础点","published":1,"updated":"2019-01-31T07:15:59.707Z","comments":1,"photos":[],"link":"","_id":"cjvaywez3000x5096er5muvh0","content":"<p>介绍js的基本数据类型﻿</p>\n<p>﻿Undefined、Null、Boolean、Number、String、 ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )</p>\n<p>如何将字符串转化为数字，例如’12.3b’?﻿</p>\n<p>parseFloat(‘12.3b’);</p>\n<p>Javascript作用链域?﻿</p>\n<p>﻿全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。﻿</p>\n<p>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链</p>\n","site":{"data":{}},"excerpt":"","more":"<p>介绍js的基本数据类型﻿</p>\n<p>﻿Undefined、Null、Boolean、Number、String、 ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )</p>\n<p>如何将字符串转化为数字，例如’12.3b’?﻿</p>\n<p>parseFloat(‘12.3b’);</p>\n<p>Javascript作用链域?﻿</p>\n<p>﻿全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。﻿</p>\n<p>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链</p>\n"},{"layout":"post","title":"iframe浅谈","date":"2018-04-18T16:00:00.000Z","description":"关于iframe","_content":"\n关于iframe\n\n下面是W3School对<iframe>的定义：\niframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n不过按我的理解就是：iframe提供了一个简单的方式吧一个网站的内容嵌入到另一个网站中。\n\n那iframe一般用在什么方面呢？\n\n目前用得最多的是管理后台类网站，左边一个菜单list，右边就是iframe的tabs,可以随时打开、关闭页面。在这种系统中，如果把iframe替换成div，那么大量页面中相同类型的表格、表单等就要用不同的id、class。因为js是针对body下的所有对象的，所以这种系统用iframe比较好。可以在iframe里面自由使用js和标签id的定义，而且父页面和菜单列表一般不会刷新，所以iframe带来的内容也就和一般页面的刷新一样。\n\n如果我们需要独立的浏览上下文，那就用iframe，否则不用。\n\niframe常被用于复用部分界面，比较早期的网站使用 iframe，主要是用于导航栏（navigator）。为什么？\n因为一个网站很多页面的导航栏部分是相同的，在避免切换页面的时候重复下载，将导航栏和正文分开在 iframe 中，是一个方便的做法。同时带来的不利是，默认情况下，使用了 iframe 的网站的 URL 不会随着页面的变化而变化。这就意味着一旦刷新，网站可能又回到首页。\n\n那么现在什么时候会用到 iframe 呢？\n因为 iframe 的页面和父页面（parent）是分开的，所以它意味着，这是一个独立的区域，不受 parent 的 CSS 或者全局的 JavaScript 的影响。典型的，比如所见即所得的网页编辑器（WYSIWYG Online HTML Editor），因为它们需要 reset 自己的 CSS 到自己的标准，而不被 parent CSS 的 override。\n\n使用 iframe 是不是一个好的用法（good practice），不能一概而论，但是可以肯定是，现在的大部分网站避免采用这种方式的。\n\niframe的优点\n\n隔离上下文，便于更改，模块分离\niframe的缺点\n\niframe会阻塞主页面的Onload事件\n搜索引擎的检索程序无法解读这种页面，不利于SEO\niframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载\n使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题\n","source":"_posts/2018-04-19-iframe浅谈.markdown","raw":"---\nlayout: post\ntitle: \"iframe浅谈\"\ndate: 2018-04-19\ncategories:\n  - HTML5\ndescription: 关于iframe\n---\n\n关于iframe\n\n下面是W3School对<iframe>的定义：\niframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n不过按我的理解就是：iframe提供了一个简单的方式吧一个网站的内容嵌入到另一个网站中。\n\n那iframe一般用在什么方面呢？\n\n目前用得最多的是管理后台类网站，左边一个菜单list，右边就是iframe的tabs,可以随时打开、关闭页面。在这种系统中，如果把iframe替换成div，那么大量页面中相同类型的表格、表单等就要用不同的id、class。因为js是针对body下的所有对象的，所以这种系统用iframe比较好。可以在iframe里面自由使用js和标签id的定义，而且父页面和菜单列表一般不会刷新，所以iframe带来的内容也就和一般页面的刷新一样。\n\n如果我们需要独立的浏览上下文，那就用iframe，否则不用。\n\niframe常被用于复用部分界面，比较早期的网站使用 iframe，主要是用于导航栏（navigator）。为什么？\n因为一个网站很多页面的导航栏部分是相同的，在避免切换页面的时候重复下载，将导航栏和正文分开在 iframe 中，是一个方便的做法。同时带来的不利是，默认情况下，使用了 iframe 的网站的 URL 不会随着页面的变化而变化。这就意味着一旦刷新，网站可能又回到首页。\n\n那么现在什么时候会用到 iframe 呢？\n因为 iframe 的页面和父页面（parent）是分开的，所以它意味着，这是一个独立的区域，不受 parent 的 CSS 或者全局的 JavaScript 的影响。典型的，比如所见即所得的网页编辑器（WYSIWYG Online HTML Editor），因为它们需要 reset 自己的 CSS 到自己的标准，而不被 parent CSS 的 override。\n\n使用 iframe 是不是一个好的用法（good practice），不能一概而论，但是可以肯定是，现在的大部分网站避免采用这种方式的。\n\niframe的优点\n\n隔离上下文，便于更改，模块分离\niframe的缺点\n\niframe会阻塞主页面的Onload事件\n搜索引擎的检索程序无法解读这种页面，不利于SEO\niframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载\n使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题\n","slug":"2018-04-19-iframe浅谈","published":1,"updated":"2019-01-31T07:15:59.708Z","comments":1,"photos":[],"link":"","_id":"cjvaywez7000z5096qrngq4cd","content":"<p>关于iframe</p>\n<p>下面是W3School对<iframe>的定义：<br>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。<br>不过按我的理解就是：iframe提供了一个简单的方式吧一个网站的内容嵌入到另一个网站中。</iframe></p>\n<p>那iframe一般用在什么方面呢？</p>\n<p>目前用得最多的是管理后台类网站，左边一个菜单list，右边就是iframe的tabs,可以随时打开、关闭页面。在这种系统中，如果把iframe替换成div，那么大量页面中相同类型的表格、表单等就要用不同的id、class。因为js是针对body下的所有对象的，所以这种系统用iframe比较好。可以在iframe里面自由使用js和标签id的定义，而且父页面和菜单列表一般不会刷新，所以iframe带来的内容也就和一般页面的刷新一样。</p>\n<p>如果我们需要独立的浏览上下文，那就用iframe，否则不用。</p>\n<p>iframe常被用于复用部分界面，比较早期的网站使用 iframe，主要是用于导航栏（navigator）。为什么？<br>因为一个网站很多页面的导航栏部分是相同的，在避免切换页面的时候重复下载，将导航栏和正文分开在 iframe 中，是一个方便的做法。同时带来的不利是，默认情况下，使用了 iframe 的网站的 URL 不会随着页面的变化而变化。这就意味着一旦刷新，网站可能又回到首页。</p>\n<p>那么现在什么时候会用到 iframe 呢？<br>因为 iframe 的页面和父页面（parent）是分开的，所以它意味着，这是一个独立的区域，不受 parent 的 CSS 或者全局的 JavaScript 的影响。典型的，比如所见即所得的网页编辑器（WYSIWYG Online HTML Editor），因为它们需要 reset 自己的 CSS 到自己的标准，而不被 parent CSS 的 override。</p>\n<p>使用 iframe 是不是一个好的用法（good practice），不能一概而论，但是可以肯定是，现在的大部分网站避免采用这种方式的。</p>\n<p>iframe的优点</p>\n<p>隔离上下文，便于更改，模块分离<br>iframe的缺点</p>\n<p>iframe会阻塞主页面的Onload事件<br>搜索引擎的检索程序无法解读这种页面，不利于SEO<br>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载<br>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于iframe</p>\n<p>下面是W3School对<iframe>的定义：<br>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。<br>不过按我的理解就是：iframe提供了一个简单的方式吧一个网站的内容嵌入到另一个网站中。</iframe></p>\n<p>那iframe一般用在什么方面呢？</p>\n<p>目前用得最多的是管理后台类网站，左边一个菜单list，右边就是iframe的tabs,可以随时打开、关闭页面。在这种系统中，如果把iframe替换成div，那么大量页面中相同类型的表格、表单等就要用不同的id、class。因为js是针对body下的所有对象的，所以这种系统用iframe比较好。可以在iframe里面自由使用js和标签id的定义，而且父页面和菜单列表一般不会刷新，所以iframe带来的内容也就和一般页面的刷新一样。</p>\n<p>如果我们需要独立的浏览上下文，那就用iframe，否则不用。</p>\n<p>iframe常被用于复用部分界面，比较早期的网站使用 iframe，主要是用于导航栏（navigator）。为什么？<br>因为一个网站很多页面的导航栏部分是相同的，在避免切换页面的时候重复下载，将导航栏和正文分开在 iframe 中，是一个方便的做法。同时带来的不利是，默认情况下，使用了 iframe 的网站的 URL 不会随着页面的变化而变化。这就意味着一旦刷新，网站可能又回到首页。</p>\n<p>那么现在什么时候会用到 iframe 呢？<br>因为 iframe 的页面和父页面（parent）是分开的，所以它意味着，这是一个独立的区域，不受 parent 的 CSS 或者全局的 JavaScript 的影响。典型的，比如所见即所得的网页编辑器（WYSIWYG Online HTML Editor），因为它们需要 reset 自己的 CSS 到自己的标准，而不被 parent CSS 的 override。</p>\n<p>使用 iframe 是不是一个好的用法（good practice），不能一概而论，但是可以肯定是，现在的大部分网站避免采用这种方式的。</p>\n<p>iframe的优点</p>\n<p>隔离上下文，便于更改，模块分离<br>iframe的缺点</p>\n<p>iframe会阻塞主页面的Onload事件<br>搜索引擎的检索程序无法解读这种页面，不利于SEO<br>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载<br>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题</p>\n"},{"layout":"post","title":"面试题总结","date":"2018-04-19T16:00:00.000Z","description":"HTTP web综合问题","_content":"\nHTTP web综合问题\n\n1.Html5语义化理解\n\n用正确的标签做正确的事\nhtml语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析\n在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强\n让阅读源代码的人 更容易将网站分块 便于阅读维护理解\n2.HTML5为什么只需要写<!DOCTYPE HTML>？\n\nhtml5 不需要对DTD（document type definition）进行引用，但是需要doctype来规范浏览器行为\nCSS部分\n\n1.css优先级\n\n载入样式以最后载入的定位为准\n\n优先级为:!important>行内>id>class>tag>通配符>继承>默认\n\nhttps://blog.csdn.net/qq_28300493/article/details/52297165\n\n说说你对AMD和Commonjs的理解\n\nCommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数\n\nAMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的\n\n用过哪些设计模式？\n\n工厂模式\n工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法\n主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字\n构造函数模式\n使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于\n直接将属性和方法赋值给 this对象;\nlength的巧妙用法\n\n                        var arr1=arr2=[1,2,3];\n            //清空数组\n            arr1.length=0;\n            console.log(arr1,arr2);\n            //output '' ''\n            //截断array\n            arr1.length=1;\n            console.log(arr1,arr2);\n            //output [1]\n合并数组的巧妙方法\n\n//普通方法 concat\narr1=[1,2,3]\n[1, 2, 3]\narr2=[4,5,6]\n[4, 5, 6]\narr1.concat(arr2)\n[1, 2, 3, 4, 5, 6]\n//用push\nlet arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [6, 7, 8, 9, 10];\n\nArray.prototype.push.apply(arr1, arr2);\n判断是否为数组\n\n//在es5中\nisArray方法 Boolean\n//其他方法\narray.prototype.toString==\"object array\"\n","source":"_posts/2018-04-20-面试题总结.markdown","raw":"---\nlayout: post\ntitle: \"面试题总结\"\ndate: 2018-04-20\ncategories:\n  - 前端面试\ndescription: HTTP web综合问题\n---\n\nHTTP web综合问题\n\n1.Html5语义化理解\n\n用正确的标签做正确的事\nhtml语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析\n在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强\n让阅读源代码的人 更容易将网站分块 便于阅读维护理解\n2.HTML5为什么只需要写<!DOCTYPE HTML>？\n\nhtml5 不需要对DTD（document type definition）进行引用，但是需要doctype来规范浏览器行为\nCSS部分\n\n1.css优先级\n\n载入样式以最后载入的定位为准\n\n优先级为:!important>行内>id>class>tag>通配符>继承>默认\n\nhttps://blog.csdn.net/qq_28300493/article/details/52297165\n\n说说你对AMD和Commonjs的理解\n\nCommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数\n\nAMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的\n\n用过哪些设计模式？\n\n工厂模式\n工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法\n主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字\n构造函数模式\n使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于\n直接将属性和方法赋值给 this对象;\nlength的巧妙用法\n\n                        var arr1=arr2=[1,2,3];\n            //清空数组\n            arr1.length=0;\n            console.log(arr1,arr2);\n            //output '' ''\n            //截断array\n            arr1.length=1;\n            console.log(arr1,arr2);\n            //output [1]\n合并数组的巧妙方法\n\n//普通方法 concat\narr1=[1,2,3]\n[1, 2, 3]\narr2=[4,5,6]\n[4, 5, 6]\narr1.concat(arr2)\n[1, 2, 3, 4, 5, 6]\n//用push\nlet arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [6, 7, 8, 9, 10];\n\nArray.prototype.push.apply(arr1, arr2);\n判断是否为数组\n\n//在es5中\nisArray方法 Boolean\n//其他方法\narray.prototype.toString==\"object array\"\n","slug":"2018-04-20-面试题总结","published":1,"updated":"2019-01-31T07:15:59.708Z","comments":1,"photos":[],"link":"","_id":"cjvaywez900125096ar6ao6i2","content":"<p>HTTP web综合问题</p>\n<p>1.Html5语义化理解</p>\n<p>用正确的标签做正确的事<br>html语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析<br>在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强<br>让阅读源代码的人 更容易将网站分块 便于阅读维护理解<br>2.HTML5为什么只需要写&lt;!DOCTYPE HTML&gt;？</p>\n<p>html5 不需要对DTD（document type definition）进行引用，但是需要doctype来规范浏览器行为<br>CSS部分</p>\n<p>1.css优先级</p>\n<p>载入样式以最后载入的定位为准</p>\n<p>优先级为:!important&gt;行内&gt;id&gt;class&gt;tag&gt;通配符&gt;继承&gt;默认</p>\n<p><a href=\"https://blog.csdn.net/qq_28300493/article/details/52297165\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_28300493/article/details/52297165</a></p>\n<p>说说你对AMD和Commonjs的理解</p>\n<p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数</p>\n<p>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的</p>\n<p>用过哪些设计模式？</p>\n<p>工厂模式<br>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法<br>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字<br>构造函数模式<br>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于<br>直接将属性和方法赋值给 this对象;<br>length的巧妙用法</p>\n<pre><code>            var arr1=arr2=[1,2,3];\n//清空数组\narr1.length=0;\nconsole.log(arr1,arr2);\n//output &apos;&apos; &apos;&apos;\n//截断array\narr1.length=1;\nconsole.log(arr1,arr2);\n//output [1]\n</code></pre><p>合并数组的巧妙方法</p>\n<p>//普通方法 concat<br>arr1=[1,2,3]<br>[1, 2, 3]<br>arr2=[4,5,6]<br>[4, 5, 6]<br>arr1.concat(arr2)<br>[1, 2, 3, 4, 5, 6]<br>//用push<br>let arr1 = [1, 2, 3, 4, 5];<br>let arr2 = [6, 7, 8, 9, 10];</p>\n<p>Array.prototype.push.apply(arr1, arr2);<br>判断是否为数组</p>\n<p>//在es5中<br>isArray方法 Boolean<br>//其他方法<br>array.prototype.toString==”object array”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP web综合问题</p>\n<p>1.Html5语义化理解</p>\n<p>用正确的标签做正确的事<br>html语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析<br>在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强<br>让阅读源代码的人 更容易将网站分块 便于阅读维护理解<br>2.HTML5为什么只需要写&lt;!DOCTYPE HTML&gt;？</p>\n<p>html5 不需要对DTD（document type definition）进行引用，但是需要doctype来规范浏览器行为<br>CSS部分</p>\n<p>1.css优先级</p>\n<p>载入样式以最后载入的定位为准</p>\n<p>优先级为:!important&gt;行内&gt;id&gt;class&gt;tag&gt;通配符&gt;继承&gt;默认</p>\n<p><a href=\"https://blog.csdn.net/qq_28300493/article/details/52297165\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_28300493/article/details/52297165</a></p>\n<p>说说你对AMD和Commonjs的理解</p>\n<p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数</p>\n<p>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的</p>\n<p>用过哪些设计模式？</p>\n<p>工厂模式<br>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法<br>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字<br>构造函数模式<br>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于<br>直接将属性和方法赋值给 this对象;<br>length的巧妙用法</p>\n<pre><code>            var arr1=arr2=[1,2,3];\n//清空数组\narr1.length=0;\nconsole.log(arr1,arr2);\n//output &apos;&apos; &apos;&apos;\n//截断array\narr1.length=1;\nconsole.log(arr1,arr2);\n//output [1]\n</code></pre><p>合并数组的巧妙方法</p>\n<p>//普通方法 concat<br>arr1=[1,2,3]<br>[1, 2, 3]<br>arr2=[4,5,6]<br>[4, 5, 6]<br>arr1.concat(arr2)<br>[1, 2, 3, 4, 5, 6]<br>//用push<br>let arr1 = [1, 2, 3, 4, 5];<br>let arr2 = [6, 7, 8, 9, 10];</p>\n<p>Array.prototype.push.apply(arr1, arr2);<br>判断是否为数组</p>\n<p>//在es5中<br>isArray方法 Boolean<br>//其他方法<br>array.prototype.toString==”object array”</p>\n"},{"layout":"post","title":"js advance(1)","date":"2018-04-20T16:00:00.000Z","description":"最近准备好好啃一啃js，一步一步来","_content":"\n最近准备好好啃一啃js，一步一步来。\n\n#线程机制与事件机制\n\n##进程与线程\n\n进程（process）的基本概念:\n- 程序的一次执行，它占有一片独有的内存空间\n- 可以通过windows任务管理器查看进程\n- 进程被称为cpu的最小资源单位\n\n线程（thread）的基本概念：\n- 是进程内的一个独立执行单位\n- 是程序执行的一个完整的流程\n- 是cpu的最小的调度单元\n\n放上一张图，可以更加简单的了解，这2个之间的关系：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a95130975e74f579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n------\n\n进程与线程的相关知识：\n\n* 应用程序必须运行在某个进程的某个线程上\n* 一个进程中至少有一个运行的线程：主线程（既然有主线程肯定就有分线程这个说法），主线程是，进程启动后自动创建的\n* 一个进程中也可以同时运行多个线程，我们会说程序是多个线程运行的\n* 一个进程中的数据可以供其中的多个线程直接共享\n* 多个进程之间的数据是不能共享的\n* 线程池（thread pool）：保存多个线程对象的容器，实现线程对象的反复利用（复用性）\n-----\n\n有时候会问到跟进程与线程相关的问题，在这里总结一下。\n\n1.何为多进程与多线程？\n多进程运行：一个应用程序可以同时启动多个实例运行。\n多线程运行：在一个进程内，同时有多个线程运行。\n\n2.比较单线程与多线程？\n- 多线程\n优点：有效提升cpu的利用率\n 缺点：1.创建多线程会增加开销；\n             2线程切换也会有开销；\n             3.死锁与状态同步问题\n\n- 单线程\n优点：顺序编程 简单易懂\n缺点：效率低\n\n3.JS是单线程还是多线程？\n- js是单线程运行的\n- H5中的web workers可以多线程运行\n\n4.浏览器运行是单线程还是多线程？\n都是多线程\n\n5.浏览器运行是单进程还是多进程？\n- 有的是单进程。比如：Firefox和老版本的IE\n- 有的是多进程：比如：chrome和新版IE\n- 如何查看浏览器是否是多线程运行的呢？通过任务管理器-->查看进程\n#浏览器内核\n- 浏览器内核就是支撑浏览器运行的最核心的程序\n- 不同的浏览器 内核可能不一样 这里举几个例子\nChrome，Safari：webkit\nfirefox：Gecko\nIE：Trident\n360、搜狗等国内浏览器：Trident+webkit\n这里说一句题外话，国产浏览器称自己为双核，其实就是用了2个内核，还是比较垃圾。在正常显示网页的时候，国产浏览器使用的内核是webkit，当涉及到金钱交易的时候会把内核设置为Trident，IE的内核对安全性要求比较高。\n- 内核是由很多模块组成的，下面简单列举一下\njs引擎模块：负责js程序的编译与运行\nhtml，css文档解析模块：负责页面文本的解析\nDOM/CSS模块：负责dom/css在内存中的相关处理（这里相当于把解析后的文档抽象成数据结构，例如domtree cssomtree）\n布局和渲染模块：负责页面的布局和效果绘制\n以上这4个可以称为主线程。\n...还有很多模块 这里就不过多提及。\n下面说3个比较典型的3个分线程：\n定时器模块：负责定时器的管理\nDom事件响应模块：负责事件的管理\n网络请求模块：负责ajax请求\n这里我把分线程理解为异步。\n附上一张图，简单明了：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-35a988ce46534d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#定时器引发的思考\n- 1. 定时器真是定时执行的吗?\n  * 定时器并不能保证真正定时执行\n  * 一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)\n```\nvar start = Date.now()\n\tconsole.log('启动定时器前...')\n\tsetTimeout(function() {\n\t\tconsole.log('定时器执行了', Date.now() - start)\n\t}, 200)\n\tconsole.log('启动定时器后...')\n\n\t// 做一个长时间的工作\n\tfor(var i = 0; i < 1000000000; i++) {\n\n\t}\n```\n这是输出：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-d17ca3a960a1117f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 2. 定时器回调函数是在哪个线程执行的?\n    * 在主线程执行的, js是单线程的\n    * 这里可以这么说，先执行同步任务再执行异步任务，异步任务包括（promise的回调，dom的回调，settimeout的回调等）\n- 3. 定时器是如何实现的?\n    * 事件循环模型\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f49b0c9a78d3de4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#JS是单线程执行的\n- 1. 如何证明js执行是单线程的?\n  * setTimeout()的回调函数是在主线程执行的\n  * 定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行\n- 2. 为什么js要用单线程模式, 而不用多线程模式?\n      * JavaScript的单线程，与它的用途有关。\n      * 作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。\n     * 这决定了它只能是单线程，否则会带来很复杂的同步问题。\n 这里简单举一个例子来说明，假如js是多线程的，那么线程p1和线程p2都可以对dom进行操作，如果p1的操作是更改dom，p2的操作是删除dom，那能一边删除一边更改么- -\n- 3. 代码的分类\n   * 初始化代码\n   * 回调代码\n   这是一种分法，我也喜欢分为同步任务+异步任务\n- 4. js引擎执行代码的基本流程\n   * 先执行初始化代码: 包含一些特别  的代码   回调函数(异步执行)\n    * 设置定时器\n    * 绑定事件监听\n    * 发送ajax请求\n   * 后面在某个时刻才会执行回调代码\n```\nsetTimeout(function() {\n\t\t\t\tconsole.log('timeout 2222')\n\t\t\t\talert('22222222')\n\t\t\t}, 2000)\n\t\t\tsetTimeout(function() {\n\t\t\t\tconsole.log('timeout 1111')\n\t\t\t\talert('1111111')\n\t\t\t}, 1000)\n\t\t\tsetTimeout(function() {\n\t\t\t\tconsole.log('timeout() 00000')\n\t\t\t}, 0)\n\n\t\t\tfunction fn() {\n\t\t\t\tconsole.log('fn()')\n\t\t\t}\n\t\t\tfn()\n\n\t\t\tconsole.log('alert()之前')\n\t\t\talert('------') //暂停当前主线程的执行, 同时暂停计时, 点击确定后, 恢复程序执行和计时\n\t\t\tconsole.log('alert()之后')\n```\n输出：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-e70af7aab71fc776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/2018-04-21-js advance(1).markdown","raw":"---\nlayout: post\ntitle: \"js advance(1)\"\ndate: 2018-04-21\ncategories:\n  - JavaScript\ndescription: 最近准备好好啃一啃js，一步一步来\n---\n\n最近准备好好啃一啃js，一步一步来。\n\n#线程机制与事件机制\n\n##进程与线程\n\n进程（process）的基本概念:\n- 程序的一次执行，它占有一片独有的内存空间\n- 可以通过windows任务管理器查看进程\n- 进程被称为cpu的最小资源单位\n\n线程（thread）的基本概念：\n- 是进程内的一个独立执行单位\n- 是程序执行的一个完整的流程\n- 是cpu的最小的调度单元\n\n放上一张图，可以更加简单的了解，这2个之间的关系：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a95130975e74f579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n------\n\n进程与线程的相关知识：\n\n* 应用程序必须运行在某个进程的某个线程上\n* 一个进程中至少有一个运行的线程：主线程（既然有主线程肯定就有分线程这个说法），主线程是，进程启动后自动创建的\n* 一个进程中也可以同时运行多个线程，我们会说程序是多个线程运行的\n* 一个进程中的数据可以供其中的多个线程直接共享\n* 多个进程之间的数据是不能共享的\n* 线程池（thread pool）：保存多个线程对象的容器，实现线程对象的反复利用（复用性）\n-----\n\n有时候会问到跟进程与线程相关的问题，在这里总结一下。\n\n1.何为多进程与多线程？\n多进程运行：一个应用程序可以同时启动多个实例运行。\n多线程运行：在一个进程内，同时有多个线程运行。\n\n2.比较单线程与多线程？\n- 多线程\n优点：有效提升cpu的利用率\n 缺点：1.创建多线程会增加开销；\n             2线程切换也会有开销；\n             3.死锁与状态同步问题\n\n- 单线程\n优点：顺序编程 简单易懂\n缺点：效率低\n\n3.JS是单线程还是多线程？\n- js是单线程运行的\n- H5中的web workers可以多线程运行\n\n4.浏览器运行是单线程还是多线程？\n都是多线程\n\n5.浏览器运行是单进程还是多进程？\n- 有的是单进程。比如：Firefox和老版本的IE\n- 有的是多进程：比如：chrome和新版IE\n- 如何查看浏览器是否是多线程运行的呢？通过任务管理器-->查看进程\n#浏览器内核\n- 浏览器内核就是支撑浏览器运行的最核心的程序\n- 不同的浏览器 内核可能不一样 这里举几个例子\nChrome，Safari：webkit\nfirefox：Gecko\nIE：Trident\n360、搜狗等国内浏览器：Trident+webkit\n这里说一句题外话，国产浏览器称自己为双核，其实就是用了2个内核，还是比较垃圾。在正常显示网页的时候，国产浏览器使用的内核是webkit，当涉及到金钱交易的时候会把内核设置为Trident，IE的内核对安全性要求比较高。\n- 内核是由很多模块组成的，下面简单列举一下\njs引擎模块：负责js程序的编译与运行\nhtml，css文档解析模块：负责页面文本的解析\nDOM/CSS模块：负责dom/css在内存中的相关处理（这里相当于把解析后的文档抽象成数据结构，例如domtree cssomtree）\n布局和渲染模块：负责页面的布局和效果绘制\n以上这4个可以称为主线程。\n...还有很多模块 这里就不过多提及。\n下面说3个比较典型的3个分线程：\n定时器模块：负责定时器的管理\nDom事件响应模块：负责事件的管理\n网络请求模块：负责ajax请求\n这里我把分线程理解为异步。\n附上一张图，简单明了：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-35a988ce46534d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#定时器引发的思考\n- 1. 定时器真是定时执行的吗?\n  * 定时器并不能保证真正定时执行\n  * 一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)\n```\nvar start = Date.now()\n\tconsole.log('启动定时器前...')\n\tsetTimeout(function() {\n\t\tconsole.log('定时器执行了', Date.now() - start)\n\t}, 200)\n\tconsole.log('启动定时器后...')\n\n\t// 做一个长时间的工作\n\tfor(var i = 0; i < 1000000000; i++) {\n\n\t}\n```\n这是输出：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-d17ca3a960a1117f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 2. 定时器回调函数是在哪个线程执行的?\n    * 在主线程执行的, js是单线程的\n    * 这里可以这么说，先执行同步任务再执行异步任务，异步任务包括（promise的回调，dom的回调，settimeout的回调等）\n- 3. 定时器是如何实现的?\n    * 事件循环模型\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f49b0c9a78d3de4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#JS是单线程执行的\n- 1. 如何证明js执行是单线程的?\n  * setTimeout()的回调函数是在主线程执行的\n  * 定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行\n- 2. 为什么js要用单线程模式, 而不用多线程模式?\n      * JavaScript的单线程，与它的用途有关。\n      * 作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。\n     * 这决定了它只能是单线程，否则会带来很复杂的同步问题。\n 这里简单举一个例子来说明，假如js是多线程的，那么线程p1和线程p2都可以对dom进行操作，如果p1的操作是更改dom，p2的操作是删除dom，那能一边删除一边更改么- -\n- 3. 代码的分类\n   * 初始化代码\n   * 回调代码\n   这是一种分法，我也喜欢分为同步任务+异步任务\n- 4. js引擎执行代码的基本流程\n   * 先执行初始化代码: 包含一些特别  的代码   回调函数(异步执行)\n    * 设置定时器\n    * 绑定事件监听\n    * 发送ajax请求\n   * 后面在某个时刻才会执行回调代码\n```\nsetTimeout(function() {\n\t\t\t\tconsole.log('timeout 2222')\n\t\t\t\talert('22222222')\n\t\t\t}, 2000)\n\t\t\tsetTimeout(function() {\n\t\t\t\tconsole.log('timeout 1111')\n\t\t\t\talert('1111111')\n\t\t\t}, 1000)\n\t\t\tsetTimeout(function() {\n\t\t\t\tconsole.log('timeout() 00000')\n\t\t\t}, 0)\n\n\t\t\tfunction fn() {\n\t\t\t\tconsole.log('fn()')\n\t\t\t}\n\t\t\tfn()\n\n\t\t\tconsole.log('alert()之前')\n\t\t\talert('------') //暂停当前主线程的执行, 同时暂停计时, 点击确定后, 恢复程序执行和计时\n\t\t\tconsole.log('alert()之后')\n```\n输出：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-e70af7aab71fc776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"2018-04-21-js advance(1)","published":1,"updated":"2019-01-31T07:15:59.709Z","comments":1,"photos":[],"link":"","_id":"cjvaywezi00145096hva6gvqs","content":"<p>最近准备好好啃一啃js，一步一步来。</p>\n<p>#线程机制与事件机制</p>\n<p>##进程与线程</p>\n<p>进程（process）的基本概念:</p>\n<ul>\n<li>程序的一次执行，它占有一片独有的内存空间</li>\n<li>可以通过windows任务管理器查看进程</li>\n<li>进程被称为cpu的最小资源单位</li>\n</ul>\n<p>线程（thread）的基本概念：</p>\n<ul>\n<li>是进程内的一个独立执行单位</li>\n<li>是程序执行的一个完整的流程</li>\n<li>是cpu的最小的调度单元</li>\n</ul>\n<p>放上一张图，可以更加简单的了解，这2个之间的关系：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a95130975e74f579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<p>进程与线程的相关知识：</p>\n<ul>\n<li>应用程序必须运行在某个进程的某个线程上</li>\n<li>一个进程中至少有一个运行的线程：主线程（既然有主线程肯定就有分线程这个说法），主线程是，进程启动后自动创建的</li>\n<li>一个进程中也可以同时运行多个线程，我们会说程序是多个线程运行的</li>\n<li>一个进程中的数据可以供其中的多个线程直接共享</li>\n<li>多个进程之间的数据是不能共享的</li>\n<li>线程池（thread pool）：保存多个线程对象的容器，实现线程对象的反复利用（复用性）</li>\n</ul>\n<hr>\n<p>有时候会问到跟进程与线程相关的问题，在这里总结一下。</p>\n<p>1.何为多进程与多线程？<br>多进程运行：一个应用程序可以同时启动多个实例运行。<br>多线程运行：在一个进程内，同时有多个线程运行。</p>\n<p>2.比较单线程与多线程？</p>\n<ul>\n<li><p>多线程<br>优点：有效提升cpu的利用率<br>缺点：1.创建多线程会增加开销；</p>\n<pre><code>2线程切换也会有开销；\n3.死锁与状态同步问题\n</code></pre></li>\n<li><p>单线程<br>优点：顺序编程 简单易懂<br>缺点：效率低</p>\n</li>\n</ul>\n<p>3.JS是单线程还是多线程？</p>\n<ul>\n<li>js是单线程运行的</li>\n<li>H5中的web workers可以多线程运行</li>\n</ul>\n<p>4.浏览器运行是单线程还是多线程？<br>都是多线程</p>\n<p>5.浏览器运行是单进程还是多进程？</p>\n<ul>\n<li>有的是单进程。比如：Firefox和老版本的IE</li>\n<li>有的是多进程：比如：chrome和新版IE</li>\n<li>如何查看浏览器是否是多线程运行的呢？通过任务管理器–&gt;查看进程<br>#浏览器内核</li>\n<li>浏览器内核就是支撑浏览器运行的最核心的程序</li>\n<li>不同的浏览器 内核可能不一样 这里举几个例子<br>Chrome，Safari：webkit<br>firefox：Gecko<br>IE：Trident<br>360、搜狗等国内浏览器：Trident+webkit<br>这里说一句题外话，国产浏览器称自己为双核，其实就是用了2个内核，还是比较垃圾。在正常显示网页的时候，国产浏览器使用的内核是webkit，当涉及到金钱交易的时候会把内核设置为Trident，IE的内核对安全性要求比较高。</li>\n<li>内核是由很多模块组成的，下面简单列举一下<br>js引擎模块：负责js程序的编译与运行<br>html，css文档解析模块：负责页面文本的解析<br>DOM/CSS模块：负责dom/css在内存中的相关处理（这里相当于把解析后的文档抽象成数据结构，例如domtree cssomtree）<br>布局和渲染模块：负责页面的布局和效果绘制<br>以上这4个可以称为主线程。<br>…还有很多模块 这里就不过多提及。<br>下面说3个比较典型的3个分线程：<br>定时器模块：负责定时器的管理<br>Dom事件响应模块：负责事件的管理<br>网络请求模块：负责ajax请求<br>这里我把分线程理解为异步。<br>附上一张图，简单明了：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-35a988ce46534d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>#定时器引发的思考</li>\n<li><ol>\n<li>定时器真是定时执行的吗?</li>\n</ol>\n<ul>\n<li>定时器并不能保证真正定时执行</li>\n<li>一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var start = Date.now()</span><br><span class=\"line\">\tconsole.log(&apos;启动定时器前...&apos;)</span><br><span class=\"line\">\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;定时器执行了&apos;, Date.now() - start)</span><br><span class=\"line\">\t&#125;, 200)</span><br><span class=\"line\">\tconsole.log(&apos;启动定时器后...&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 做一个长时间的工作</span><br><span class=\"line\">\tfor(var i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>这是输出：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-d17ca3a960a1117f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ul>\n<li><ol start=\"2\">\n<li>定时器回调函数是在哪个线程执行的?<ul>\n<li>在主线程执行的, js是单线程的</li>\n<li>这里可以这么说，先执行同步任务再执行异步任务，异步任务包括（promise的回调，dom的回调，settimeout的回调等）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>定时器是如何实现的?<ul>\n<li>事件循环模型<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f49b0c9a78d3de4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>#JS是单线程执行的</p>\n<ul>\n<li><ol>\n<li>如何证明js执行是单线程的?</li>\n</ol>\n<ul>\n<li>setTimeout()的回调函数是在主线程执行的</li>\n<li>定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>为什么js要用单线程模式, 而不用多线程模式?<ul>\n<li>JavaScript的单线程，与它的用途有关。</li>\n<li>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。<ul>\n<li>这决定了它只能是单线程，否则会带来很复杂的同步问题。<br>这里简单举一个例子来说明，假如js是多线程的，那么线程p1和线程p2都可以对dom进行操作，如果p1的操作是更改dom，p2的操作是删除dom，那能一边删除一边更改么- -</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>代码的分类<ul>\n<li>初始化代码</li>\n<li>回调代码<br>这是一种分法，我也喜欢分为同步任务+异步任务</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>js引擎执行代码的基本流程<ul>\n<li>先执行初始化代码: 包含一些特别  的代码   回调函数(异步执行)</li>\n<li>设置定时器</li>\n<li>绑定事件监听</li>\n<li>发送ajax请求</li>\n<li>后面在某个时刻才会执行回调代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;timeout 2222&apos;)</span><br><span class=\"line\">\t\t\t\talert(&apos;22222222&apos;)</span><br><span class=\"line\">\t\t\t&#125;, 2000)</span><br><span class=\"line\">\t\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;timeout 1111&apos;)</span><br><span class=\"line\">\t\t\t\talert(&apos;1111111&apos;)</span><br><span class=\"line\">\t\t\t&#125;, 1000)</span><br><span class=\"line\">\t\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;timeout() 00000&apos;)</span><br><span class=\"line\">\t\t\t&#125;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfunction fn() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;fn()&apos;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfn()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tconsole.log(&apos;alert()之前&apos;)</span><br><span class=\"line\">\t\t\talert(&apos;------&apos;) //暂停当前主线程的执行, 同时暂停计时, 点击确定后, 恢复程序执行和计时</span><br><span class=\"line\">\t\t\tconsole.log(&apos;alert()之后&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>输出：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-e70af7aab71fc776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近准备好好啃一啃js，一步一步来。</p>\n<p>#线程机制与事件机制</p>\n<p>##进程与线程</p>\n<p>进程（process）的基本概念:</p>\n<ul>\n<li>程序的一次执行，它占有一片独有的内存空间</li>\n<li>可以通过windows任务管理器查看进程</li>\n<li>进程被称为cpu的最小资源单位</li>\n</ul>\n<p>线程（thread）的基本概念：</p>\n<ul>\n<li>是进程内的一个独立执行单位</li>\n<li>是程序执行的一个完整的流程</li>\n<li>是cpu的最小的调度单元</li>\n</ul>\n<p>放上一张图，可以更加简单的了解，这2个之间的关系：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a95130975e74f579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<p>进程与线程的相关知识：</p>\n<ul>\n<li>应用程序必须运行在某个进程的某个线程上</li>\n<li>一个进程中至少有一个运行的线程：主线程（既然有主线程肯定就有分线程这个说法），主线程是，进程启动后自动创建的</li>\n<li>一个进程中也可以同时运行多个线程，我们会说程序是多个线程运行的</li>\n<li>一个进程中的数据可以供其中的多个线程直接共享</li>\n<li>多个进程之间的数据是不能共享的</li>\n<li>线程池（thread pool）：保存多个线程对象的容器，实现线程对象的反复利用（复用性）</li>\n</ul>\n<hr>\n<p>有时候会问到跟进程与线程相关的问题，在这里总结一下。</p>\n<p>1.何为多进程与多线程？<br>多进程运行：一个应用程序可以同时启动多个实例运行。<br>多线程运行：在一个进程内，同时有多个线程运行。</p>\n<p>2.比较单线程与多线程？</p>\n<ul>\n<li><p>多线程<br>优点：有效提升cpu的利用率<br>缺点：1.创建多线程会增加开销；</p>\n<pre><code>2线程切换也会有开销；\n3.死锁与状态同步问题\n</code></pre></li>\n<li><p>单线程<br>优点：顺序编程 简单易懂<br>缺点：效率低</p>\n</li>\n</ul>\n<p>3.JS是单线程还是多线程？</p>\n<ul>\n<li>js是单线程运行的</li>\n<li>H5中的web workers可以多线程运行</li>\n</ul>\n<p>4.浏览器运行是单线程还是多线程？<br>都是多线程</p>\n<p>5.浏览器运行是单进程还是多进程？</p>\n<ul>\n<li>有的是单进程。比如：Firefox和老版本的IE</li>\n<li>有的是多进程：比如：chrome和新版IE</li>\n<li>如何查看浏览器是否是多线程运行的呢？通过任务管理器–&gt;查看进程<br>#浏览器内核</li>\n<li>浏览器内核就是支撑浏览器运行的最核心的程序</li>\n<li>不同的浏览器 内核可能不一样 这里举几个例子<br>Chrome，Safari：webkit<br>firefox：Gecko<br>IE：Trident<br>360、搜狗等国内浏览器：Trident+webkit<br>这里说一句题外话，国产浏览器称自己为双核，其实就是用了2个内核，还是比较垃圾。在正常显示网页的时候，国产浏览器使用的内核是webkit，当涉及到金钱交易的时候会把内核设置为Trident，IE的内核对安全性要求比较高。</li>\n<li>内核是由很多模块组成的，下面简单列举一下<br>js引擎模块：负责js程序的编译与运行<br>html，css文档解析模块：负责页面文本的解析<br>DOM/CSS模块：负责dom/css在内存中的相关处理（这里相当于把解析后的文档抽象成数据结构，例如domtree cssomtree）<br>布局和渲染模块：负责页面的布局和效果绘制<br>以上这4个可以称为主线程。<br>…还有很多模块 这里就不过多提及。<br>下面说3个比较典型的3个分线程：<br>定时器模块：负责定时器的管理<br>Dom事件响应模块：负责事件的管理<br>网络请求模块：负责ajax请求<br>这里我把分线程理解为异步。<br>附上一张图，简单明了：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-35a988ce46534d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>#定时器引发的思考</li>\n<li><ol>\n<li>定时器真是定时执行的吗?</li>\n</ol>\n<ul>\n<li>定时器并不能保证真正定时执行</li>\n<li>一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var start = Date.now()</span><br><span class=\"line\">\tconsole.log(&apos;启动定时器前...&apos;)</span><br><span class=\"line\">\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\tconsole.log(&apos;定时器执行了&apos;, Date.now() - start)</span><br><span class=\"line\">\t&#125;, 200)</span><br><span class=\"line\">\tconsole.log(&apos;启动定时器后...&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 做一个长时间的工作</span><br><span class=\"line\">\tfor(var i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>这是输出：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-d17ca3a960a1117f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ul>\n<li><ol start=\"2\">\n<li>定时器回调函数是在哪个线程执行的?<ul>\n<li>在主线程执行的, js是单线程的</li>\n<li>这里可以这么说，先执行同步任务再执行异步任务，异步任务包括（promise的回调，dom的回调，settimeout的回调等）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>定时器是如何实现的?<ul>\n<li>事件循环模型<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f49b0c9a78d3de4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>#JS是单线程执行的</p>\n<ul>\n<li><ol>\n<li>如何证明js执行是单线程的?</li>\n</ol>\n<ul>\n<li>setTimeout()的回调函数是在主线程执行的</li>\n<li>定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>为什么js要用单线程模式, 而不用多线程模式?<ul>\n<li>JavaScript的单线程，与它的用途有关。</li>\n<li>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。<ul>\n<li>这决定了它只能是单线程，否则会带来很复杂的同步问题。<br>这里简单举一个例子来说明，假如js是多线程的，那么线程p1和线程p2都可以对dom进行操作，如果p1的操作是更改dom，p2的操作是删除dom，那能一边删除一边更改么- -</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>代码的分类<ul>\n<li>初始化代码</li>\n<li>回调代码<br>这是一种分法，我也喜欢分为同步任务+异步任务</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>js引擎执行代码的基本流程<ul>\n<li>先执行初始化代码: 包含一些特别  的代码   回调函数(异步执行)</li>\n<li>设置定时器</li>\n<li>绑定事件监听</li>\n<li>发送ajax请求</li>\n<li>后面在某个时刻才会执行回调代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;timeout 2222&apos;)</span><br><span class=\"line\">\t\t\t\talert(&apos;22222222&apos;)</span><br><span class=\"line\">\t\t\t&#125;, 2000)</span><br><span class=\"line\">\t\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;timeout 1111&apos;)</span><br><span class=\"line\">\t\t\t\talert(&apos;1111111&apos;)</span><br><span class=\"line\">\t\t\t&#125;, 1000)</span><br><span class=\"line\">\t\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;timeout() 00000&apos;)</span><br><span class=\"line\">\t\t\t&#125;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfunction fn() &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&apos;fn()&apos;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfn()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tconsole.log(&apos;alert()之前&apos;)</span><br><span class=\"line\">\t\t\talert(&apos;------&apos;) //暂停当前主线程的执行, 同时暂停计时, 点击确定后, 恢复程序执行和计时</span><br><span class=\"line\">\t\t\tconsole.log(&apos;alert()之后&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>输出：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-e70af7aab71fc776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"layout":"post","title":"计网基础知识","date":"2018-04-20T16:00:00.000Z","description":"dns相关","_content":"\n今天看到一段文字是描写dns的，感觉写的很棒，在这里记录一下。\n\nDNS的使命\n\nDNS(Domain Name System),中文叫做域名系统。\n\nDNS的就是为了同时保留域名和IP地址的优势的产物。人们可以通过域名简单的记住要访问的web站点，而路由器等网络设备却可以使用IP地址快速定位到相关主机。DNS要做的就是当用户输入域名后，先到DNS服务器查询IP地址，然后再通过IP地址来访问web站点。\n\n从浏览器地址栏输入url到显示页面的步骤\n\n浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n载入解析到的资源文件，渲染页面，完成。\n这盘文章图解http 讲解的非常的到位\nhttps://juejin.im/entry/587230c6ac502e006c21a6e8\n","source":"_posts/2018-04-21-计网基础知识.markdown","raw":"---\nlayout: post\ntitle: \"计网基础知识\"\ndate: 2018-04-21\ncategories:\n  - 前端面试\ndescription: dns相关\n---\n\n今天看到一段文字是描写dns的，感觉写的很棒，在这里记录一下。\n\nDNS的使命\n\nDNS(Domain Name System),中文叫做域名系统。\n\nDNS的就是为了同时保留域名和IP地址的优势的产物。人们可以通过域名简单的记住要访问的web站点，而路由器等网络设备却可以使用IP地址快速定位到相关主机。DNS要做的就是当用户输入域名后，先到DNS服务器查询IP地址，然后再通过IP地址来访问web站点。\n\n从浏览器地址栏输入url到显示页面的步骤\n\n浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n载入解析到的资源文件，渲染页面，完成。\n这盘文章图解http 讲解的非常的到位\nhttps://juejin.im/entry/587230c6ac502e006c21a6e8\n","slug":"2018-04-21-计网基础知识","published":1,"updated":"2019-01-31T07:15:59.709Z","comments":1,"photos":[],"link":"","_id":"cjvaywezm00165096y1g28xgp","content":"<p>今天看到一段文字是描写dns的，感觉写的很棒，在这里记录一下。</p>\n<p>DNS的使命</p>\n<p>DNS(Domain Name System),中文叫做域名系统。</p>\n<p>DNS的就是为了同时保留域名和IP地址的优势的产物。人们可以通过域名简单的记住要访问的web站点，而路由器等网络设备却可以使用IP地址快速定位到相关主机。DNS要做的就是当用户输入域名后，先到DNS服务器查询IP地址，然后再通过IP地址来访问web站点。</p>\n<p>从浏览器地址栏输入url到显示页面的步骤</p>\n<p>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；<br>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>载入解析到的资源文件，渲染页面，完成。<br>这盘文章图解http 讲解的非常的到位<br><a href=\"https://juejin.im/entry/587230c6ac502e006c21a6e8\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/587230c6ac502e006c21a6e8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天看到一段文字是描写dns的，感觉写的很棒，在这里记录一下。</p>\n<p>DNS的使命</p>\n<p>DNS(Domain Name System),中文叫做域名系统。</p>\n<p>DNS的就是为了同时保留域名和IP地址的优势的产物。人们可以通过域名简单的记住要访问的web站点，而路由器等网络设备却可以使用IP地址快速定位到相关主机。DNS要做的就是当用户输入域名后，先到DNS服务器查询IP地址，然后再通过IP地址来访问web站点。</p>\n<p>从浏览器地址栏输入url到显示页面的步骤</p>\n<p>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；<br>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>载入解析到的资源文件，渲染页面，完成。<br>这盘文章图解http 讲解的非常的到位<br><a href=\"https://juejin.im/entry/587230c6ac502e006c21a6e8\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/587230c6ac502e006c21a6e8</a></p>\n"},{"layout":"post","title":"H5 web workers（多线程）","date":"2018-04-22T16:00:00.000Z","description":"web workers是HTML5提供的一个JavaScript多线程解决方案","_content":"\n#介绍\n- web workers是HTML5提供的一个JavaScript多线程解决方案\n- 我们可以将一些大计算量的代码交由web worker运行而不冻结用户界面\n- 但是子线程完全受主线程控制，且不得操作dom。所以，这个新标准并没有改变JavaScript单线程的本质。\n\n--------\n###相关：\n1.h5规范提供了js分线程的实现，取名为web workers\n2.相关API\n   - woker：构造函数，加载分线程执行的js文件\n   - Woker.prototype.onmessage:用于接收另一个线程的回调函数\n   - Woker.prototype.postMessage:向另一个线程发送消息\n1. 不足\n  * worker内代码不能操作DOM(更新UI)\n  * 不能跨域加载JS\n  * 不是每个浏览器都支持这个新特性\n--------\n#使用\n- 创建在分线程执行的js文件\n- 在主线程中的js中发消息并设置回调\n```\n\t<input type=\"text\" id=\"number\" value=\"30\">\n\t\t<button id=\"btn1\">主线程计算fibonacci值</button>\n\t\t<button id=\"btn2\">分线程计算fibonacci值</button>\n\n\t\t<script type=\"text/javascript\">\n\t\t\tvar worker = new Worker(\"./worker·2.js\");\n\t\t\tdocument.getElementById(\"btn2\").onclick = function() {\n\t\t\t\tvar inputVal = document.getElementById(\"number\").value;\n\t\t\t\tworker.postMessage(inputVal);\n\t\t\t\tworker.onmessage = function(event) {\n\t\t\t\t\tconsole.log(event.data);\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n```\nworker2.js:\n```\nvar fibonacci =function(n) {\n    return n <2 ? n : fibonacci(n -1) + fibonacci(n -2);\n};\n\nvar onmessage = function(event) {\n\tconsole.log(event);\n    var n = parseInt(event.data, 10);\n    postMessage(fibonacci(n));\n};\n```\n贴上相关API\n分线程接收\n```\nvar onmessage =function (event){ //不能用函数声明\n    console.log('onMessage()22');\n    var upper = event.data.toUpperCase();//通过event.data获得发送来的数据\n    postMessage( upper );//将获取到的数据发送会主线程\n}\n```\n在主线程设置\n```\n创建一个Worker对象并向它传递将在新线程中执行的脚本的URL\nvar worker = new Worker(\"worker.js\");  \n//接收worker传过来的数据函数\nworker.onmessage = function (event) {     \n    console.log(event.data);             \n};\n//向worker发送数据\nworker.postMessage(\"hello world\");    \n```\n相应图解：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-5772770b4751206f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/2018-04-23-H5 web workers（多线程）.markdown","raw":"---\nlayout: post\ntitle: \"H5 web workers（多线程）\"\ndate: 2018-04-23\ncategories:\n  - 前端面试\n  - HTML5\ndescription: web workers是HTML5提供的一个JavaScript多线程解决方案\n---\n\n#介绍\n- web workers是HTML5提供的一个JavaScript多线程解决方案\n- 我们可以将一些大计算量的代码交由web worker运行而不冻结用户界面\n- 但是子线程完全受主线程控制，且不得操作dom。所以，这个新标准并没有改变JavaScript单线程的本质。\n\n--------\n###相关：\n1.h5规范提供了js分线程的实现，取名为web workers\n2.相关API\n   - woker：构造函数，加载分线程执行的js文件\n   - Woker.prototype.onmessage:用于接收另一个线程的回调函数\n   - Woker.prototype.postMessage:向另一个线程发送消息\n1. 不足\n  * worker内代码不能操作DOM(更新UI)\n  * 不能跨域加载JS\n  * 不是每个浏览器都支持这个新特性\n--------\n#使用\n- 创建在分线程执行的js文件\n- 在主线程中的js中发消息并设置回调\n```\n\t<input type=\"text\" id=\"number\" value=\"30\">\n\t\t<button id=\"btn1\">主线程计算fibonacci值</button>\n\t\t<button id=\"btn2\">分线程计算fibonacci值</button>\n\n\t\t<script type=\"text/javascript\">\n\t\t\tvar worker = new Worker(\"./worker·2.js\");\n\t\t\tdocument.getElementById(\"btn2\").onclick = function() {\n\t\t\t\tvar inputVal = document.getElementById(\"number\").value;\n\t\t\t\tworker.postMessage(inputVal);\n\t\t\t\tworker.onmessage = function(event) {\n\t\t\t\t\tconsole.log(event.data);\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n```\nworker2.js:\n```\nvar fibonacci =function(n) {\n    return n <2 ? n : fibonacci(n -1) + fibonacci(n -2);\n};\n\nvar onmessage = function(event) {\n\tconsole.log(event);\n    var n = parseInt(event.data, 10);\n    postMessage(fibonacci(n));\n};\n```\n贴上相关API\n分线程接收\n```\nvar onmessage =function (event){ //不能用函数声明\n    console.log('onMessage()22');\n    var upper = event.data.toUpperCase();//通过event.data获得发送来的数据\n    postMessage( upper );//将获取到的数据发送会主线程\n}\n```\n在主线程设置\n```\n创建一个Worker对象并向它传递将在新线程中执行的脚本的URL\nvar worker = new Worker(\"worker.js\");  \n//接收worker传过来的数据函数\nworker.onmessage = function (event) {     \n    console.log(event.data);             \n};\n//向worker发送数据\nworker.postMessage(\"hello world\");    \n```\n相应图解：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-5772770b4751206f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"2018-04-23-H5 web workers（多线程）","published":1,"updated":"2019-01-31T07:15:59.710Z","comments":1,"photos":[],"link":"","_id":"cjvaywezq00195096ex3lt4mf","content":"<p>#介绍</p>\n<ul>\n<li>web workers是HTML5提供的一个JavaScript多线程解决方案</li>\n<li>我们可以将一些大计算量的代码交由web worker运行而不冻结用户界面</li>\n<li>但是子线程完全受主线程控制，且不得操作dom。所以，这个新标准并没有改变JavaScript单线程的本质。</li>\n</ul>\n<hr>\n<p>###相关：<br>1.h5规范提供了js分线程的实现，取名为web workers<br>2.相关API</p>\n<ul>\n<li>woker：构造函数，加载分线程执行的js文件</li>\n<li>Woker.prototype.onmessage:用于接收另一个线程的回调函数</li>\n<li>Woker.prototype.postMessage:向另一个线程发送消息<ol>\n<li>不足</li>\n</ol>\n<ul>\n<li>worker内代码不能操作DOM(更新UI)</li>\n<li>不能跨域加载JS</li>\n<li>不是每个浏览器都支持这个新特性</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>#使用</p>\n<ul>\n<li>创建在分线程执行的js文件</li>\n<li>在主线程中的js中发消息并设置回调<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;number&quot; value=&quot;30&quot;&gt;</span><br><span class=\"line\">\t&lt;button id=&quot;btn1&quot;&gt;主线程计算fibonacci值&lt;/button&gt;</span><br><span class=\"line\">\t&lt;button id=&quot;btn2&quot;&gt;分线程计算fibonacci值&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\tvar worker = new Worker(&quot;./worker·2.js&quot;);</span><br><span class=\"line\">\t\tdocument.getElementById(&quot;btn2&quot;).onclick = function() &#123;</span><br><span class=\"line\">\t\t\tvar inputVal = document.getElementById(&quot;number&quot;).value;</span><br><span class=\"line\">\t\t\tworker.postMessage(inputVal);</span><br><span class=\"line\">\t\t\tworker.onmessage = function(event) &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(event.data);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>worker2.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fibonacci =function(n) &#123;</span><br><span class=\"line\">    return n &lt;2 ? n : fibonacci(n -1) + fibonacci(n -2);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var onmessage = function(event) &#123;</span><br><span class=\"line\">\tconsole.log(event);</span><br><span class=\"line\">    var n = parseInt(event.data, 10);</span><br><span class=\"line\">    postMessage(fibonacci(n));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>贴上相关API<br>分线程接收<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var onmessage =function (event)&#123; //不能用函数声明</span><br><span class=\"line\">    console.log(&apos;onMessage()22&apos;);</span><br><span class=\"line\">    var upper = event.data.toUpperCase();//通过event.data获得发送来的数据</span><br><span class=\"line\">    postMessage( upper );//将获取到的数据发送会主线程</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在主线程设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个Worker对象并向它传递将在新线程中执行的脚本的URL</span><br><span class=\"line\">var worker = new Worker(&quot;worker.js&quot;);  </span><br><span class=\"line\">//接收worker传过来的数据函数</span><br><span class=\"line\">worker.onmessage = function (event) &#123;     </span><br><span class=\"line\">    console.log(event.data);             </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//向worker发送数据</span><br><span class=\"line\">worker.postMessage(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>相应图解：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-5772770b4751206f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#介绍</p>\n<ul>\n<li>web workers是HTML5提供的一个JavaScript多线程解决方案</li>\n<li>我们可以将一些大计算量的代码交由web worker运行而不冻结用户界面</li>\n<li>但是子线程完全受主线程控制，且不得操作dom。所以，这个新标准并没有改变JavaScript单线程的本质。</li>\n</ul>\n<hr>\n<p>###相关：<br>1.h5规范提供了js分线程的实现，取名为web workers<br>2.相关API</p>\n<ul>\n<li>woker：构造函数，加载分线程执行的js文件</li>\n<li>Woker.prototype.onmessage:用于接收另一个线程的回调函数</li>\n<li>Woker.prototype.postMessage:向另一个线程发送消息<ol>\n<li>不足</li>\n</ol>\n<ul>\n<li>worker内代码不能操作DOM(更新UI)</li>\n<li>不能跨域加载JS</li>\n<li>不是每个浏览器都支持这个新特性</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>#使用</p>\n<ul>\n<li>创建在分线程执行的js文件</li>\n<li>在主线程中的js中发消息并设置回调<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;number&quot; value=&quot;30&quot;&gt;</span><br><span class=\"line\">\t&lt;button id=&quot;btn1&quot;&gt;主线程计算fibonacci值&lt;/button&gt;</span><br><span class=\"line\">\t&lt;button id=&quot;btn2&quot;&gt;分线程计算fibonacci值&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\tvar worker = new Worker(&quot;./worker·2.js&quot;);</span><br><span class=\"line\">\t\tdocument.getElementById(&quot;btn2&quot;).onclick = function() &#123;</span><br><span class=\"line\">\t\t\tvar inputVal = document.getElementById(&quot;number&quot;).value;</span><br><span class=\"line\">\t\t\tworker.postMessage(inputVal);</span><br><span class=\"line\">\t\t\tworker.onmessage = function(event) &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(event.data);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>worker2.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fibonacci =function(n) &#123;</span><br><span class=\"line\">    return n &lt;2 ? n : fibonacci(n -1) + fibonacci(n -2);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var onmessage = function(event) &#123;</span><br><span class=\"line\">\tconsole.log(event);</span><br><span class=\"line\">    var n = parseInt(event.data, 10);</span><br><span class=\"line\">    postMessage(fibonacci(n));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>贴上相关API<br>分线程接收<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var onmessage =function (event)&#123; //不能用函数声明</span><br><span class=\"line\">    console.log(&apos;onMessage()22&apos;);</span><br><span class=\"line\">    var upper = event.data.toUpperCase();//通过event.data获得发送来的数据</span><br><span class=\"line\">    postMessage( upper );//将获取到的数据发送会主线程</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在主线程设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个Worker对象并向它传递将在新线程中执行的脚本的URL</span><br><span class=\"line\">var worker = new Worker(&quot;worker.js&quot;);  </span><br><span class=\"line\">//接收worker传过来的数据函数</span><br><span class=\"line\">worker.onmessage = function (event) &#123;     </span><br><span class=\"line\">    console.log(event.data);             </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//向worker发送数据</span><br><span class=\"line\">worker.postMessage(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>相应图解：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-5772770b4751206f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"layout":"post","title":"restful浅谈","date":"2018-04-23T16:00:00.000Z","description":"restful浅谈","_content":"\n简单来说，restful就是把操作的动作交给http的对应方法来识别，get:获取，post:创建，put:更新，delete:删除。\n\n这样同一个uri可能标识多个动作。在前台处理方面，其实form表单是只支持get,和post,如果需要支持put、delete等。\n\n各个支持rest的框架应该都有处理，比如spring MVC的HiddenHttpMethodFilter就是来解决这个的，也可以ajax处理。之于这样的好处，其他的可能要在实战中体会。\n\n一般WEB应用的API会被设计成restful方式, API操作的东西叫资源, 操作的方式就是请求的方式(GET, POST, DELTE, PUT)\n\n把每一个请求看成是对资源的访问， 用一些动词表达对资源的操作（增、删、查、改)\n\n/GET/id/{id} //获取资源\n\n/POST //创建资源\n\n/PUT //更新资源\n\n/DELET/id/{id} //删除资源\n","source":"_posts/2018-04-24-restful浅谈.markdown","raw":"---\nlayout: post\ntitle: \"restful浅谈\"\ndate: 2018-04-24\ncategories:\n  - 前端面试\ndescription: restful浅谈\n---\n\n简单来说，restful就是把操作的动作交给http的对应方法来识别，get:获取，post:创建，put:更新，delete:删除。\n\n这样同一个uri可能标识多个动作。在前台处理方面，其实form表单是只支持get,和post,如果需要支持put、delete等。\n\n各个支持rest的框架应该都有处理，比如spring MVC的HiddenHttpMethodFilter就是来解决这个的，也可以ajax处理。之于这样的好处，其他的可能要在实战中体会。\n\n一般WEB应用的API会被设计成restful方式, API操作的东西叫资源, 操作的方式就是请求的方式(GET, POST, DELTE, PUT)\n\n把每一个请求看成是对资源的访问， 用一些动词表达对资源的操作（增、删、查、改)\n\n/GET/id/{id} //获取资源\n\n/POST //创建资源\n\n/PUT //更新资源\n\n/DELET/id/{id} //删除资源\n","slug":"2018-04-24-restful浅谈","published":1,"updated":"2019-01-31T07:15:59.711Z","comments":1,"photos":[],"link":"","_id":"cjvaywezx001a5096sudai7kl","content":"<p>简单来说，restful就是把操作的动作交给http的对应方法来识别，get:获取，post:创建，put:更新，delete:删除。</p>\n<p>这样同一个uri可能标识多个动作。在前台处理方面，其实form表单是只支持get,和post,如果需要支持put、delete等。</p>\n<p>各个支持rest的框架应该都有处理，比如spring MVC的HiddenHttpMethodFilter就是来解决这个的，也可以ajax处理。之于这样的好处，其他的可能要在实战中体会。</p>\n<p>一般WEB应用的API会被设计成restful方式, API操作的东西叫资源, 操作的方式就是请求的方式(GET, POST, DELTE, PUT)</p>\n<p>把每一个请求看成是对资源的访问， 用一些动词表达对资源的操作（增、删、查、改)</p>\n<p>/GET/id/{id} //获取资源</p>\n<p>/POST //创建资源</p>\n<p>/PUT //更新资源</p>\n<p>/DELET/id/{id} //删除资源</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简单来说，restful就是把操作的动作交给http的对应方法来识别，get:获取，post:创建，put:更新，delete:删除。</p>\n<p>这样同一个uri可能标识多个动作。在前台处理方面，其实form表单是只支持get,和post,如果需要支持put、delete等。</p>\n<p>各个支持rest的框架应该都有处理，比如spring MVC的HiddenHttpMethodFilter就是来解决这个的，也可以ajax处理。之于这样的好处，其他的可能要在实战中体会。</p>\n<p>一般WEB应用的API会被设计成restful方式, API操作的东西叫资源, 操作的方式就是请求的方式(GET, POST, DELTE, PUT)</p>\n<p>把每一个请求看成是对资源的访问， 用一些动词表达对资源的操作（增、删、查、改)</p>\n<p>/GET/id/{id} //获取资源</p>\n<p>/POST //创建资源</p>\n<p>/PUT //更新资源</p>\n<p>/DELET/id/{id} //删除资源</p>\n"},{"layout":"post","title":"Node.js详解","date":"2018-04-24T16:00:00.000Z","description":"Node.js相关基础点","_content":"\nNode.js  最重要的3点：\n1.单线程\n单线程的好处：减少了内存开销，就像操作系统中的内存换页。\n2.非阻塞I/O\n如果某一个事情，进入了，但是被I/O阻塞了，所以这个线程就阻塞了。\n不会傻等I/O语句结束，而会执行后面的语句。非阻塞就能解决问题了么？比如执行着小红的业务，执行过程中，小刚的I/O回调完成了，此时怎么办？？\n\n由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。\n当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。\n阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。\n\n3.event-driven\n事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。\n\n说是三个特点，实际上是一个特点，离开谁都不行，都玩儿不转了。\nNode.js很像抠门的餐厅老板，只聘请1个服务员，服务很多人。结果，比很多服务员效率还高。\nNode.js中所有的I/O都是异步的，回调函数，套回调函数。\n\n# 事件驱动event-driven\n\n在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。\nNode.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-2df6924294aa95ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# Node.js适合开发什么？\n\n善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也相当于这个计算阻塞了这个单线程，就不适合Node开发。\n\n当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。\n\n昨天面腾讯的时候，面试官提到了如何用node中的http模块搭建一个服务器。\n\n```js\nvar http=require('http');\n\nvar server=http.createServer(function (req,res) {\n    res.send(\"你好\");\n})\n\nserver.listen(3000,\"127.0.0.1\");\n```\n\n又问了一个问题，如果用node搭建websocket\n","source":"_posts/2018-04-25-Node.js详解.markdown","raw":"---\nlayout: post\ntitle: \"Node.js详解\"\ndate: 2018-04-25\ncategories:\n  - Node.js\ndescription: Node.js相关基础点\n---\n\nNode.js  最重要的3点：\n1.单线程\n单线程的好处：减少了内存开销，就像操作系统中的内存换页。\n2.非阻塞I/O\n如果某一个事情，进入了，但是被I/O阻塞了，所以这个线程就阻塞了。\n不会傻等I/O语句结束，而会执行后面的语句。非阻塞就能解决问题了么？比如执行着小红的业务，执行过程中，小刚的I/O回调完成了，此时怎么办？？\n\n由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。\n当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。\n阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。\n\n3.event-driven\n事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。\n\n说是三个特点，实际上是一个特点，离开谁都不行，都玩儿不转了。\nNode.js很像抠门的餐厅老板，只聘请1个服务员，服务很多人。结果，比很多服务员效率还高。\nNode.js中所有的I/O都是异步的，回调函数，套回调函数。\n\n# 事件驱动event-driven\n\n在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。\nNode.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-2df6924294aa95ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# Node.js适合开发什么？\n\n善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也相当于这个计算阻塞了这个单线程，就不适合Node开发。\n\n当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。\n\n昨天面腾讯的时候，面试官提到了如何用node中的http模块搭建一个服务器。\n\n```js\nvar http=require('http');\n\nvar server=http.createServer(function (req,res) {\n    res.send(\"你好\");\n})\n\nserver.listen(3000,\"127.0.0.1\");\n```\n\n又问了一个问题，如果用node搭建websocket\n","slug":"2018-04-25-Node.js详解","published":1,"updated":"2019-01-31T07:15:59.712Z","comments":1,"photos":[],"link":"","_id":"cjvaywf02001d50962y6w82bu","content":"<p>Node.js  最重要的3点：<br>1.单线程<br>单线程的好处：减少了内存开销，就像操作系统中的内存换页。<br>2.非阻塞I/O<br>如果某一个事情，进入了，但是被I/O阻塞了，所以这个线程就阻塞了。<br>不会傻等I/O语句结束，而会执行后面的语句。非阻塞就能解决问题了么？比如执行着小红的业务，执行过程中，小刚的I/O回调完成了，此时怎么办？？</p>\n<p>由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。<br>当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。<br>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。</p>\n<p>3.event-driven<br>事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。</p>\n<p>说是三个特点，实际上是一个特点，离开谁都不行，都玩儿不转了。<br>Node.js很像抠门的餐厅老板，只聘请1个服务员，服务很多人。结果，比很多服务员效率还高。<br>Node.js中所有的I/O都是异步的，回调函数，套回调函数。</p>\n<h1 id=\"事件驱动event-driven\"><a href=\"#事件驱动event-driven\" class=\"headerlink\" title=\"事件驱动event-driven\"></a>事件驱动event-driven</h1><p>在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。<br>Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-2df6924294aa95ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h1 id=\"Node-js适合开发什么？\"><a href=\"#Node-js适合开发什么？\" class=\"headerlink\" title=\"Node.js适合开发什么？\"></a>Node.js适合开发什么？</h1><p>善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也相当于这个计算阻塞了这个单线程，就不适合Node开发。</p>\n<p>当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。</p>\n<p>昨天面腾讯的时候，面试官提到了如何用node中的http模块搭建一个服务器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http=<span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server=http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">\"你好\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"string\">\"127.0.0.1\"</span>);</span><br></pre></td></tr></table></figure>\n<p>又问了一个问题，如果用node搭建websocket</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Node.js  最重要的3点：<br>1.单线程<br>单线程的好处：减少了内存开销，就像操作系统中的内存换页。<br>2.非阻塞I/O<br>如果某一个事情，进入了，但是被I/O阻塞了，所以这个线程就阻塞了。<br>不会傻等I/O语句结束，而会执行后面的语句。非阻塞就能解决问题了么？比如执行着小红的业务，执行过程中，小刚的I/O回调完成了，此时怎么办？？</p>\n<p>由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。<br>当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。<br>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。</p>\n<p>3.event-driven<br>事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。</p>\n<p>说是三个特点，实际上是一个特点，离开谁都不行，都玩儿不转了。<br>Node.js很像抠门的餐厅老板，只聘请1个服务员，服务很多人。结果，比很多服务员效率还高。<br>Node.js中所有的I/O都是异步的，回调函数，套回调函数。</p>\n<h1 id=\"事件驱动event-driven\"><a href=\"#事件驱动event-driven\" class=\"headerlink\" title=\"事件驱动event-driven\"></a>事件驱动event-driven</h1><p>在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。<br>Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-2df6924294aa95ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h1 id=\"Node-js适合开发什么？\"><a href=\"#Node-js适合开发什么？\" class=\"headerlink\" title=\"Node.js适合开发什么？\"></a>Node.js适合开发什么？</h1><p>善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也相当于这个计算阻塞了这个单线程，就不适合Node开发。</p>\n<p>当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。</p>\n<p>昨天面腾讯的时候，面试官提到了如何用node中的http模块搭建一个服务器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http=<span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server=http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">\"你好\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"string\">\"127.0.0.1\"</span>);</span><br></pre></td></tr></table></figure>\n<p>又问了一个问题，如果用node搭建websocket</p>\n"},{"layout":"post","title":"http-web综合问题","date":"2017-09-07T16:00:00.000Z","description":null,"image":"https://unsplash.it/2000/1200?image=900","image-sm":"https://unsplash.it/2000/1200?image=900","_content":"\n# HTTP web 综合问题\n\n### 1.Html5 语义化理解\n\n- 用正确的标签做正确的事\n- html 语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析\n- 在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强\n- 让阅读源代码的人 更容易将网站分块 便于阅读维护理解\n\n### 2.HTML5 为什么只需要写<!DOCTYPE HTML>？\n\n- html5 不需要对 DTD（document type definition）进行引用，但是需要 doctype 来规范浏览器行为\n\n# CSS 部分\n\n### css 优先级\n\n- 载入样式以最后载入的定位为准\n\n- 优先级为:!important>行内>id>class>tag>通配符>继承>默认\n\nhttps://blog.csdn.net/qq_28300493/article/details/52297165\n\n### 说说你对 AMD 和 Commonjs 的理解\n\n- CommonJS 是`服务器端模块`的规范，`Node.js`采用了这个规范。CommonJS 规范加载模块是`同步`的，也就是说，只有加载完成，才能执行后面的操作。AMD 规范则是`非同步加载模块`，允许指定`回调函数`\n\n- AMD 推荐的风格通过返回`一个对象`做为模块对象，CommonJS 的风格通过对 module.exports 或 exports 的属性赋值来达到`暴露模块`对象的目的\n\n### 用过哪些设计模式？\n\n- 工厂模式\n  - 工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法\n  - 主要好处就是可以消除对象间的耦合，通过使用工程方法而不是 new 关键字\n\n工厂模式\n\n- 套路: 通过工厂函数动态创建对象并返回\n- 适用场景: 需要创建多个对象\n- 问题: 对象没有一个具体的类型, 都是 Object 类型\n  这是一个代码实例，更加形象:\n\n```js\n<script type=\"text/javascript\">\n  function createPerson(name, age) { //返回一个对象的函数===>工厂函数\n    var obj = {\n      name: name,\n      age: age,\n      setName: function (name) {\n        this.name = name\n      }\n    }\n\n    return obj\n  }\n\n  // 创建2个人\n  var p1 = createPerson('Tom', 12)\n  var p2 = createPerson('Bob', 13)\n\n  // p1/p2是Object类型\n\n  function createStudent(name, price) {\n    var obj = {\n      name: name,\n      price: price\n    }\n    return obj\n  }\n  var s = createStudent('张三', 12000)\n  // s也是Object\n</script>\n```\n\n- 构造函数模式\n  - 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于\n  - 直接将属性和方法赋值给 this 对象;\n\n自定义构造函数模式\n\n- 套路: 自定义构造函数, 通过 new 创建对象\n- 适用场景: 需要创建多个类型确定的对象\n- 问题: 每个对象都有相同的数据, 浪费内存\n\n```\n\t\t<script type=\"text/javascript\">\n\t\t\t//定义类型\n\t\t\tfunction Person(name, age) {\n\t\t\t\tthis.name = name\n\t\t\t\tthis.age = age\n\t\t\t\tthis.setName = function(name) {\n\t\t\t\t\tthis.name = name\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar p1 = new Person('Tom', 12)\n\t\t\tp1.setName('Jack')\n\t\t\tconsole.log(p1.name, p1.age)\n\t\t\tconsole.log(p1 instanceof Person)\n\n\t\t\tfunction Student(name, price) {\n\t\t\t\tthis.name = name\n\t\t\t\tthis.price = price\n\t\t\t}\n\t\t\tvar s = new Student('Bob', 13000)\n\t\t\tconsole.log(s instanceof Student)\n\n\t\t\tvar p2 = new Person('JACK', 23)\n\t\t\tconsole.log(p1, p2)\n\t\t</script>\n```\n\n### length 的巧妙用法\n\n```\n      var arr1=arr2=[1,2,3];\n\t\t\t//清空数组\n\t\t\tarr1.length=0;\n\t\t\tconsole.log(arr1,arr2);\n\t\t\t//output '' ''\n\t\t\t//截断array\n\t\t\tarr1.length=1;\n\t\t\tconsole.log(arr1,arr2);\n\t\t\t//output [1]\n```\n\n### 合并数组的巧妙方法\n\n```\n//普通方法 concat\narr1=[1,2,3]\n[1, 2, 3]\narr2=[4,5,6]\n[4, 5, 6]\narr1.concat(arr2)\n[1, 2, 3, 4, 5, 6]\n//用push\nlet arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [6, 7, 8, 9, 10];\n\nArray.prototype.push.apply(arr1, arr2);\n```\n\n### 判断是否为数组\n//在 es5 中\nisArray 方法 Boolean\n//其他方法\narray.prototype.toString==\"object array\"\n","source":"_posts/2018-04-26-http-web综合问题.markdown","raw":"---\nlayout: post\ntitle: 'http-web综合问题'\ndate: 2017-09-08\ncategories:\n  - 前端面试\ndescription:\nimage: https://unsplash.it/2000/1200?image=900\nimage-sm: https://unsplash.it/2000/1200?image=900\n---\n\n# HTTP web 综合问题\n\n### 1.Html5 语义化理解\n\n- 用正确的标签做正确的事\n- html 语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析\n- 在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强\n- 让阅读源代码的人 更容易将网站分块 便于阅读维护理解\n\n### 2.HTML5 为什么只需要写<!DOCTYPE HTML>？\n\n- html5 不需要对 DTD（document type definition）进行引用，但是需要 doctype 来规范浏览器行为\n\n# CSS 部分\n\n### css 优先级\n\n- 载入样式以最后载入的定位为准\n\n- 优先级为:!important>行内>id>class>tag>通配符>继承>默认\n\nhttps://blog.csdn.net/qq_28300493/article/details/52297165\n\n### 说说你对 AMD 和 Commonjs 的理解\n\n- CommonJS 是`服务器端模块`的规范，`Node.js`采用了这个规范。CommonJS 规范加载模块是`同步`的，也就是说，只有加载完成，才能执行后面的操作。AMD 规范则是`非同步加载模块`，允许指定`回调函数`\n\n- AMD 推荐的风格通过返回`一个对象`做为模块对象，CommonJS 的风格通过对 module.exports 或 exports 的属性赋值来达到`暴露模块`对象的目的\n\n### 用过哪些设计模式？\n\n- 工厂模式\n  - 工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法\n  - 主要好处就是可以消除对象间的耦合，通过使用工程方法而不是 new 关键字\n\n工厂模式\n\n- 套路: 通过工厂函数动态创建对象并返回\n- 适用场景: 需要创建多个对象\n- 问题: 对象没有一个具体的类型, 都是 Object 类型\n  这是一个代码实例，更加形象:\n\n```js\n<script type=\"text/javascript\">\n  function createPerson(name, age) { //返回一个对象的函数===>工厂函数\n    var obj = {\n      name: name,\n      age: age,\n      setName: function (name) {\n        this.name = name\n      }\n    }\n\n    return obj\n  }\n\n  // 创建2个人\n  var p1 = createPerson('Tom', 12)\n  var p2 = createPerson('Bob', 13)\n\n  // p1/p2是Object类型\n\n  function createStudent(name, price) {\n    var obj = {\n      name: name,\n      price: price\n    }\n    return obj\n  }\n  var s = createStudent('张三', 12000)\n  // s也是Object\n</script>\n```\n\n- 构造函数模式\n  - 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于\n  - 直接将属性和方法赋值给 this 对象;\n\n自定义构造函数模式\n\n- 套路: 自定义构造函数, 通过 new 创建对象\n- 适用场景: 需要创建多个类型确定的对象\n- 问题: 每个对象都有相同的数据, 浪费内存\n\n```\n\t\t<script type=\"text/javascript\">\n\t\t\t//定义类型\n\t\t\tfunction Person(name, age) {\n\t\t\t\tthis.name = name\n\t\t\t\tthis.age = age\n\t\t\t\tthis.setName = function(name) {\n\t\t\t\t\tthis.name = name\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar p1 = new Person('Tom', 12)\n\t\t\tp1.setName('Jack')\n\t\t\tconsole.log(p1.name, p1.age)\n\t\t\tconsole.log(p1 instanceof Person)\n\n\t\t\tfunction Student(name, price) {\n\t\t\t\tthis.name = name\n\t\t\t\tthis.price = price\n\t\t\t}\n\t\t\tvar s = new Student('Bob', 13000)\n\t\t\tconsole.log(s instanceof Student)\n\n\t\t\tvar p2 = new Person('JACK', 23)\n\t\t\tconsole.log(p1, p2)\n\t\t</script>\n```\n\n### length 的巧妙用法\n\n```\n      var arr1=arr2=[1,2,3];\n\t\t\t//清空数组\n\t\t\tarr1.length=0;\n\t\t\tconsole.log(arr1,arr2);\n\t\t\t//output '' ''\n\t\t\t//截断array\n\t\t\tarr1.length=1;\n\t\t\tconsole.log(arr1,arr2);\n\t\t\t//output [1]\n```\n\n### 合并数组的巧妙方法\n\n```\n//普通方法 concat\narr1=[1,2,3]\n[1, 2, 3]\narr2=[4,5,6]\n[4, 5, 6]\narr1.concat(arr2)\n[1, 2, 3, 4, 5, 6]\n//用push\nlet arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [6, 7, 8, 9, 10];\n\nArray.prototype.push.apply(arr1, arr2);\n```\n\n### 判断是否为数组\n//在 es5 中\nisArray 方法 Boolean\n//其他方法\narray.prototype.toString==\"object array\"\n","slug":"2018-04-26-http-web综合问题","published":1,"updated":"2019-01-31T07:15:59.713Z","comments":1,"photos":[],"link":"","_id":"cjvaywf05001e5096ptvcmci5","content":"<h1 id=\"HTTP-web-综合问题\"><a href=\"#HTTP-web-综合问题\" class=\"headerlink\" title=\"HTTP web 综合问题\"></a>HTTP web 综合问题</h1><h3 id=\"1-Html5-语义化理解\"><a href=\"#1-Html5-语义化理解\" class=\"headerlink\" title=\"1.Html5 语义化理解\"></a>1.Html5 语义化理解</h3><ul>\n<li>用正确的标签做正确的事</li>\n<li>html 语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析</li>\n<li>在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强</li>\n<li>让阅读源代码的人 更容易将网站分块 便于阅读维护理解</li>\n</ul>\n<h3 id=\"2-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\"><a href=\"#2-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\" class=\"headerlink\" title=\"2.HTML5 为什么只需要写&lt;!DOCTYPE HTML&gt;？\"></a>2.HTML5 为什么只需要写&lt;!DOCTYPE HTML&gt;？</h3><ul>\n<li>html5 不需要对 DTD（document type definition）进行引用，但是需要 doctype 来规范浏览器行为</li>\n</ul>\n<h1 id=\"CSS-部分\"><a href=\"#CSS-部分\" class=\"headerlink\" title=\"CSS 部分\"></a>CSS 部分</h1><h3 id=\"css-优先级\"><a href=\"#css-优先级\" class=\"headerlink\" title=\"css 优先级\"></a>css 优先级</h3><ul>\n<li><p>载入样式以最后载入的定位为准</p>\n</li>\n<li><p>优先级为:!important&gt;行内&gt;id&gt;class&gt;tag&gt;通配符&gt;继承&gt;默认</p>\n</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_28300493/article/details/52297165\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_28300493/article/details/52297165</a></p>\n<h3 id=\"说说你对-AMD-和-Commonjs-的理解\"><a href=\"#说说你对-AMD-和-Commonjs-的理解\" class=\"headerlink\" title=\"说说你对 AMD 和 Commonjs 的理解\"></a>说说你对 AMD 和 Commonjs 的理解</h3><ul>\n<li><p>CommonJS 是<code>服务器端模块</code>的规范，<code>Node.js</code>采用了这个规范。CommonJS 规范加载模块是<code>同步</code>的，也就是说，只有加载完成，才能执行后面的操作。AMD 规范则是<code>非同步加载模块</code>，允许指定<code>回调函数</code></p>\n</li>\n<li><p>AMD 推荐的风格通过返回<code>一个对象</code>做为模块对象，CommonJS 的风格通过对 module.exports 或 exports 的属性赋值来达到<code>暴露模块</code>对象的目的</p>\n</li>\n</ul>\n<h3 id=\"用过哪些设计模式？\"><a href=\"#用过哪些设计模式？\" class=\"headerlink\" title=\"用过哪些设计模式？\"></a>用过哪些设计模式？</h3><ul>\n<li>工厂模式<ul>\n<li>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法</li>\n<li>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是 new 关键字</li>\n</ul>\n</li>\n</ul>\n<p>工厂模式</p>\n<ul>\n<li>套路: 通过工厂函数动态创建对象并返回</li>\n<li>适用场景: 需要创建多个对象</li>\n<li>问题: 对象没有一个具体的类型, 都是 Object 类型<br>这是一个代码实例，更加形象:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age</span>) </span>&#123; <span class=\"comment\">//返回一个对象的函数===&gt;工厂函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">      name: name,</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      setName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建2个人</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">'Tom'</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p2 = createPerson(<span class=\"string\">'Bob'</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// p1/p2是Object类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">name, price</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">      name: name,</span><br><span class=\"line\">      price: price</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s = createStudent(<span class=\"string\">'张三'</span>, <span class=\"number\">12000</span>)</span><br><span class=\"line\">  <span class=\"comment\">// s也是Object</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>构造函数模式<ul>\n<li>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于</li>\n<li>直接将属性和方法赋值给 this 对象;</li>\n</ul>\n</li>\n</ul>\n<p>自定义构造函数模式</p>\n<ul>\n<li>套路: 自定义构造函数, 通过 new 创建对象</li>\n<li>适用场景: 需要创建多个类型确定的对象</li>\n<li>问题: 每个对象都有相同的数据, 浪费内存</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t//定义类型</span><br><span class=\"line\">\tfunction Person(name, age) &#123;</span><br><span class=\"line\">\t\tthis.name = name</span><br><span class=\"line\">\t\tthis.age = age</span><br><span class=\"line\">\t\tthis.setName = function(name) &#123;</span><br><span class=\"line\">\t\t\tthis.name = name</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar p1 = new Person(&apos;Tom&apos;, 12)</span><br><span class=\"line\">\tp1.setName(&apos;Jack&apos;)</span><br><span class=\"line\">\tconsole.log(p1.name, p1.age)</span><br><span class=\"line\">\tconsole.log(p1 instanceof Person)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction Student(name, price) &#123;</span><br><span class=\"line\">\t\tthis.name = name</span><br><span class=\"line\">\t\tthis.price = price</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar s = new Student(&apos;Bob&apos;, 13000)</span><br><span class=\"line\">\tconsole.log(s instanceof Student)</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar p2 = new Person(&apos;JACK&apos;, 23)</span><br><span class=\"line\">\tconsole.log(p1, p2)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"length-的巧妙用法\"><a href=\"#length-的巧妙用法\" class=\"headerlink\" title=\"length 的巧妙用法\"></a>length 的巧妙用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var arr1=arr2=[1,2,3];</span><br><span class=\"line\">//清空数组</span><br><span class=\"line\">arr1.length=0;</span><br><span class=\"line\">console.log(arr1,arr2);</span><br><span class=\"line\">//output &apos;&apos; &apos;&apos;</span><br><span class=\"line\">//截断array</span><br><span class=\"line\">arr1.length=1;</span><br><span class=\"line\">console.log(arr1,arr2);</span><br><span class=\"line\">//output [1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并数组的巧妙方法\"><a href=\"#合并数组的巧妙方法\" class=\"headerlink\" title=\"合并数组的巧妙方法\"></a>合并数组的巧妙方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//普通方法 concat</span><br><span class=\"line\">arr1=[1,2,3]</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">arr2=[4,5,6]</span><br><span class=\"line\">[4, 5, 6]</span><br><span class=\"line\">arr1.concat(arr2)</span><br><span class=\"line\">[1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">//用push</span><br><span class=\"line\">let arr1 = [1, 2, 3, 4, 5];</span><br><span class=\"line\">let arr2 = [6, 7, 8, 9, 10];</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.push.apply(arr1, arr2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断是否为数组\"><a href=\"#判断是否为数组\" class=\"headerlink\" title=\"判断是否为数组\"></a>判断是否为数组</h3><p>//在 es5 中<br>isArray 方法 Boolean<br>//其他方法<br>array.prototype.toString==”object array”</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTP-web-综合问题\"><a href=\"#HTTP-web-综合问题\" class=\"headerlink\" title=\"HTTP web 综合问题\"></a>HTTP web 综合问题</h1><h3 id=\"1-Html5-语义化理解\"><a href=\"#1-Html5-语义化理解\" class=\"headerlink\" title=\"1.Html5 语义化理解\"></a>1.Html5 语义化理解</h3><ul>\n<li>用正确的标签做正确的事</li>\n<li>html 语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析</li>\n<li>在没有样式 CSS 情况下也可以以一种文档格式显示，可读性强</li>\n<li>让阅读源代码的人 更容易将网站分块 便于阅读维护理解</li>\n</ul>\n<h3 id=\"2-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\"><a href=\"#2-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\" class=\"headerlink\" title=\"2.HTML5 为什么只需要写&lt;!DOCTYPE HTML&gt;？\"></a>2.HTML5 为什么只需要写&lt;!DOCTYPE HTML&gt;？</h3><ul>\n<li>html5 不需要对 DTD（document type definition）进行引用，但是需要 doctype 来规范浏览器行为</li>\n</ul>\n<h1 id=\"CSS-部分\"><a href=\"#CSS-部分\" class=\"headerlink\" title=\"CSS 部分\"></a>CSS 部分</h1><h3 id=\"css-优先级\"><a href=\"#css-优先级\" class=\"headerlink\" title=\"css 优先级\"></a>css 优先级</h3><ul>\n<li><p>载入样式以最后载入的定位为准</p>\n</li>\n<li><p>优先级为:!important&gt;行内&gt;id&gt;class&gt;tag&gt;通配符&gt;继承&gt;默认</p>\n</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_28300493/article/details/52297165\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_28300493/article/details/52297165</a></p>\n<h3 id=\"说说你对-AMD-和-Commonjs-的理解\"><a href=\"#说说你对-AMD-和-Commonjs-的理解\" class=\"headerlink\" title=\"说说你对 AMD 和 Commonjs 的理解\"></a>说说你对 AMD 和 Commonjs 的理解</h3><ul>\n<li><p>CommonJS 是<code>服务器端模块</code>的规范，<code>Node.js</code>采用了这个规范。CommonJS 规范加载模块是<code>同步</code>的，也就是说，只有加载完成，才能执行后面的操作。AMD 规范则是<code>非同步加载模块</code>，允许指定<code>回调函数</code></p>\n</li>\n<li><p>AMD 推荐的风格通过返回<code>一个对象</code>做为模块对象，CommonJS 的风格通过对 module.exports 或 exports 的属性赋值来达到<code>暴露模块</code>对象的目的</p>\n</li>\n</ul>\n<h3 id=\"用过哪些设计模式？\"><a href=\"#用过哪些设计模式？\" class=\"headerlink\" title=\"用过哪些设计模式？\"></a>用过哪些设计模式？</h3><ul>\n<li>工厂模式<ul>\n<li>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法</li>\n<li>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是 new 关键字</li>\n</ul>\n</li>\n</ul>\n<p>工厂模式</p>\n<ul>\n<li>套路: 通过工厂函数动态创建对象并返回</li>\n<li>适用场景: 需要创建多个对象</li>\n<li>问题: 对象没有一个具体的类型, 都是 Object 类型<br>这是一个代码实例，更加形象:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age</span>) </span>&#123; <span class=\"comment\">//返回一个对象的函数===&gt;工厂函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">      name: name,</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      setName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建2个人</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">'Tom'</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p2 = createPerson(<span class=\"string\">'Bob'</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// p1/p2是Object类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">name, price</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">      name: name,</span><br><span class=\"line\">      price: price</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s = createStudent(<span class=\"string\">'张三'</span>, <span class=\"number\">12000</span>)</span><br><span class=\"line\">  <span class=\"comment\">// s也是Object</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>构造函数模式<ul>\n<li>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于</li>\n<li>直接将属性和方法赋值给 this 对象;</li>\n</ul>\n</li>\n</ul>\n<p>自定义构造函数模式</p>\n<ul>\n<li>套路: 自定义构造函数, 通过 new 创建对象</li>\n<li>适用场景: 需要创建多个类型确定的对象</li>\n<li>问题: 每个对象都有相同的数据, 浪费内存</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t//定义类型</span><br><span class=\"line\">\tfunction Person(name, age) &#123;</span><br><span class=\"line\">\t\tthis.name = name</span><br><span class=\"line\">\t\tthis.age = age</span><br><span class=\"line\">\t\tthis.setName = function(name) &#123;</span><br><span class=\"line\">\t\t\tthis.name = name</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar p1 = new Person(&apos;Tom&apos;, 12)</span><br><span class=\"line\">\tp1.setName(&apos;Jack&apos;)</span><br><span class=\"line\">\tconsole.log(p1.name, p1.age)</span><br><span class=\"line\">\tconsole.log(p1 instanceof Person)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction Student(name, price) &#123;</span><br><span class=\"line\">\t\tthis.name = name</span><br><span class=\"line\">\t\tthis.price = price</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar s = new Student(&apos;Bob&apos;, 13000)</span><br><span class=\"line\">\tconsole.log(s instanceof Student)</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar p2 = new Person(&apos;JACK&apos;, 23)</span><br><span class=\"line\">\tconsole.log(p1, p2)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"length-的巧妙用法\"><a href=\"#length-的巧妙用法\" class=\"headerlink\" title=\"length 的巧妙用法\"></a>length 的巧妙用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var arr1=arr2=[1,2,3];</span><br><span class=\"line\">//清空数组</span><br><span class=\"line\">arr1.length=0;</span><br><span class=\"line\">console.log(arr1,arr2);</span><br><span class=\"line\">//output &apos;&apos; &apos;&apos;</span><br><span class=\"line\">//截断array</span><br><span class=\"line\">arr1.length=1;</span><br><span class=\"line\">console.log(arr1,arr2);</span><br><span class=\"line\">//output [1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并数组的巧妙方法\"><a href=\"#合并数组的巧妙方法\" class=\"headerlink\" title=\"合并数组的巧妙方法\"></a>合并数组的巧妙方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//普通方法 concat</span><br><span class=\"line\">arr1=[1,2,3]</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">arr2=[4,5,6]</span><br><span class=\"line\">[4, 5, 6]</span><br><span class=\"line\">arr1.concat(arr2)</span><br><span class=\"line\">[1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">//用push</span><br><span class=\"line\">let arr1 = [1, 2, 3, 4, 5];</span><br><span class=\"line\">let arr2 = [6, 7, 8, 9, 10];</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.push.apply(arr1, arr2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断是否为数组\"><a href=\"#判断是否为数组\" class=\"headerlink\" title=\"判断是否为数组\"></a>判断是否为数组</h3><p>//在 es5 中<br>isArray 方法 Boolean<br>//其他方法<br>array.prototype.toString==”object array”</p>\n"},{"layout":"post","title":"css相关","date":"2018-04-26T16:00:00.000Z","description":"什么是CSS 预处理器 / 后处理器...","_content":"\n什么是CSS 预处理器 / 后处理器？﻿\n\n预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。﻿\n\n后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿\n\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\nCSS3有哪些新特性？﻿\n\n﻿新增各种CSS选择器\t（: not(.input)：所有 class 不是“input”的节点）﻿\n\n圆角\t（border-radius:8px）﻿\n\n多列布局\t（multi-column layout）﻿\n\n阴影和反射\t（Shadow\\Reflect）﻿\n\n文字特效\t（text-shadow、）﻿\n\n文字渲染\t（Text-decoration）﻿\n\n线性渐变\t（gradient）﻿\n\n旋转\t（transform）﻿\n\n缩放,定位,倾斜,动画,多背景﻿\n\n例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n\nposition的值relative和absolute定位原点是？﻿\n\nabsolute﻿\n\n生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。﻿\n\nfixed （老IE不支持）﻿\n\n生成绝对定位的元素，相对于浏览器窗口进行定位。﻿\n\nrelative﻿\n\n生成相对定位的元素，相对于其正常位置进行定位。﻿\n\nstatic﻿\n\n默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。﻿\n\ninherit﻿\n\n规定从父元素继承 position 属性的值\n\nhttps://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md\n\n用纯CSS创建一个三角形的原理是什么？﻿\n\n﻿把上、左、右三条边隐藏掉（颜色设为 transparent）﻿\n\n#demo {﻿\n\n  width: 0;﻿\n\n  height: 0;﻿\n\n  border-width: 20px;﻿\n\n  border-style: solid;﻿\n\n  border-color: transparent transparent red transparent;﻿\n\n}\n\n为什么要初始化CSS样式﻿\n\n﻿因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异﻿\n\n当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化﻿\n\n最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。\n\n让页面里的字体变清晰，变细用CSS怎么做？﻿\n\n-webkit-font-smoothing: antialiased;﻿\n\nfont-style属性可以让它赋值为“oblique” oblique是什么意思？﻿\n\n倾斜的字体样式\n\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿\n\n﻿多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\ncss居中的几种方法：\n\nhttps://juejin.im/entry/58aaaf03ac502e006972fd75\n","source":"_posts/2018-04-27-css相关.markdown","raw":"---\nlayout: post\ntitle: \"css相关\"\ndate: 2018-04-27\ncategories:\n  - css\n  - 前端面试\ndescription: 什么是CSS 预处理器 / 后处理器...\n---\n\n什么是CSS 预处理器 / 后处理器？﻿\n\n预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。﻿\n\n后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿\n\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\nCSS3有哪些新特性？﻿\n\n﻿新增各种CSS选择器\t（: not(.input)：所有 class 不是“input”的节点）﻿\n\n圆角\t（border-radius:8px）﻿\n\n多列布局\t（multi-column layout）﻿\n\n阴影和反射\t（Shadow\\Reflect）﻿\n\n文字特效\t（text-shadow、）﻿\n\n文字渲染\t（Text-decoration）﻿\n\n线性渐变\t（gradient）﻿\n\n旋转\t（transform）﻿\n\n缩放,定位,倾斜,动画,多背景﻿\n\n例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n\nposition的值relative和absolute定位原点是？﻿\n\nabsolute﻿\n\n生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。﻿\n\nfixed （老IE不支持）﻿\n\n生成绝对定位的元素，相对于浏览器窗口进行定位。﻿\n\nrelative﻿\n\n生成相对定位的元素，相对于其正常位置进行定位。﻿\n\nstatic﻿\n\n默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。﻿\n\ninherit﻿\n\n规定从父元素继承 position 属性的值\n\nhttps://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md\n\n用纯CSS创建一个三角形的原理是什么？﻿\n\n﻿把上、左、右三条边隐藏掉（颜色设为 transparent）﻿\n\n#demo {﻿\n\n  width: 0;﻿\n\n  height: 0;﻿\n\n  border-width: 20px;﻿\n\n  border-style: solid;﻿\n\n  border-color: transparent transparent red transparent;﻿\n\n}\n\n为什么要初始化CSS样式﻿\n\n﻿因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异﻿\n\n当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化﻿\n\n最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。\n\n让页面里的字体变清晰，变细用CSS怎么做？﻿\n\n-webkit-font-smoothing: antialiased;﻿\n\nfont-style属性可以让它赋值为“oblique” oblique是什么意思？﻿\n\n倾斜的字体样式\n\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿\n\n﻿多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\ncss居中的几种方法：\n\nhttps://juejin.im/entry/58aaaf03ac502e006972fd75\n","slug":"2018-04-27-css相关","published":1,"updated":"2019-01-31T07:15:59.713Z","comments":1,"photos":[],"link":"","_id":"cjvaywf08001h5096vxkgfilr","content":"<p>什么是CSS 预处理器 / 后处理器？﻿</p>\n<p>预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。﻿</p>\n<p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>\n<p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿</p>\n<p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>\n<p>CSS3有哪些新特性？﻿</p>\n<p>﻿新增各种CSS选择器    （: not(.input)：所有 class 不是“input”的节点）﻿</p>\n<p>圆角    （border-radius:8px）﻿</p>\n<p>多列布局    （multi-column layout）﻿</p>\n<p>阴影和反射    （Shadow\\Reflect）﻿</p>\n<p>文字特效    （text-shadow、）﻿</p>\n<p>文字渲染    （Text-decoration）﻿</p>\n<p>线性渐变    （gradient）﻿</p>\n<p>旋转    （transform）﻿</p>\n<p>缩放,定位,倾斜,动画,多背景﻿</p>\n<p>例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:</p>\n<p>position的值relative和absolute定位原点是？﻿</p>\n<p>absolute﻿</p>\n<p>生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。﻿</p>\n<p>fixed （老IE不支持）﻿</p>\n<p>生成绝对定位的元素，相对于浏览器窗口进行定位。﻿</p>\n<p>relative﻿</p>\n<p>生成相对定位的元素，相对于其正常位置进行定位。﻿</p>\n<p>static﻿</p>\n<p>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。﻿</p>\n<p>inherit﻿</p>\n<p>规定从父元素继承 position 属性的值</p>\n<p><a href=\"https://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md\" target=\"_blank\" rel=\"noopener\">https://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md</a></p>\n<p>用纯CSS创建一个三角形的原理是什么？﻿</p>\n<p>﻿把上、左、右三条边隐藏掉（颜色设为 transparent）﻿</p>\n<p>#demo {﻿</p>\n<p>  width: 0;﻿</p>\n<p>  height: 0;﻿</p>\n<p>  border-width: 20px;﻿</p>\n<p>  border-style: solid;﻿</p>\n<p>  border-color: transparent transparent red transparent;﻿</p>\n<p>}</p>\n<p>为什么要初始化CSS样式﻿</p>\n<p>﻿因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异﻿</p>\n<p>当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化﻿</p>\n<p>最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）</p>\n<p>想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。</p>\n<p>让页面里的字体变清晰，变细用CSS怎么做？﻿</p>\n<p>-webkit-font-smoothing: antialiased;﻿</p>\n<p>font-style属性可以让它赋值为“oblique” oblique是什么意思？﻿</p>\n<p>倾斜的字体样式</p>\n<p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿</p>\n<p>﻿多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>\n<p>css居中的几种方法：</p>\n<p><a href=\"https://juejin.im/entry/58aaaf03ac502e006972fd75\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58aaaf03ac502e006972fd75</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>什么是CSS 预处理器 / 后处理器？﻿</p>\n<p>预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。﻿</p>\n<p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>\n<p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿</p>\n<p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>\n<p>CSS3有哪些新特性？﻿</p>\n<p>﻿新增各种CSS选择器    （: not(.input)：所有 class 不是“input”的节点）﻿</p>\n<p>圆角    （border-radius:8px）﻿</p>\n<p>多列布局    （multi-column layout）﻿</p>\n<p>阴影和反射    （Shadow\\Reflect）﻿</p>\n<p>文字特效    （text-shadow、）﻿</p>\n<p>文字渲染    （Text-decoration）﻿</p>\n<p>线性渐变    （gradient）﻿</p>\n<p>旋转    （transform）﻿</p>\n<p>缩放,定位,倾斜,动画,多背景﻿</p>\n<p>例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:</p>\n<p>position的值relative和absolute定位原点是？﻿</p>\n<p>absolute﻿</p>\n<p>生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。﻿</p>\n<p>fixed （老IE不支持）﻿</p>\n<p>生成绝对定位的元素，相对于浏览器窗口进行定位。﻿</p>\n<p>relative﻿</p>\n<p>生成相对定位的元素，相对于其正常位置进行定位。﻿</p>\n<p>static﻿</p>\n<p>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。﻿</p>\n<p>inherit﻿</p>\n<p>规定从父元素继承 position 属性的值</p>\n<p><a href=\"https://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md\" target=\"_blank\" rel=\"noopener\">https://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md</a></p>\n<p>用纯CSS创建一个三角形的原理是什么？﻿</p>\n<p>﻿把上、左、右三条边隐藏掉（颜色设为 transparent）﻿</p>\n<p>#demo {﻿</p>\n<p>  width: 0;﻿</p>\n<p>  height: 0;﻿</p>\n<p>  border-width: 20px;﻿</p>\n<p>  border-style: solid;﻿</p>\n<p>  border-color: transparent transparent red transparent;﻿</p>\n<p>}</p>\n<p>为什么要初始化CSS样式﻿</p>\n<p>﻿因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异﻿</p>\n<p>当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化﻿</p>\n<p>最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）</p>\n<p>想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。</p>\n<p>让页面里的字体变清晰，变细用CSS怎么做？﻿</p>\n<p>-webkit-font-smoothing: antialiased;﻿</p>\n<p>font-style属性可以让它赋值为“oblique” oblique是什么意思？﻿</p>\n<p>倾斜的字体样式</p>\n<p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）﻿</p>\n<p>﻿多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>\n<p>css居中的几种方法：</p>\n<p><a href=\"https://juejin.im/entry/58aaaf03ac502e006972fd75\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58aaaf03ac502e006972fd75</a></p>\n"},{"layout":"post","title":"BFC来清除浮动","date":"2018-04-27T16:00:00.000Z","description":"BFC 就是块级格式化上下文","_content":"\nBFC 就是块级格式化上下文  想必大家都不陌生了\n\nBFC的渲染规则有4个:\n- BFC元素在垂直方向上，会发生边距重叠现象\n- BFC的区域是不会与float 浮动元素的区域发生重叠，这个主要是用于解决清除浮动，下面会用代码讲解这个\n- BFC是一个独立的容器，里面不会影响外面，外面也不会影响里面\n- BFC元素在计算高度的时候，是会把浮动元素的高度计算进去的。\n\n####说了这么多，先简单讲讲BFC如何清除浮动的吧\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Clear float</title>\n    <style type=\"text/css\">\n        .container{\n            margin: 30px auto;\n            width:600px;\n            height: 300px;\n        }\n        .p{\n            border:solid 3px #a33;\n        }\n        .c{\n            width: 100px;\n            height: 100px;\n            background-color: #060;\n            margin: 10px;\n            float: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"p\">\n            <div class=\"c\"></div>\n            <div class=\"c\"></div>\n            <div class=\"c\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n运行出来的效果是这样的:\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a661b300cb089931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n因为浮动元素是脱离文档流的，不占文档流的位置，所以这里的上下边距最后重合了，怎么解决这个问题呢？\n\n在这里引用BFC的第二点渲染规则   BFC区域是不会与浮动元素区域重叠的  \n\n```\n.p{\n            border:solid 3px #a33;\n            overflow: hidden;\n  }\n```\n\n这时候，我们将p设置为BFC后，效果如下:\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a863b28fa322e2ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\nfrom:https://www.cnblogs.com/dolphinX/p/3508869.html\n","source":"_posts/2018-04-28-BFC来清除浮动.markdown","raw":"---\nlayout: post\ntitle: \"BFC来清除浮动\"\ndate: 2018-04-28\ncategories:\n  - css\n  - 前端面试\ndescription: BFC 就是块级格式化上下文\n---\n\nBFC 就是块级格式化上下文  想必大家都不陌生了\n\nBFC的渲染规则有4个:\n- BFC元素在垂直方向上，会发生边距重叠现象\n- BFC的区域是不会与float 浮动元素的区域发生重叠，这个主要是用于解决清除浮动，下面会用代码讲解这个\n- BFC是一个独立的容器，里面不会影响外面，外面也不会影响里面\n- BFC元素在计算高度的时候，是会把浮动元素的高度计算进去的。\n\n####说了这么多，先简单讲讲BFC如何清除浮动的吧\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Clear float</title>\n    <style type=\"text/css\">\n        .container{\n            margin: 30px auto;\n            width:600px;\n            height: 300px;\n        }\n        .p{\n            border:solid 3px #a33;\n        }\n        .c{\n            width: 100px;\n            height: 100px;\n            background-color: #060;\n            margin: 10px;\n            float: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"p\">\n            <div class=\"c\"></div>\n            <div class=\"c\"></div>\n            <div class=\"c\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n运行出来的效果是这样的:\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a661b300cb089931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n因为浮动元素是脱离文档流的，不占文档流的位置，所以这里的上下边距最后重合了，怎么解决这个问题呢？\n\n在这里引用BFC的第二点渲染规则   BFC区域是不会与浮动元素区域重叠的  \n\n```\n.p{\n            border:solid 3px #a33;\n            overflow: hidden;\n  }\n```\n\n这时候，我们将p设置为BFC后，效果如下:\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a863b28fa322e2ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\nfrom:https://www.cnblogs.com/dolphinX/p/3508869.html\n","slug":"2018-04-28-BFC来清除浮动","published":1,"updated":"2019-01-31T07:15:59.714Z","comments":1,"photos":[],"link":"","_id":"cjvaywf0e001i50968utwguau","content":"<p>BFC 就是块级格式化上下文  想必大家都不陌生了</p>\n<p>BFC的渲染规则有4个:</p>\n<ul>\n<li>BFC元素在垂直方向上，会发生边距重叠现象</li>\n<li>BFC的区域是不会与float 浮动元素的区域发生重叠，这个主要是用于解决清除浮动，下面会用代码讲解这个</li>\n<li>BFC是一个独立的容器，里面不会影响外面，外面也不会影响里面</li>\n<li>BFC元素在计算高度的时候，是会把浮动元素的高度计算进去的。</li>\n</ul>\n<p>####说了这么多，先简单讲讲BFC如何清除浮动的吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Clear float&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .container&#123;</span><br><span class=\"line\">            margin: 30px auto;</span><br><span class=\"line\">            width:600px;</span><br><span class=\"line\">            height: 300px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .p&#123;</span><br><span class=\"line\">            border:solid 3px #a33;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .c&#123;</span><br><span class=\"line\">            width: 100px;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">            background-color: #060;</span><br><span class=\"line\">            margin: 10px;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行出来的效果是这样的:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a661b300cb089931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>因为浮动元素是脱离文档流的，不占文档流的位置，所以这里的上下边距最后重合了，怎么解决这个问题呢？</p>\n<p>在这里引用BFC的第二点渲染规则   BFC区域是不会与浮动元素区域重叠的  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.p&#123;</span><br><span class=\"line\">            border:solid 3px #a33;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，我们将p设置为BFC后，效果如下:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a863b28fa322e2ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>from:<a href=\"https://www.cnblogs.com/dolphinX/p/3508869.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dolphinX/p/3508869.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>BFC 就是块级格式化上下文  想必大家都不陌生了</p>\n<p>BFC的渲染规则有4个:</p>\n<ul>\n<li>BFC元素在垂直方向上，会发生边距重叠现象</li>\n<li>BFC的区域是不会与float 浮动元素的区域发生重叠，这个主要是用于解决清除浮动，下面会用代码讲解这个</li>\n<li>BFC是一个独立的容器，里面不会影响外面，外面也不会影响里面</li>\n<li>BFC元素在计算高度的时候，是会把浮动元素的高度计算进去的。</li>\n</ul>\n<p>####说了这么多，先简单讲讲BFC如何清除浮动的吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Clear float&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .container&#123;</span><br><span class=\"line\">            margin: 30px auto;</span><br><span class=\"line\">            width:600px;</span><br><span class=\"line\">            height: 300px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .p&#123;</span><br><span class=\"line\">            border:solid 3px #a33;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .c&#123;</span><br><span class=\"line\">            width: 100px;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">            background-color: #060;</span><br><span class=\"line\">            margin: 10px;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行出来的效果是这样的:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a661b300cb089931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>因为浮动元素是脱离文档流的，不占文档流的位置，所以这里的上下边距最后重合了，怎么解决这个问题呢？</p>\n<p>在这里引用BFC的第二点渲染规则   BFC区域是不会与浮动元素区域重叠的  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.p&#123;</span><br><span class=\"line\">            border:solid 3px #a33;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，我们将p设置为BFC后，效果如下:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a863b28fa322e2ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>from:<a href=\"https://www.cnblogs.com/dolphinX/p/3508869.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dolphinX/p/3508869.html</a></p>\n"},{"layout":"post","title":"JS this的理解与运用","date":"2018-04-30T16:00:00.000Z","description":"在函数执行的时候，this总是指向调用该函数的对象。要判断this的指向，其实就是判断this所在的函数属于谁。","_content":"\n在函数执行的时候，this总是指向调用该函数的对象。\n要判断this的指向，其实就是判断this所在的函数属于谁。\n\n在《JavaScript语言精粹》这本书中，把this出现的场景分为4类，简单说就是：\n\n###1. 有对象  就指向调用对象\n```\nvar myObject = {value:100};  \n myObject.getValue = function(){  \n     console.log(this.value);//输出100  \n     console.log(this);//输出 { value: 100, getValue: [Function] }  \n }  \n myObject.getValue();  \n// getValue() 属于对象 myObject，并由 myOjbect 进行 . 调用，因此 this 指向对象 myObject。 \n```\n\n###2.没调用对象就指向全局对象\n```\nvar myObject = { value: 100 };  \nmyObject.getValue = function() {  \n    var foo = function() {  \n        console.log(this.value) // 输出 undefined  \n        console.log(this); // 输出全局对象 global    \n         //foo 函数虽然定义在 getValue 的函数体内，但实际上它既不属于 getValue 也不属于 myObject。  \n        // foo 并没有被绑定在任何对象上，所以当调用时，它的 this 指针指向了全局对象 global。  \n    };  \n    foo();  \n    return this.value; //这个this 在 getValue中，从而指向 myObject。  \n};  \nconsole.log(myObject.getValue()); // 输出 100 \n```\n\n3) 用new构造就指向新对象         \n```\n//js 中，我们通过 new 关键词来调用构造函数，此时 this 会绑定在该新对象上。  \nvar SomeClass = function() {  \n    this.value = 100;  \n}  \nvar myCreate = new SomeClass();  \nconsole.log(myCreate.value); // 输出10\n```\n\n   4) 通过 apply 或 call 或 bind 来改变 this 的所指\n```\n// apply 和 call 调用以及 bind 绑定： 指向绑定的对象  \n// apply() 方法接受两个参数第一个是函数运行的作用域， 另外一个是一个参数数组(arguments)。  \n// call() 方法第一个参数的意义与 apply() 方法相同， 只是其他的参数需要一个个列举出来。  \n// 简单来说， call 的方式更接近我们平时调用函数， 而 apply 需要我们传递 Array 形式的数组给它。 它们是可以互相转换的。  \n//apply和call的功能是一样的，只是传入的参数列表形式不同。\n//var a1 = add.apply(sub,[4,2]);　　//sub调用add的方法\n/*call的用法*/\n//var a1 = add.call(sub,4,2);\nvar myObject = { value: 100 };  \nvar foo = function() {  \n    console.log(this);  \n};  \nfoo(); // 全局变量 global  \nfoo.apply(myObject); // { value: 100 }  \nfoo.call(myObject); // { value: 100 }  \nvar newFoo = foo.bind(myObject);  \nnewFoo(); // { value: 100 }</span>  \n```\n","source":"_posts/2018-05-01-JS this的理解与运用.markdown","raw":"---\nlayout: post\ntitle: \"JS this的理解与运用\"\ndate: 2018-05-01\ncategories:\n  - JavaScript\n  - 前端面试\ndescription: 在函数执行的时候，this总是指向调用该函数的对象。要判断this的指向，其实就是判断this所在的函数属于谁。\n---\n\n在函数执行的时候，this总是指向调用该函数的对象。\n要判断this的指向，其实就是判断this所在的函数属于谁。\n\n在《JavaScript语言精粹》这本书中，把this出现的场景分为4类，简单说就是：\n\n###1. 有对象  就指向调用对象\n```\nvar myObject = {value:100};  \n myObject.getValue = function(){  \n     console.log(this.value);//输出100  \n     console.log(this);//输出 { value: 100, getValue: [Function] }  \n }  \n myObject.getValue();  \n// getValue() 属于对象 myObject，并由 myOjbect 进行 . 调用，因此 this 指向对象 myObject。 \n```\n\n###2.没调用对象就指向全局对象\n```\nvar myObject = { value: 100 };  \nmyObject.getValue = function() {  \n    var foo = function() {  \n        console.log(this.value) // 输出 undefined  \n        console.log(this); // 输出全局对象 global    \n         //foo 函数虽然定义在 getValue 的函数体内，但实际上它既不属于 getValue 也不属于 myObject。  \n        // foo 并没有被绑定在任何对象上，所以当调用时，它的 this 指针指向了全局对象 global。  \n    };  \n    foo();  \n    return this.value; //这个this 在 getValue中，从而指向 myObject。  \n};  \nconsole.log(myObject.getValue()); // 输出 100 \n```\n\n3) 用new构造就指向新对象         \n```\n//js 中，我们通过 new 关键词来调用构造函数，此时 this 会绑定在该新对象上。  \nvar SomeClass = function() {  \n    this.value = 100;  \n}  \nvar myCreate = new SomeClass();  \nconsole.log(myCreate.value); // 输出10\n```\n\n   4) 通过 apply 或 call 或 bind 来改变 this 的所指\n```\n// apply 和 call 调用以及 bind 绑定： 指向绑定的对象  \n// apply() 方法接受两个参数第一个是函数运行的作用域， 另外一个是一个参数数组(arguments)。  \n// call() 方法第一个参数的意义与 apply() 方法相同， 只是其他的参数需要一个个列举出来。  \n// 简单来说， call 的方式更接近我们平时调用函数， 而 apply 需要我们传递 Array 形式的数组给它。 它们是可以互相转换的。  \n//apply和call的功能是一样的，只是传入的参数列表形式不同。\n//var a1 = add.apply(sub,[4,2]);　　//sub调用add的方法\n/*call的用法*/\n//var a1 = add.call(sub,4,2);\nvar myObject = { value: 100 };  \nvar foo = function() {  \n    console.log(this);  \n};  \nfoo(); // 全局变量 global  \nfoo.apply(myObject); // { value: 100 }  \nfoo.call(myObject); // { value: 100 }  \nvar newFoo = foo.bind(myObject);  \nnewFoo(); // { value: 100 }</span>  \n```\n","slug":"2018-05-01-JS this的理解与运用","published":1,"updated":"2019-01-31T07:15:59.715Z","comments":1,"photos":[],"link":"","_id":"cjvaywf0l001l5096uff7w2jr","content":"<p>在函数执行的时候，this总是指向调用该函数的对象。<br>要判断this的指向，其实就是判断this所在的函数属于谁。</p>\n<p>在《JavaScript语言精粹》这本书中，把this出现的场景分为4类，简单说就是：</p>\n<p>###1. 有对象  就指向调用对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myObject = &#123;value:100&#125;;  </span><br><span class=\"line\"> myObject.getValue = function()&#123;  </span><br><span class=\"line\">     console.log(this.value);//输出100  </span><br><span class=\"line\">     console.log(this);//输出 &#123; value: 100, getValue: [Function] &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"> myObject.getValue();  </span><br><span class=\"line\">// getValue() 属于对象 myObject，并由 myOjbect 进行 . 调用，因此 this 指向对象 myObject。</span><br></pre></td></tr></table></figure></p>\n<p>###2.没调用对象就指向全局对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myObject = &#123; value: 100 &#125;;  </span><br><span class=\"line\">myObject.getValue = function() &#123;  </span><br><span class=\"line\">    var foo = function() &#123;  </span><br><span class=\"line\">        console.log(this.value) // 输出 undefined  </span><br><span class=\"line\">        console.log(this); // 输出全局对象 global    </span><br><span class=\"line\">         //foo 函数虽然定义在 getValue 的函数体内，但实际上它既不属于 getValue 也不属于 myObject。  </span><br><span class=\"line\">        // foo 并没有被绑定在任何对象上，所以当调用时，它的 this 指针指向了全局对象 global。  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    foo();  </span><br><span class=\"line\">    return this.value; //这个this 在 getValue中，从而指向 myObject。  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">console.log(myObject.getValue()); // 输出 100</span><br></pre></td></tr></table></figure></p>\n<p>3) 用new构造就指向新对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//js 中，我们通过 new 关键词来调用构造函数，此时 this 会绑定在该新对象上。  </span><br><span class=\"line\">var SomeClass = function() &#123;  </span><br><span class=\"line\">    this.value = 100;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">var myCreate = new SomeClass();  </span><br><span class=\"line\">console.log(myCreate.value); // 输出10</span><br></pre></td></tr></table></figure></p>\n<p>   4) 通过 apply 或 call 或 bind 来改变 this 的所指<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// apply 和 call 调用以及 bind 绑定： 指向绑定的对象  </span><br><span class=\"line\">// apply() 方法接受两个参数第一个是函数运行的作用域， 另外一个是一个参数数组(arguments)。  </span><br><span class=\"line\">// call() 方法第一个参数的意义与 apply() 方法相同， 只是其他的参数需要一个个列举出来。  </span><br><span class=\"line\">// 简单来说， call 的方式更接近我们平时调用函数， 而 apply 需要我们传递 Array 形式的数组给它。 它们是可以互相转换的。  </span><br><span class=\"line\">//apply和call的功能是一样的，只是传入的参数列表形式不同。</span><br><span class=\"line\">//var a1 = add.apply(sub,[4,2]);　　//sub调用add的方法</span><br><span class=\"line\">/*call的用法*/</span><br><span class=\"line\">//var a1 = add.call(sub,4,2);</span><br><span class=\"line\">var myObject = &#123; value: 100 &#125;;  </span><br><span class=\"line\">var foo = function() &#123;  </span><br><span class=\"line\">    console.log(this);  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">foo(); // 全局变量 global  </span><br><span class=\"line\">foo.apply(myObject); // &#123; value: 100 &#125;  </span><br><span class=\"line\">foo.call(myObject); // &#123; value: 100 &#125;  </span><br><span class=\"line\">var newFoo = foo.bind(myObject);  </span><br><span class=\"line\">newFoo(); // &#123; value: 100 &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在函数执行的时候，this总是指向调用该函数的对象。<br>要判断this的指向，其实就是判断this所在的函数属于谁。</p>\n<p>在《JavaScript语言精粹》这本书中，把this出现的场景分为4类，简单说就是：</p>\n<p>###1. 有对象  就指向调用对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myObject = &#123;value:100&#125;;  </span><br><span class=\"line\"> myObject.getValue = function()&#123;  </span><br><span class=\"line\">     console.log(this.value);//输出100  </span><br><span class=\"line\">     console.log(this);//输出 &#123; value: 100, getValue: [Function] &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"> myObject.getValue();  </span><br><span class=\"line\">// getValue() 属于对象 myObject，并由 myOjbect 进行 . 调用，因此 this 指向对象 myObject。</span><br></pre></td></tr></table></figure></p>\n<p>###2.没调用对象就指向全局对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myObject = &#123; value: 100 &#125;;  </span><br><span class=\"line\">myObject.getValue = function() &#123;  </span><br><span class=\"line\">    var foo = function() &#123;  </span><br><span class=\"line\">        console.log(this.value) // 输出 undefined  </span><br><span class=\"line\">        console.log(this); // 输出全局对象 global    </span><br><span class=\"line\">         //foo 函数虽然定义在 getValue 的函数体内，但实际上它既不属于 getValue 也不属于 myObject。  </span><br><span class=\"line\">        // foo 并没有被绑定在任何对象上，所以当调用时，它的 this 指针指向了全局对象 global。  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    foo();  </span><br><span class=\"line\">    return this.value; //这个this 在 getValue中，从而指向 myObject。  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">console.log(myObject.getValue()); // 输出 100</span><br></pre></td></tr></table></figure></p>\n<p>3) 用new构造就指向新对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//js 中，我们通过 new 关键词来调用构造函数，此时 this 会绑定在该新对象上。  </span><br><span class=\"line\">var SomeClass = function() &#123;  </span><br><span class=\"line\">    this.value = 100;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">var myCreate = new SomeClass();  </span><br><span class=\"line\">console.log(myCreate.value); // 输出10</span><br></pre></td></tr></table></figure></p>\n<p>   4) 通过 apply 或 call 或 bind 来改变 this 的所指<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// apply 和 call 调用以及 bind 绑定： 指向绑定的对象  </span><br><span class=\"line\">// apply() 方法接受两个参数第一个是函数运行的作用域， 另外一个是一个参数数组(arguments)。  </span><br><span class=\"line\">// call() 方法第一个参数的意义与 apply() 方法相同， 只是其他的参数需要一个个列举出来。  </span><br><span class=\"line\">// 简单来说， call 的方式更接近我们平时调用函数， 而 apply 需要我们传递 Array 形式的数组给它。 它们是可以互相转换的。  </span><br><span class=\"line\">//apply和call的功能是一样的，只是传入的参数列表形式不同。</span><br><span class=\"line\">//var a1 = add.apply(sub,[4,2]);　　//sub调用add的方法</span><br><span class=\"line\">/*call的用法*/</span><br><span class=\"line\">//var a1 = add.call(sub,4,2);</span><br><span class=\"line\">var myObject = &#123; value: 100 &#125;;  </span><br><span class=\"line\">var foo = function() &#123;  </span><br><span class=\"line\">    console.log(this);  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">foo(); // 全局变量 global  </span><br><span class=\"line\">foo.apply(myObject); // &#123; value: 100 &#125;  </span><br><span class=\"line\">foo.call(myObject); // &#123; value: 100 &#125;  </span><br><span class=\"line\">var newFoo = foo.bind(myObject);  </span><br><span class=\"line\">newFoo(); // &#123; value: 100 &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"理解数据类型","date":"2018-05-01T16:00:00.000Z","description":"很多时候，我们都用到了数据，却没能完全理解他的一些类型，这里总结一下常见的容易错的点。","_content":"\n很多时候，我们都用到了数据，却没能完全理解他的一些类型，这里总结一下常见的容易错的点。\n\n- 分类（2大类）\n  * 基本值类型\n      * Number:任意数值\n      * String:任意文本\n      * Boolean:true/false\n      * undefined:undefined\n      * null:null\n  * 对象（引用）类型\n    * Object：一般对象类型\n    * Array：特别的对象类型（下标/内部数据有序）\n    * Function：特别的对象类型（可执行，类似于foo(),这里的()相当于执行标识符）\n\n- 判断\n   * typeof:\n        * 可以区别：数值、字符串、布尔值、undefined、function\n        * 不能区分：null与对象，一般对象与数组\n   * instanceof\n      * 专门用来判断对象数据的类型：Object、Array与Function\n    * ===\n        * 可以判断undefined和null\n-------------\n- undefined与null的区别？\n     * undefined代表只申明了没有赋值\n     * null代表赋值了, 只是值为null\n\n- 什么时候给变量赋值为null呢？\n  * var a=null  //a将指向一个对象，但是对象此时还没确定\n  * a=null  //让a指向的对象变成垃圾对象\n\n- 严格区别变量类型与数据类型？\n  * js的变量本身是没有类型的，变量的类型实际上是变量内存中的数据的类型\n  * 变量类型：\n      * 基本类型：保存基本类型数据的变量\n      * 引用类型：保存对象地址值的变量\n   * 数据对象\n      * 基本类型\n      *  对象类型\n\n这里我想简单引申一下堆和栈的概念，一般来说栈里面是保存2个东西：1.全局变量 2.局部变量 ；但是在堆里面只保存对象。\n\n简单代码演示:\n```\n// 1. undefined与null的区别?\n  var a1\n  var a2 = null\n  console.log(a1, a2)\n\t//输出 undefined null\n\t\n  // 2. 什么时候给变量赋值为null呢?\n    //初始\n  var a3 = null\n    //中间\n  var name = 'Tom'\n  var age = 12\n  a3 = {\n    name: name,\n    age: age\n  }\n    //结束\n  a3 = null\n```\n","source":"_posts/2018-05-02-理解数据类型.markdown","raw":"---\nlayout: post\ntitle: \"理解数据类型\"\ndate: 2018-05-02\ncategories:\n  - 前端面试\n  - JavaScript\ndescription: 很多时候，我们都用到了数据，却没能完全理解他的一些类型，这里总结一下常见的容易错的点。\n---\n\n很多时候，我们都用到了数据，却没能完全理解他的一些类型，这里总结一下常见的容易错的点。\n\n- 分类（2大类）\n  * 基本值类型\n      * Number:任意数值\n      * String:任意文本\n      * Boolean:true/false\n      * undefined:undefined\n      * null:null\n  * 对象（引用）类型\n    * Object：一般对象类型\n    * Array：特别的对象类型（下标/内部数据有序）\n    * Function：特别的对象类型（可执行，类似于foo(),这里的()相当于执行标识符）\n\n- 判断\n   * typeof:\n        * 可以区别：数值、字符串、布尔值、undefined、function\n        * 不能区分：null与对象，一般对象与数组\n   * instanceof\n      * 专门用来判断对象数据的类型：Object、Array与Function\n    * ===\n        * 可以判断undefined和null\n-------------\n- undefined与null的区别？\n     * undefined代表只申明了没有赋值\n     * null代表赋值了, 只是值为null\n\n- 什么时候给变量赋值为null呢？\n  * var a=null  //a将指向一个对象，但是对象此时还没确定\n  * a=null  //让a指向的对象变成垃圾对象\n\n- 严格区别变量类型与数据类型？\n  * js的变量本身是没有类型的，变量的类型实际上是变量内存中的数据的类型\n  * 变量类型：\n      * 基本类型：保存基本类型数据的变量\n      * 引用类型：保存对象地址值的变量\n   * 数据对象\n      * 基本类型\n      *  对象类型\n\n这里我想简单引申一下堆和栈的概念，一般来说栈里面是保存2个东西：1.全局变量 2.局部变量 ；但是在堆里面只保存对象。\n\n简单代码演示:\n```\n// 1. undefined与null的区别?\n  var a1\n  var a2 = null\n  console.log(a1, a2)\n\t//输出 undefined null\n\t\n  // 2. 什么时候给变量赋值为null呢?\n    //初始\n  var a3 = null\n    //中间\n  var name = 'Tom'\n  var age = 12\n  a3 = {\n    name: name,\n    age: age\n  }\n    //结束\n  a3 = null\n```\n","slug":"2018-05-02-理解数据类型","published":1,"updated":"2019-01-31T07:15:59.716Z","comments":1,"photos":[],"link":"","_id":"cjvaywf0n001n5096g0nu6a5o","content":"<p>很多时候，我们都用到了数据，却没能完全理解他的一些类型，这里总结一下常见的容易错的点。</p>\n<ul>\n<li><p>分类（2大类）</p>\n<ul>\n<li>基本值类型<ul>\n<li>Number:任意数值</li>\n<li>String:任意文本</li>\n<li>Boolean:true/false</li>\n<li>undefined:undefined</li>\n<li>null:null</li>\n</ul>\n</li>\n<li>对象（引用）类型<ul>\n<li>Object：一般对象类型</li>\n<li>Array：特别的对象类型（下标/内部数据有序）</li>\n<li>Function：特别的对象类型（可执行，类似于foo(),这里的()相当于执行标识符）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>判断</p>\n<ul>\n<li>typeof:<ul>\n<li>可以区别：数值、字符串、布尔值、undefined、function</li>\n<li>不能区分：null与对象，一般对象与数组</li>\n</ul>\n</li>\n<li>instanceof<ul>\n<li>专门用来判断对象数据的类型：Object、Array与Function<ul>\n<li>===</li>\n<li>可以判断undefined和null</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>undefined与null的区别？</p>\n<ul>\n<li>undefined代表只申明了没有赋值</li>\n<li>null代表赋值了, 只是值为null</li>\n</ul>\n</li>\n<li><p>什么时候给变量赋值为null呢？</p>\n<ul>\n<li>var a=null  //a将指向一个对象，但是对象此时还没确定</li>\n<li>a=null  //让a指向的对象变成垃圾对象</li>\n</ul>\n</li>\n<li><p>严格区别变量类型与数据类型？</p>\n<ul>\n<li>js的变量本身是没有类型的，变量的类型实际上是变量内存中的数据的类型</li>\n<li>变量类型：<ul>\n<li>基本类型：保存基本类型数据的变量</li>\n<li>引用类型：保存对象地址值的变量<ul>\n<li>数据对象</li>\n</ul>\n</li>\n<li>基本类型</li>\n<li>对象类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>这里我想简单引申一下堆和栈的概念，一般来说栈里面是保存2个东西：1.全局变量 2.局部变量 ；但是在堆里面只保存对象。</p>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. undefined与null的区别?</span><br><span class=\"line\">  var a1</span><br><span class=\"line\">  var a2 = null</span><br><span class=\"line\">  console.log(a1, a2)</span><br><span class=\"line\">\t//输出 undefined null</span><br><span class=\"line\">\t</span><br><span class=\"line\">  // 2. 什么时候给变量赋值为null呢?</span><br><span class=\"line\">    //初始</span><br><span class=\"line\">  var a3 = null</span><br><span class=\"line\">    //中间</span><br><span class=\"line\">  var name = &apos;Tom&apos;</span><br><span class=\"line\">  var age = 12</span><br><span class=\"line\">  a3 = &#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    age: age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    //结束</span><br><span class=\"line\">  a3 = null</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很多时候，我们都用到了数据，却没能完全理解他的一些类型，这里总结一下常见的容易错的点。</p>\n<ul>\n<li><p>分类（2大类）</p>\n<ul>\n<li>基本值类型<ul>\n<li>Number:任意数值</li>\n<li>String:任意文本</li>\n<li>Boolean:true/false</li>\n<li>undefined:undefined</li>\n<li>null:null</li>\n</ul>\n</li>\n<li>对象（引用）类型<ul>\n<li>Object：一般对象类型</li>\n<li>Array：特别的对象类型（下标/内部数据有序）</li>\n<li>Function：特别的对象类型（可执行，类似于foo(),这里的()相当于执行标识符）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>判断</p>\n<ul>\n<li>typeof:<ul>\n<li>可以区别：数值、字符串、布尔值、undefined、function</li>\n<li>不能区分：null与对象，一般对象与数组</li>\n</ul>\n</li>\n<li>instanceof<ul>\n<li>专门用来判断对象数据的类型：Object、Array与Function<ul>\n<li>===</li>\n<li>可以判断undefined和null</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>undefined与null的区别？</p>\n<ul>\n<li>undefined代表只申明了没有赋值</li>\n<li>null代表赋值了, 只是值为null</li>\n</ul>\n</li>\n<li><p>什么时候给变量赋值为null呢？</p>\n<ul>\n<li>var a=null  //a将指向一个对象，但是对象此时还没确定</li>\n<li>a=null  //让a指向的对象变成垃圾对象</li>\n</ul>\n</li>\n<li><p>严格区别变量类型与数据类型？</p>\n<ul>\n<li>js的变量本身是没有类型的，变量的类型实际上是变量内存中的数据的类型</li>\n<li>变量类型：<ul>\n<li>基本类型：保存基本类型数据的变量</li>\n<li>引用类型：保存对象地址值的变量<ul>\n<li>数据对象</li>\n</ul>\n</li>\n<li>基本类型</li>\n<li>对象类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>这里我想简单引申一下堆和栈的概念，一般来说栈里面是保存2个东西：1.全局变量 2.局部变量 ；但是在堆里面只保存对象。</p>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. undefined与null的区别?</span><br><span class=\"line\">  var a1</span><br><span class=\"line\">  var a2 = null</span><br><span class=\"line\">  console.log(a1, a2)</span><br><span class=\"line\">\t//输出 undefined null</span><br><span class=\"line\">\t</span><br><span class=\"line\">  // 2. 什么时候给变量赋值为null呢?</span><br><span class=\"line\">    //初始</span><br><span class=\"line\">  var a3 = null</span><br><span class=\"line\">    //中间</span><br><span class=\"line\">  var name = &apos;Tom&apos;</span><br><span class=\"line\">  var age = 12</span><br><span class=\"line\">  a3 = &#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    age: age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    //结束</span><br><span class=\"line\">  a3 = null</span><br></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"数据-变量-内存 详解","date":"2018-05-02T16:00:00.000Z","description":"这篇文章主要详解讲解 数据-变量-内存的详细意义，同时理一理它们之间的关系。","_content":"\n这篇文章主要详解讲解 数据-变量-内存的详细意义，同时理一理它们之间的关系。\n\n- 什么是数据？\n  *  我们可以这样理解：存储于内存中代表特定信息的‘东东’。本质就是0101..二进制\n  * 具有可读和可传递的基本特性\n  * 万物（一切）皆数据，函数也是数据\n  * 程序中所有操作的目标：数据\n      * 算术运算\n      * 逻辑运算\n      *  赋值\n      * 调用参数传参\n      *  函数运行，类似:foo ()  这里可以把()当做运行标识符操作\n\n--------\n- 什么是内存？\n  * 内存条通电后产生的存储空间（临时的）\n  * 产生和死亡：内存条（集成电路板）===>通电===>产生一定容量的存储空间===>存储各种数据===>断电===>内存全部消失\n  * 内存的空间是临时的，而硬盘的空间是持久的，但是内存的效率高于硬盘，各有优缺\n  * 分配内存：声明变量和函数或创建对象的时候，JS引擎会自动为此分配一定大小的内存来存放对应的数据\n  * 释放内存：清空内存中的数据，标识内存可以再分配使用（内存不释放就不能复用）\n    * 自动释放：栈空间的局部变量\n    * 垃圾回调器回调：堆空间的垃圾对象\n  * 一块内存包含2个数据\n     * 内存存储的数据（一般数据/地址数据）\n     * 内存地址值数据\n  * 内存分类\n    * 栈：全局变量，局部变量（这些空间较小）\n    * 堆：对象（空间较大，还可以用于存放代码等）\n-------\n- 什么是变量？\n  * 值可以变化的量，由变量名与变量值组成\n  * 一个变量对应一块小内存，变量名用来查找到内存，变量值就是内存中保存的内容\n--------\n- 内存-数据-变量三者之间的关系\n  * 内存是一个容器，用于存储程序运行需要操作的数据\n  * 变量是内存的标识，我们通过变量找到相应的内存，进而操作（读/写）内存中的数据\n\n简单代码演示:\n```\n var a1 = 3   //这个就是基础数据类型\n  var a2 = a1 + 4\t\t\t//这里的al就是3，然后进行算术计算\n  var a3 = {}\t\t\t//这个就是引用类型，a3里面是对象的地址\n  a3.name = 'Tom'\t\t//name相当于对象中TOM这个值的标识名\n ```\n---------\n#关于赋值和内存的问题\n\n这里先扔出一个问题：\n\n- 问题：var a=xxx，a内存中保存的是什么？\n  * xxx是一个基本数据\n  * xxx是一个对象\n  * xxx是一个变量\n\n简单代码演示:\n```\nvar a = 3      //a内存中保存的就是3\n  a = function () {\n\n  }       ///a内存保存的是对象的地址\n\nvar b = 'abc'    //b内存中保存的是‘abc’\na = b\t\t\t\t\t//a内存保存的就是b内存的内容，即‘abc’\nb = []\t\t\t\t\t//b内存保存的是array的地址\na = b         //a内存保存的就是b内存的内容，即array的地址\n```\n\n--------\n#关于引用变量赋值问题\n\n- 关于引用变量赋值问题\n  * 2个引用变量指向同一个对象，通过一个引用变量修改对象内部数据，另一个引用变量也看得见\n  * 2个引用变量指向同一个对象，让一个引用变量指向另一个对象，另一个引用变量还是指向原来的对象\n\n```\n  //1. 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见\n  var obj1 = {}\n  var obj2 = obj1\n  obj2.name = 'Tom'\n  console.log(obj1.name)   //输出Tom\n  function f1(obj) {\n    obj.age = 12\n  }\n  f1(obj2)\n  console.log(obj1.age)\n//输出 12\n\n  //2. 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象\n  var obj3 = {name: 'Tom'}\n  var obj4 = obj3\n  obj3 = {name: 'JACK'}\n  console.log(obj4.name)   //输出 Tom\n```\n\n----------\n\n#关于数据传递问题\n\n- 问题：在js调用函数时传递变量参数时，是值传递还是引用传递\n  * 只有值传递，没有引用传递，传递的都是变量的值，只是这个值可能是基本数据，也可能是地址（引用）数据\n  * 如果后一种看成是引用传递，那值传递和引用传递都可以有\n\n简单代码演示:\n```\n  function f(a) {\n    console.log(a)\n  }\n  var n = 4\n  f(n) //传递的是n的值 --->值传递\n//输出4\n\n  function f2(a) {\n    a.name = 'atguigu'\n  }\n  n = {}\n  f2(n) // 传递的是n指向的对象 ---> 引用传递   ???  传的智商n里面的内容  也就是{}的地址\n  console.log(n.name)\n  //输出atguigu\n```\n-----------\n#JS引擎如何管理内存？\n\n- 内存生命周期\n  * 分配需要的内存\n  * 使用分配到的内存\n  * 不需要时将其释放/归还\n- 释放内存\n  * 为执行函数分配的栈空间内存：函数执行完自动释放\n  * 存储对象的堆空间内存：当内存没有引用指向时，对象成为垃圾对象，垃圾回收器后面就会回收释放此内存\n\n```\n  var obj = {}\n  obj = null // ?\n //内存还有obj，并且它的值为null\n\n  function fn () {\n    var a = 3\n    var b = {}\n  }\n  fn() // ?\n  //内存中已经没有a和b了  但是有fn\n```\n","source":"_posts/2018-05-03-数据-变量-内存 详解.markdown","raw":"---\nlayout: post\ntitle: \"数据-变量-内存 详解\"\ndate: 2018-05-03\ncategories:\n  - JavaScript\n  - 前端面试\ndescription: 这篇文章主要详解讲解 数据-变量-内存的详细意义，同时理一理它们之间的关系。\n---\n\n这篇文章主要详解讲解 数据-变量-内存的详细意义，同时理一理它们之间的关系。\n\n- 什么是数据？\n  *  我们可以这样理解：存储于内存中代表特定信息的‘东东’。本质就是0101..二进制\n  * 具有可读和可传递的基本特性\n  * 万物（一切）皆数据，函数也是数据\n  * 程序中所有操作的目标：数据\n      * 算术运算\n      * 逻辑运算\n      *  赋值\n      * 调用参数传参\n      *  函数运行，类似:foo ()  这里可以把()当做运行标识符操作\n\n--------\n- 什么是内存？\n  * 内存条通电后产生的存储空间（临时的）\n  * 产生和死亡：内存条（集成电路板）===>通电===>产生一定容量的存储空间===>存储各种数据===>断电===>内存全部消失\n  * 内存的空间是临时的，而硬盘的空间是持久的，但是内存的效率高于硬盘，各有优缺\n  * 分配内存：声明变量和函数或创建对象的时候，JS引擎会自动为此分配一定大小的内存来存放对应的数据\n  * 释放内存：清空内存中的数据，标识内存可以再分配使用（内存不释放就不能复用）\n    * 自动释放：栈空间的局部变量\n    * 垃圾回调器回调：堆空间的垃圾对象\n  * 一块内存包含2个数据\n     * 内存存储的数据（一般数据/地址数据）\n     * 内存地址值数据\n  * 内存分类\n    * 栈：全局变量，局部变量（这些空间较小）\n    * 堆：对象（空间较大，还可以用于存放代码等）\n-------\n- 什么是变量？\n  * 值可以变化的量，由变量名与变量值组成\n  * 一个变量对应一块小内存，变量名用来查找到内存，变量值就是内存中保存的内容\n--------\n- 内存-数据-变量三者之间的关系\n  * 内存是一个容器，用于存储程序运行需要操作的数据\n  * 变量是内存的标识，我们通过变量找到相应的内存，进而操作（读/写）内存中的数据\n\n简单代码演示:\n```\n var a1 = 3   //这个就是基础数据类型\n  var a2 = a1 + 4\t\t\t//这里的al就是3，然后进行算术计算\n  var a3 = {}\t\t\t//这个就是引用类型，a3里面是对象的地址\n  a3.name = 'Tom'\t\t//name相当于对象中TOM这个值的标识名\n ```\n---------\n#关于赋值和内存的问题\n\n这里先扔出一个问题：\n\n- 问题：var a=xxx，a内存中保存的是什么？\n  * xxx是一个基本数据\n  * xxx是一个对象\n  * xxx是一个变量\n\n简单代码演示:\n```\nvar a = 3      //a内存中保存的就是3\n  a = function () {\n\n  }       ///a内存保存的是对象的地址\n\nvar b = 'abc'    //b内存中保存的是‘abc’\na = b\t\t\t\t\t//a内存保存的就是b内存的内容，即‘abc’\nb = []\t\t\t\t\t//b内存保存的是array的地址\na = b         //a内存保存的就是b内存的内容，即array的地址\n```\n\n--------\n#关于引用变量赋值问题\n\n- 关于引用变量赋值问题\n  * 2个引用变量指向同一个对象，通过一个引用变量修改对象内部数据，另一个引用变量也看得见\n  * 2个引用变量指向同一个对象，让一个引用变量指向另一个对象，另一个引用变量还是指向原来的对象\n\n```\n  //1. 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见\n  var obj1 = {}\n  var obj2 = obj1\n  obj2.name = 'Tom'\n  console.log(obj1.name)   //输出Tom\n  function f1(obj) {\n    obj.age = 12\n  }\n  f1(obj2)\n  console.log(obj1.age)\n//输出 12\n\n  //2. 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象\n  var obj3 = {name: 'Tom'}\n  var obj4 = obj3\n  obj3 = {name: 'JACK'}\n  console.log(obj4.name)   //输出 Tom\n```\n\n----------\n\n#关于数据传递问题\n\n- 问题：在js调用函数时传递变量参数时，是值传递还是引用传递\n  * 只有值传递，没有引用传递，传递的都是变量的值，只是这个值可能是基本数据，也可能是地址（引用）数据\n  * 如果后一种看成是引用传递，那值传递和引用传递都可以有\n\n简单代码演示:\n```\n  function f(a) {\n    console.log(a)\n  }\n  var n = 4\n  f(n) //传递的是n的值 --->值传递\n//输出4\n\n  function f2(a) {\n    a.name = 'atguigu'\n  }\n  n = {}\n  f2(n) // 传递的是n指向的对象 ---> 引用传递   ???  传的智商n里面的内容  也就是{}的地址\n  console.log(n.name)\n  //输出atguigu\n```\n-----------\n#JS引擎如何管理内存？\n\n- 内存生命周期\n  * 分配需要的内存\n  * 使用分配到的内存\n  * 不需要时将其释放/归还\n- 释放内存\n  * 为执行函数分配的栈空间内存：函数执行完自动释放\n  * 存储对象的堆空间内存：当内存没有引用指向时，对象成为垃圾对象，垃圾回收器后面就会回收释放此内存\n\n```\n  var obj = {}\n  obj = null // ?\n //内存还有obj，并且它的值为null\n\n  function fn () {\n    var a = 3\n    var b = {}\n  }\n  fn() // ?\n  //内存中已经没有a和b了  但是有fn\n```\n","slug":"2018-05-03-数据-变量-内存 详解","published":1,"updated":"2019-01-31T07:15:59.716Z","comments":1,"photos":[],"link":"","_id":"cjvaywf0s001p50965qukpqor","content":"<p>这篇文章主要详解讲解 数据-变量-内存的详细意义，同时理一理它们之间的关系。</p>\n<ul>\n<li>什么是数据？<ul>\n<li>我们可以这样理解：存储于内存中代表特定信息的‘东东’。本质就是0101..二进制</li>\n<li>具有可读和可传递的基本特性</li>\n<li>万物（一切）皆数据，函数也是数据</li>\n<li>程序中所有操作的目标：数据<ul>\n<li>算术运算</li>\n<li>逻辑运算</li>\n<li>赋值</li>\n<li>调用参数传参</li>\n<li>函数运行，类似:foo ()  这里可以把()当做运行标识符操作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>什么是内存？<ul>\n<li>内存条通电后产生的存储空间（临时的）</li>\n<li>产生和死亡：内存条（集成电路板）===&gt;通电===&gt;产生一定容量的存储空间===&gt;存储各种数据===&gt;断电===&gt;内存全部消失</li>\n<li>内存的空间是临时的，而硬盘的空间是持久的，但是内存的效率高于硬盘，各有优缺</li>\n<li>分配内存：声明变量和函数或创建对象的时候，JS引擎会自动为此分配一定大小的内存来存放对应的数据</li>\n<li>释放内存：清空内存中的数据，标识内存可以再分配使用（内存不释放就不能复用）<ul>\n<li>自动释放：栈空间的局部变量</li>\n<li>垃圾回调器回调：堆空间的垃圾对象</li>\n</ul>\n</li>\n<li>一块内存包含2个数据<ul>\n<li>内存存储的数据（一般数据/地址数据）</li>\n<li>内存地址值数据</li>\n</ul>\n</li>\n<li>内存分类<ul>\n<li>栈：全局变量，局部变量（这些空间较小）</li>\n<li>堆：对象（空间较大，还可以用于存放代码等）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>什么是变量？<ul>\n<li>值可以变化的量，由变量名与变量值组成</li>\n<li>一个变量对应一块小内存，变量名用来查找到内存，变量值就是内存中保存的内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>内存-数据-变量三者之间的关系<ul>\n<li>内存是一个容器，用于存储程序运行需要操作的数据</li>\n<li>变量是内存的标识，我们通过变量找到相应的内存，进而操作（读/写）内存中的数据</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a1 = 3   //这个就是基础数据类型</span><br><span class=\"line\"> var a2 = a1 + 4\t\t\t//这里的al就是3，然后进行算术计算</span><br><span class=\"line\"> var a3 = &#123;&#125;\t\t\t//这个就是引用类型，a3里面是对象的地址</span><br><span class=\"line\"> a3.name = &apos;Tom&apos;\t\t//name相当于对象中TOM这个值的标识名</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#关于赋值和内存的问题</p>\n<p>这里先扔出一个问题：</p>\n<ul>\n<li>问题：var a=xxx，a内存中保存的是什么？<ul>\n<li>xxx是一个基本数据</li>\n<li>xxx是一个对象</li>\n<li>xxx是一个变量</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3      //a内存中保存的就是3</span><br><span class=\"line\">  a = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;       ///a内存保存的是对象的地址</span><br><span class=\"line\"></span><br><span class=\"line\">var b = &apos;abc&apos;    //b内存中保存的是‘abc’</span><br><span class=\"line\">a = b\t\t\t\t\t//a内存保存的就是b内存的内容，即‘abc’</span><br><span class=\"line\">b = []\t\t\t\t\t//b内存保存的是array的地址</span><br><span class=\"line\">a = b         //a内存保存的就是b内存的内容，即array的地址</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#关于引用变量赋值问题</p>\n<ul>\n<li>关于引用变量赋值问题<ul>\n<li>2个引用变量指向同一个对象，通过一个引用变量修改对象内部数据，另一个引用变量也看得见</li>\n<li>2个引用变量指向同一个对象，让一个引用变量指向另一个对象，另一个引用变量还是指向原来的对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //1. 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见</span><br><span class=\"line\">  var obj1 = &#123;&#125;</span><br><span class=\"line\">  var obj2 = obj1</span><br><span class=\"line\">  obj2.name = &apos;Tom&apos;</span><br><span class=\"line\">  console.log(obj1.name)   //输出Tom</span><br><span class=\"line\">  function f1(obj) &#123;</span><br><span class=\"line\">    obj.age = 12</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  f1(obj2)</span><br><span class=\"line\">  console.log(obj1.age)</span><br><span class=\"line\">//输出 12</span><br><span class=\"line\"></span><br><span class=\"line\">  //2. 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象</span><br><span class=\"line\">  var obj3 = &#123;name: &apos;Tom&apos;&#125;</span><br><span class=\"line\">  var obj4 = obj3</span><br><span class=\"line\">  obj3 = &#123;name: &apos;JACK&apos;&#125;</span><br><span class=\"line\">  console.log(obj4.name)   //输出 Tom</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#关于数据传递问题</p>\n<ul>\n<li>问题：在js调用函数时传递变量参数时，是值传递还是引用传递<ul>\n<li>只有值传递，没有引用传递，传递的都是变量的值，只是这个值可能是基本数据，也可能是地址（引用）数据</li>\n<li>如果后一种看成是引用传递，那值传递和引用传递都可以有</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function f(a) &#123;</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var n = 4</span><br><span class=\"line\">  f(n) //传递的是n的值 ---&gt;值传递</span><br><span class=\"line\">//输出4</span><br><span class=\"line\"></span><br><span class=\"line\">  function f2(a) &#123;</span><br><span class=\"line\">    a.name = &apos;atguigu&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  n = &#123;&#125;</span><br><span class=\"line\">  f2(n) // 传递的是n指向的对象 ---&gt; 引用传递   ???  传的智商n里面的内容  也就是&#123;&#125;的地址</span><br><span class=\"line\">  console.log(n.name)</span><br><span class=\"line\">  //输出atguigu</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#JS引擎如何管理内存？</p>\n<ul>\n<li>内存生命周期<ul>\n<li>分配需要的内存</li>\n<li>使用分配到的内存</li>\n<li>不需要时将其释放/归还</li>\n</ul>\n</li>\n<li>释放内存<ul>\n<li>为执行函数分配的栈空间内存：函数执行完自动释放</li>\n<li>存储对象的堆空间内存：当内存没有引用指向时，对象成为垃圾对象，垃圾回收器后面就会回收释放此内存</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var obj = &#123;&#125;</span><br><span class=\"line\"> obj = null // ?</span><br><span class=\"line\">//内存还有obj，并且它的值为null</span><br><span class=\"line\"></span><br><span class=\"line\"> function fn () &#123;</span><br><span class=\"line\">   var a = 3</span><br><span class=\"line\">   var b = &#123;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> fn() // ?</span><br><span class=\"line\"> //内存中已经没有a和b了  但是有fn</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章主要详解讲解 数据-变量-内存的详细意义，同时理一理它们之间的关系。</p>\n<ul>\n<li>什么是数据？<ul>\n<li>我们可以这样理解：存储于内存中代表特定信息的‘东东’。本质就是0101..二进制</li>\n<li>具有可读和可传递的基本特性</li>\n<li>万物（一切）皆数据，函数也是数据</li>\n<li>程序中所有操作的目标：数据<ul>\n<li>算术运算</li>\n<li>逻辑运算</li>\n<li>赋值</li>\n<li>调用参数传参</li>\n<li>函数运行，类似:foo ()  这里可以把()当做运行标识符操作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>什么是内存？<ul>\n<li>内存条通电后产生的存储空间（临时的）</li>\n<li>产生和死亡：内存条（集成电路板）===&gt;通电===&gt;产生一定容量的存储空间===&gt;存储各种数据===&gt;断电===&gt;内存全部消失</li>\n<li>内存的空间是临时的，而硬盘的空间是持久的，但是内存的效率高于硬盘，各有优缺</li>\n<li>分配内存：声明变量和函数或创建对象的时候，JS引擎会自动为此分配一定大小的内存来存放对应的数据</li>\n<li>释放内存：清空内存中的数据，标识内存可以再分配使用（内存不释放就不能复用）<ul>\n<li>自动释放：栈空间的局部变量</li>\n<li>垃圾回调器回调：堆空间的垃圾对象</li>\n</ul>\n</li>\n<li>一块内存包含2个数据<ul>\n<li>内存存储的数据（一般数据/地址数据）</li>\n<li>内存地址值数据</li>\n</ul>\n</li>\n<li>内存分类<ul>\n<li>栈：全局变量，局部变量（这些空间较小）</li>\n<li>堆：对象（空间较大，还可以用于存放代码等）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>什么是变量？<ul>\n<li>值可以变化的量，由变量名与变量值组成</li>\n<li>一个变量对应一块小内存，变量名用来查找到内存，变量值就是内存中保存的内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>内存-数据-变量三者之间的关系<ul>\n<li>内存是一个容器，用于存储程序运行需要操作的数据</li>\n<li>变量是内存的标识，我们通过变量找到相应的内存，进而操作（读/写）内存中的数据</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a1 = 3   //这个就是基础数据类型</span><br><span class=\"line\"> var a2 = a1 + 4\t\t\t//这里的al就是3，然后进行算术计算</span><br><span class=\"line\"> var a3 = &#123;&#125;\t\t\t//这个就是引用类型，a3里面是对象的地址</span><br><span class=\"line\"> a3.name = &apos;Tom&apos;\t\t//name相当于对象中TOM这个值的标识名</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#关于赋值和内存的问题</p>\n<p>这里先扔出一个问题：</p>\n<ul>\n<li>问题：var a=xxx，a内存中保存的是什么？<ul>\n<li>xxx是一个基本数据</li>\n<li>xxx是一个对象</li>\n<li>xxx是一个变量</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3      //a内存中保存的就是3</span><br><span class=\"line\">  a = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;       ///a内存保存的是对象的地址</span><br><span class=\"line\"></span><br><span class=\"line\">var b = &apos;abc&apos;    //b内存中保存的是‘abc’</span><br><span class=\"line\">a = b\t\t\t\t\t//a内存保存的就是b内存的内容，即‘abc’</span><br><span class=\"line\">b = []\t\t\t\t\t//b内存保存的是array的地址</span><br><span class=\"line\">a = b         //a内存保存的就是b内存的内容，即array的地址</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#关于引用变量赋值问题</p>\n<ul>\n<li>关于引用变量赋值问题<ul>\n<li>2个引用变量指向同一个对象，通过一个引用变量修改对象内部数据，另一个引用变量也看得见</li>\n<li>2个引用变量指向同一个对象，让一个引用变量指向另一个对象，另一个引用变量还是指向原来的对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //1. 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见</span><br><span class=\"line\">  var obj1 = &#123;&#125;</span><br><span class=\"line\">  var obj2 = obj1</span><br><span class=\"line\">  obj2.name = &apos;Tom&apos;</span><br><span class=\"line\">  console.log(obj1.name)   //输出Tom</span><br><span class=\"line\">  function f1(obj) &#123;</span><br><span class=\"line\">    obj.age = 12</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  f1(obj2)</span><br><span class=\"line\">  console.log(obj1.age)</span><br><span class=\"line\">//输出 12</span><br><span class=\"line\"></span><br><span class=\"line\">  //2. 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象</span><br><span class=\"line\">  var obj3 = &#123;name: &apos;Tom&apos;&#125;</span><br><span class=\"line\">  var obj4 = obj3</span><br><span class=\"line\">  obj3 = &#123;name: &apos;JACK&apos;&#125;</span><br><span class=\"line\">  console.log(obj4.name)   //输出 Tom</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#关于数据传递问题</p>\n<ul>\n<li>问题：在js调用函数时传递变量参数时，是值传递还是引用传递<ul>\n<li>只有值传递，没有引用传递，传递的都是变量的值，只是这个值可能是基本数据，也可能是地址（引用）数据</li>\n<li>如果后一种看成是引用传递，那值传递和引用传递都可以有</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function f(a) &#123;</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var n = 4</span><br><span class=\"line\">  f(n) //传递的是n的值 ---&gt;值传递</span><br><span class=\"line\">//输出4</span><br><span class=\"line\"></span><br><span class=\"line\">  function f2(a) &#123;</span><br><span class=\"line\">    a.name = &apos;atguigu&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  n = &#123;&#125;</span><br><span class=\"line\">  f2(n) // 传递的是n指向的对象 ---&gt; 引用传递   ???  传的智商n里面的内容  也就是&#123;&#125;的地址</span><br><span class=\"line\">  console.log(n.name)</span><br><span class=\"line\">  //输出atguigu</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#JS引擎如何管理内存？</p>\n<ul>\n<li>内存生命周期<ul>\n<li>分配需要的内存</li>\n<li>使用分配到的内存</li>\n<li>不需要时将其释放/归还</li>\n</ul>\n</li>\n<li>释放内存<ul>\n<li>为执行函数分配的栈空间内存：函数执行完自动释放</li>\n<li>存储对象的堆空间内存：当内存没有引用指向时，对象成为垃圾对象，垃圾回收器后面就会回收释放此内存</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var obj = &#123;&#125;</span><br><span class=\"line\"> obj = null // ?</span><br><span class=\"line\">//内存还有obj，并且它的值为null</span><br><span class=\"line\"></span><br><span class=\"line\"> function fn () &#123;</span><br><span class=\"line\">   var a = 3</span><br><span class=\"line\">   var b = &#123;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> fn() // ?</span><br><span class=\"line\"> //内存中已经没有a和b了  但是有fn</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JS 对象理解","date":"2018-05-03T16:00:00.000Z","description":"简单梳理一下对象的意义","_content":"\n简单梳理一下对象的意义:\n\n- 什么是对象？\n  * 多个数据的封装体\n  * 用来保存多个数据的容器\n  * 一个对象代表现实中的一个事物\n- 为什么要用对象？\n  * 统一管理多个数据\n- 对象的组成\n  * 属性：属性名（字符串）和属性值（任意）组成\n  * 方法：一种特别的属性（属性值是函数）\n- 如何访问对象内部数据？\n  * .属性名：编码简单，有时不能用\n  * ['属性名']:编码麻烦，能通用\n\n简单代码演示:\n```\n  var p = {\n    name: 'Tom',\n    age: 12,\n    setName: function (name) {\n      this.name = name\n    },\n    setAge: function (age) {\n      this.age = age\n    }\n  }\n\n  p.setName('Bob')\n  p['setAge'](23)\n  console.log(p.name, p['age'])\n```\n- 问题：什么时候必须使用['属性名']的方式?\n  * 1.属性名包含特殊字符:- 空格\n  * 2.属性名不确定\n\n```\n  var p = {}\n  //1. 给p对象添加一个属性: content type: text/json\n  // p.content-type = 'text/json' //不能用\n  p['content-type'] = 'text/json'\n  console.log(p['content-type'])\n//输出:text/json\n\n  //2. 属性名不确定\n  var propName = 'myAge'\n  var value = 18\n  // p.propName = value //不能用\n  p[propName] = value\n  console.log(p[propName])\n//输出:18\n```\n","source":"_posts/2018-05-04-JS 对象理解.markdown","raw":"---\nlayout: post\ntitle: \"JS 对象理解\"\ndate: 2018-05-04\ncategories:\n  - JavaScript\n  - 前端面试\ndescription: 简单梳理一下对象的意义\n---\n\n简单梳理一下对象的意义:\n\n- 什么是对象？\n  * 多个数据的封装体\n  * 用来保存多个数据的容器\n  * 一个对象代表现实中的一个事物\n- 为什么要用对象？\n  * 统一管理多个数据\n- 对象的组成\n  * 属性：属性名（字符串）和属性值（任意）组成\n  * 方法：一种特别的属性（属性值是函数）\n- 如何访问对象内部数据？\n  * .属性名：编码简单，有时不能用\n  * ['属性名']:编码麻烦，能通用\n\n简单代码演示:\n```\n  var p = {\n    name: 'Tom',\n    age: 12,\n    setName: function (name) {\n      this.name = name\n    },\n    setAge: function (age) {\n      this.age = age\n    }\n  }\n\n  p.setName('Bob')\n  p['setAge'](23)\n  console.log(p.name, p['age'])\n```\n- 问题：什么时候必须使用['属性名']的方式?\n  * 1.属性名包含特殊字符:- 空格\n  * 2.属性名不确定\n\n```\n  var p = {}\n  //1. 给p对象添加一个属性: content type: text/json\n  // p.content-type = 'text/json' //不能用\n  p['content-type'] = 'text/json'\n  console.log(p['content-type'])\n//输出:text/json\n\n  //2. 属性名不确定\n  var propName = 'myAge'\n  var value = 18\n  // p.propName = value //不能用\n  p[propName] = value\n  console.log(p[propName])\n//输出:18\n```\n","slug":"2018-05-04-JS 对象理解","published":1,"updated":"2019-01-31T07:15:59.717Z","comments":1,"photos":[],"link":"","_id":"cjvaywf0y001r50960aj69bhq","content":"<p>简单梳理一下对象的意义:</p>\n<ul>\n<li>什么是对象？<ul>\n<li>多个数据的封装体</li>\n<li>用来保存多个数据的容器</li>\n<li>一个对象代表现实中的一个事物</li>\n</ul>\n</li>\n<li>为什么要用对象？<ul>\n<li>统一管理多个数据</li>\n</ul>\n</li>\n<li>对象的组成<ul>\n<li>属性：属性名（字符串）和属性值（任意）组成</li>\n<li>方法：一种特别的属性（属性值是函数）</li>\n</ul>\n</li>\n<li>如何访问对象内部数据？<ul>\n<li>.属性名：编码简单，有时不能用</li>\n<li>[‘属性名’]:编码麻烦，能通用</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p = &#123;</span><br><span class=\"line\">  name: &apos;Tom&apos;,</span><br><span class=\"line\">  age: 12,</span><br><span class=\"line\">  setName: function (name) &#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setAge: function (age) &#123;</span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p.setName(&apos;Bob&apos;)</span><br><span class=\"line\">p[&apos;setAge&apos;](23)</span><br><span class=\"line\">console.log(p.name, p[&apos;age&apos;])</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>问题：什么时候必须使用[‘属性名’]的方式?<ul>\n<li>1.属性名包含特殊字符:- 空格</li>\n<li>2.属性名不确定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var p = &#123;&#125;</span><br><span class=\"line\">  //1. 给p对象添加一个属性: content type: text/json</span><br><span class=\"line\">  // p.content-type = &apos;text/json&apos; //不能用</span><br><span class=\"line\">  p[&apos;content-type&apos;] = &apos;text/json&apos;</span><br><span class=\"line\">  console.log(p[&apos;content-type&apos;])</span><br><span class=\"line\">//输出:text/json</span><br><span class=\"line\"></span><br><span class=\"line\">  //2. 属性名不确定</span><br><span class=\"line\">  var propName = &apos;myAge&apos;</span><br><span class=\"line\">  var value = 18</span><br><span class=\"line\">  // p.propName = value //不能用</span><br><span class=\"line\">  p[propName] = value</span><br><span class=\"line\">  console.log(p[propName])</span><br><span class=\"line\">//输出:18</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>简单梳理一下对象的意义:</p>\n<ul>\n<li>什么是对象？<ul>\n<li>多个数据的封装体</li>\n<li>用来保存多个数据的容器</li>\n<li>一个对象代表现实中的一个事物</li>\n</ul>\n</li>\n<li>为什么要用对象？<ul>\n<li>统一管理多个数据</li>\n</ul>\n</li>\n<li>对象的组成<ul>\n<li>属性：属性名（字符串）和属性值（任意）组成</li>\n<li>方法：一种特别的属性（属性值是函数）</li>\n</ul>\n</li>\n<li>如何访问对象内部数据？<ul>\n<li>.属性名：编码简单，有时不能用</li>\n<li>[‘属性名’]:编码麻烦，能通用</li>\n</ul>\n</li>\n</ul>\n<p>简单代码演示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p = &#123;</span><br><span class=\"line\">  name: &apos;Tom&apos;,</span><br><span class=\"line\">  age: 12,</span><br><span class=\"line\">  setName: function (name) &#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setAge: function (age) &#123;</span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p.setName(&apos;Bob&apos;)</span><br><span class=\"line\">p[&apos;setAge&apos;](23)</span><br><span class=\"line\">console.log(p.name, p[&apos;age&apos;])</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>问题：什么时候必须使用[‘属性名’]的方式?<ul>\n<li>1.属性名包含特殊字符:- 空格</li>\n<li>2.属性名不确定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var p = &#123;&#125;</span><br><span class=\"line\">  //1. 给p对象添加一个属性: content type: text/json</span><br><span class=\"line\">  // p.content-type = &apos;text/json&apos; //不能用</span><br><span class=\"line\">  p[&apos;content-type&apos;] = &apos;text/json&apos;</span><br><span class=\"line\">  console.log(p[&apos;content-type&apos;])</span><br><span class=\"line\">//输出:text/json</span><br><span class=\"line\"></span><br><span class=\"line\">  //2. 属性名不确定</span><br><span class=\"line\">  var propName = &apos;myAge&apos;</span><br><span class=\"line\">  var value = 18</span><br><span class=\"line\">  // p.propName = value //不能用</span><br><span class=\"line\">  p[propName] = value</span><br><span class=\"line\">  console.log(p[propName])</span><br><span class=\"line\">//输出:18</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"vue-directive","date":"2018-11-16T16:00:00.000Z","description":"自定义指令 + 内置指令","_content":"\n## 指令\n\n自定义指令 + 内置指令\n\n- v-text\n- v-html\n- v-if\n- v-else\n- v-for\n- v-show\n- v-on\n- v-bind\n- v-model\n- ref\n- v-cloak 防止闪现\n\n#### 内置定义\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>vue生命周期</title>\n    <style>\n     [v-cloak] {\n       display: none;\n     }\n    </style>\n  </head>\n  <body>\n    <div id=\"example\">\n     <p ref=\"content\">p text</p>\n     <button @click=\"hint\">alert</button>\n     <p v-text=\"msg\"></p>\n     <p v-cloak>{{msg}}</p>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n    <script>\n      Vue.directive\n      new vue({\n        el: '#example',\n        data: {\n          date: new Date()\n        },\n        methods: {\n          hint () {\n            alert(this.$refs.content.textContent)\n          }\n        }\n      });\n\n      //全局指令\n\n      //局部指令\n    </script>\n  </body>\n</html>\n```\n\n#### 自定义\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>vue生命周期</title>\n    <style>\n    \n    </style>\n  </head>\n  <body>\n    <div id=\"example\">\n      <p v-upper-text=\"msg\"></p>\n      <p v-lower-text=\"msg\"></p>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n    <script>\n      // 定义全局指令\n      Vue.directive('v-upper-text', function())\n      new vue({\n        el: '#example',\n        data: {\n         msg1:'waAdwdwade'\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n#### 自定义\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Vue全局指令</title>\n    <style>\n    \n    </style>\n  </head>\n  <body>\n    <div id=\"example\">\n      <p v-upper-text=\"msg\"></p>\n      <p v-lower-text=\"msg\"></p>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n    <script>\n      // 定义全局指令\n      // el:指令属性所在的标签对象\n      // binding:包含指令相关信息属性的对象\n      Vue.directive('v-upper-text', function(el, binding){\n        el.textContent = binding.value.toUpperCase();\n      })\n      new vue({\n        el: '#example',\n        data: {\n         msg1:'waAdwdwade'\n        },\n        // 局部指令\n        directives: {\n          'lower-text': function(el, binding){\n            el.textContent = binding.value.toLowerCase()\n          }\n        }\n      });\n    </script>\n  </body>\n</html>\n```","source":"_posts/2018-11-17-vue指令.markdown","raw":"---\nlayout: post\ntitle: \"vue-directive\"\ndate: 2018-11-17\ncategories:\n  - vue\ndescription: 自定义指令 + 内置指令\n---\n\n## 指令\n\n自定义指令 + 内置指令\n\n- v-text\n- v-html\n- v-if\n- v-else\n- v-for\n- v-show\n- v-on\n- v-bind\n- v-model\n- ref\n- v-cloak 防止闪现\n\n#### 内置定义\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>vue生命周期</title>\n    <style>\n     [v-cloak] {\n       display: none;\n     }\n    </style>\n  </head>\n  <body>\n    <div id=\"example\">\n     <p ref=\"content\">p text</p>\n     <button @click=\"hint\">alert</button>\n     <p v-text=\"msg\"></p>\n     <p v-cloak>{{msg}}</p>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n    <script>\n      Vue.directive\n      new vue({\n        el: '#example',\n        data: {\n          date: new Date()\n        },\n        methods: {\n          hint () {\n            alert(this.$refs.content.textContent)\n          }\n        }\n      });\n\n      //全局指令\n\n      //局部指令\n    </script>\n  </body>\n</html>\n```\n\n#### 自定义\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>vue生命周期</title>\n    <style>\n    \n    </style>\n  </head>\n  <body>\n    <div id=\"example\">\n      <p v-upper-text=\"msg\"></p>\n      <p v-lower-text=\"msg\"></p>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n    <script>\n      // 定义全局指令\n      Vue.directive('v-upper-text', function())\n      new vue({\n        el: '#example',\n        data: {\n         msg1:'waAdwdwade'\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n#### 自定义\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Vue全局指令</title>\n    <style>\n    \n    </style>\n  </head>\n  <body>\n    <div id=\"example\">\n      <p v-upper-text=\"msg\"></p>\n      <p v-lower-text=\"msg\"></p>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n    <script>\n      // 定义全局指令\n      // el:指令属性所在的标签对象\n      // binding:包含指令相关信息属性的对象\n      Vue.directive('v-upper-text', function(el, binding){\n        el.textContent = binding.value.toUpperCase();\n      })\n      new vue({\n        el: '#example',\n        data: {\n         msg1:'waAdwdwade'\n        },\n        // 局部指令\n        directives: {\n          'lower-text': function(el, binding){\n            el.textContent = binding.value.toLowerCase()\n          }\n        }\n      });\n    </script>\n  </body>\n</html>\n```","slug":"2018-11-17-vue指令","published":1,"updated":"2019-01-31T07:15:59.718Z","comments":1,"photos":[],"link":"","_id":"cjvaywf11001s5096s9h3227x","content":"<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>自定义指令 + 内置指令</p>\n<ul>\n<li>v-text</li>\n<li>v-html</li>\n<li>v-if</li>\n<li>v-else</li>\n<li>v-for</li>\n<li>v-show</li>\n<li>v-on</li>\n<li>v-bind</li>\n<li>v-model</li>\n<li>ref</li>\n<li>v-cloak 防止闪现</li>\n</ul>\n<h4 id=\"内置定义\"><a href=\"#内置定义\" class=\"headerlink\" title=\"内置定义\"></a>内置定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue生命周期<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">     [v-cloak] &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">       display: none;</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"content\"</span>&gt;</span>p text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"hint\"</span>&gt;</span>alert<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      Vue.directive</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">new</span> vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#example'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          hint () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"keyword\">this</span>.$refs.content.textContent)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">//全局指令</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">//局部指令</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue生命周期<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-upper-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-lower-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 定义全局指令</span></span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.directive(<span class=\"string\">'v-upper-text'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>))</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">new</span> vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#example'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">         msg1:<span class=\"string\">'waAdwdwade'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义-1\"><a href=\"#自定义-1\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue全局指令<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-upper-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-lower-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 定义全局指令</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// el:指令属性所在的标签对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// binding:包含指令相关信息属性的对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.directive(<span class=\"string\">'v-upper-text'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, binding</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el.textContent = binding.value.toUpperCase();</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">new</span> vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#example'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">         msg1:<span class=\"string\">'waAdwdwade'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 局部指令</span></span></span><br><span class=\"line\"><span class=\"undefined\">        directives: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">'lower-text'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, binding</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            el.textContent = binding.value.toLowerCase()</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>自定义指令 + 内置指令</p>\n<ul>\n<li>v-text</li>\n<li>v-html</li>\n<li>v-if</li>\n<li>v-else</li>\n<li>v-for</li>\n<li>v-show</li>\n<li>v-on</li>\n<li>v-bind</li>\n<li>v-model</li>\n<li>ref</li>\n<li>v-cloak 防止闪现</li>\n</ul>\n<h4 id=\"内置定义\"><a href=\"#内置定义\" class=\"headerlink\" title=\"内置定义\"></a>内置定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue生命周期<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">     [v-cloak] &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">       display: none;</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"content\"</span>&gt;</span>p text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"hint\"</span>&gt;</span>alert<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      Vue.directive</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">new</span> vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#example'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          hint () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"keyword\">this</span>.$refs.content.textContent)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">//全局指令</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">//局部指令</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue生命周期<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-upper-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-lower-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 定义全局指令</span></span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.directive(<span class=\"string\">'v-upper-text'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>))</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">new</span> vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#example'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">         msg1:<span class=\"string\">'waAdwdwade'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义-1\"><a href=\"#自定义-1\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue全局指令<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-upper-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-lower-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 定义全局指令</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// el:指令属性所在的标签对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// binding:包含指令相关信息属性的对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.directive(<span class=\"string\">'v-upper-text'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, binding</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el.textContent = binding.value.toUpperCase();</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">new</span> vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#example'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">         msg1:<span class=\"string\">'waAdwdwade'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 局部指令</span></span></span><br><span class=\"line\"><span class=\"undefined\">        directives: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">'lower-text'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, binding</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            el.textContent = binding.value.toLowerCase()</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"开发tips","date":"2018-11-21T16:00:00.000Z","description":"解决公众号关注需要在指定域名下的问题","_content":"\n#### 解决公众号关注需要在指定域名下的问题\n\n- 1. 打开支付宝应用助手\n  - 设置 - 支付宝 - 应用中心设置 - 应用助手打开 \n- 2. 打开支付宝中的“应用”\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-5483ea9b16f784d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-fd275bca8e00eb56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后把图中的这个开关打开，即可。\n\n#### 如何快速找到线上页面对应的js资源\n\n很多时候，有断点需求，这时候快速找到线上页面对应的js资源就显得尤为重要。\n\nstep1：点击sources\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f98eebfbdd07e016.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nstep2：有没有觉得这些很眼熟\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a98f97927407fe5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nstep3：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a2fb941d57fca3ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/2018-11-22-开发tips.md","raw":"---\nlayout: post\ntitle: \"开发tips\"\ndate: 2018-11-22\ncategories:\n  - 开发tips\ndescription: 解决公众号关注需要在指定域名下的问题\n---\n\n#### 解决公众号关注需要在指定域名下的问题\n\n- 1. 打开支付宝应用助手\n  - 设置 - 支付宝 - 应用中心设置 - 应用助手打开 \n- 2. 打开支付宝中的“应用”\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-5483ea9b16f784d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-fd275bca8e00eb56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后把图中的这个开关打开，即可。\n\n#### 如何快速找到线上页面对应的js资源\n\n很多时候，有断点需求，这时候快速找到线上页面对应的js资源就显得尤为重要。\n\nstep1：点击sources\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f98eebfbdd07e016.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nstep2：有没有觉得这些很眼熟\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a98f97927407fe5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nstep3：\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a2fb941d57fca3ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"2018-11-22-开发tips","published":1,"updated":"2019-01-31T07:15:59.720Z","comments":1,"photos":[],"link":"","_id":"cjvaywf15001v5096gqggjnl5","content":"<h4 id=\"解决公众号关注需要在指定域名下的问题\"><a href=\"#解决公众号关注需要在指定域名下的问题\" class=\"headerlink\" title=\"解决公众号关注需要在指定域名下的问题\"></a>解决公众号关注需要在指定域名下的问题</h4><ul>\n<li><ol>\n<li>打开支付宝应用助手</li>\n</ol>\n<ul>\n<li>设置 - 支付宝 - 应用中心设置 - 应用助手打开 </li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>打开支付宝中的“应用”</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-5483ea9b16f784d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-fd275bca8e00eb56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>然后把图中的这个开关打开，即可。</p>\n<h4 id=\"如何快速找到线上页面对应的js资源\"><a href=\"#如何快速找到线上页面对应的js资源\" class=\"headerlink\" title=\"如何快速找到线上页面对应的js资源\"></a>如何快速找到线上页面对应的js资源</h4><p>很多时候，有断点需求，这时候快速找到线上页面对应的js资源就显得尤为重要。</p>\n<p>step1：点击sources<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f98eebfbdd07e016.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>step2：有没有觉得这些很眼熟<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a98f97927407fe5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>step3：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a2fb941d57fca3ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"解决公众号关注需要在指定域名下的问题\"><a href=\"#解决公众号关注需要在指定域名下的问题\" class=\"headerlink\" title=\"解决公众号关注需要在指定域名下的问题\"></a>解决公众号关注需要在指定域名下的问题</h4><ul>\n<li><ol>\n<li>打开支付宝应用助手</li>\n</ol>\n<ul>\n<li>设置 - 支付宝 - 应用中心设置 - 应用助手打开 </li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>打开支付宝中的“应用”</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-5483ea9b16f784d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-fd275bca8e00eb56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>然后把图中的这个开关打开，即可。</p>\n<h4 id=\"如何快速找到线上页面对应的js资源\"><a href=\"#如何快速找到线上页面对应的js资源\" class=\"headerlink\" title=\"如何快速找到线上页面对应的js资源\"></a>如何快速找到线上页面对应的js资源</h4><p>很多时候，有断点需求，这时候快速找到线上页面对应的js资源就显得尤为重要。</p>\n<p>step1：点击sources<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f98eebfbdd07e016.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>step2：有没有觉得这些很眼熟<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a98f97927407fe5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>step3：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a2fb941d57fca3ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"layout":"post","title":"vue自定义插件","date":"2018-11-17T16:00:00.000Z","description":"这篇blog的目的是，学会自己写一个vue的插件","_content":"\n## vue自定义插件\n\n废话不说多，这篇blog的目的是，学会自己写一个vue的插件，但是我们并不是教你写什么插件，只是简单展示一下，写一个插件相关的语法。\n\nshow me code\n\nplugin.html:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>vue-plugin</title>\n</head>\n<body>\n  <div id=\"test\">\n    <p v-my-directive=\"msg\"></p>\n  </div>\n  <script src=\"https://cdn.bootcss.com/vue/2.5.15/vue.js\"></script>\n  <script type=\"text/javascript\" src=\"./plugin.js\"></script>\n  <script>\n    // 声明使用插件\n    Vue.use(MyPlugin) //内部会执行 MyPlugin.install(Vue)\n    \n    Vue.myGlobalMethod();\n    const vm = new Vue({\n      el:'#test',\n      data: {\n        msg: 'I want to do something'\n      }\n    })\n    vm.$myMethod()\n  </script>\n</body>\n</html>\n```\n\nplugin.js:\n\n```js\n(function () {\n  // 需要向外暴露的插件对象\n  const MyPlugin = {}\n\n  // 插件对象 必须要有一个install的方法\n    MyPlugin.install = function (Vue, options) {\n      // 1. 添加全局方法或属性\n      Vue.myGlobalMethod = function () {\n        // 逻辑...\n        console.log('Vue 函数对象的方法myGlobalMethod')\n      }\n    \n      // 2. 添加全局资源\n      Vue.directive('my-directive', function(el,binding){\n        el.textContent = binding.value.toUpperCase();\n      })\n    \n      // 3. 注入组件 //这个方法 这里暂时可以不适用\n      Vue.mixin({\n        created: function () {\n          // 逻辑...\n        }\n      })\n    \n      // 4. 添加实例方法\n      Vue.prototype.$myMethod = function (methodOptions) {\n        // 逻辑...\n        console.log('vue实例对象的方法$myMethod')\n      }\n    }\n\n    // 向外暴露\n    window.MyPlugin = MyPlugin;\n})\n```","source":"_posts/2018-11-18-vue自定义插件.md","raw":"---\nlayout: post\ntitle: \"vue自定义插件\"\ndate: 2018-11-18\ncategories:\n  - vue\ndescription: 这篇blog的目的是，学会自己写一个vue的插件\n---\n\n## vue自定义插件\n\n废话不说多，这篇blog的目的是，学会自己写一个vue的插件，但是我们并不是教你写什么插件，只是简单展示一下，写一个插件相关的语法。\n\nshow me code\n\nplugin.html:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>vue-plugin</title>\n</head>\n<body>\n  <div id=\"test\">\n    <p v-my-directive=\"msg\"></p>\n  </div>\n  <script src=\"https://cdn.bootcss.com/vue/2.5.15/vue.js\"></script>\n  <script type=\"text/javascript\" src=\"./plugin.js\"></script>\n  <script>\n    // 声明使用插件\n    Vue.use(MyPlugin) //内部会执行 MyPlugin.install(Vue)\n    \n    Vue.myGlobalMethod();\n    const vm = new Vue({\n      el:'#test',\n      data: {\n        msg: 'I want to do something'\n      }\n    })\n    vm.$myMethod()\n  </script>\n</body>\n</html>\n```\n\nplugin.js:\n\n```js\n(function () {\n  // 需要向外暴露的插件对象\n  const MyPlugin = {}\n\n  // 插件对象 必须要有一个install的方法\n    MyPlugin.install = function (Vue, options) {\n      // 1. 添加全局方法或属性\n      Vue.myGlobalMethod = function () {\n        // 逻辑...\n        console.log('Vue 函数对象的方法myGlobalMethod')\n      }\n    \n      // 2. 添加全局资源\n      Vue.directive('my-directive', function(el,binding){\n        el.textContent = binding.value.toUpperCase();\n      })\n    \n      // 3. 注入组件 //这个方法 这里暂时可以不适用\n      Vue.mixin({\n        created: function () {\n          // 逻辑...\n        }\n      })\n    \n      // 4. 添加实例方法\n      Vue.prototype.$myMethod = function (methodOptions) {\n        // 逻辑...\n        console.log('vue实例对象的方法$myMethod')\n      }\n    }\n\n    // 向外暴露\n    window.MyPlugin = MyPlugin;\n})\n```","slug":"2018-11-18-vue自定义插件","published":1,"updated":"2019-01-31T07:15:59.719Z","comments":1,"photos":[],"link":"","_id":"cjvaywf1b001w5096v9xgk4gh","content":"<h2 id=\"vue自定义插件\"><a href=\"#vue自定义插件\" class=\"headerlink\" title=\"vue自定义插件\"></a>vue自定义插件</h2><p>废话不说多，这篇blog的目的是，学会自己写一个vue的插件，但是我们并不是教你写什么插件，只是简单展示一下，写一个插件相关的语法。</p>\n<p>show me code</p>\n<p>plugin.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue-plugin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-my-directive</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vue/2.5.15/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./plugin.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 声明使用插件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.use(MyPlugin) <span class=\"comment\">//内部会执行 MyPlugin.install(Vue)</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    Vue.myGlobalMethod();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el:<span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        msg: <span class=\"string\">'I want to do something'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    vm.$myMethod()</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>plugin.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要向外暴露的插件对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> MyPlugin = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 插件对象 必须要有一个install的方法</span></span><br><span class=\"line\">    MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 1. 添加全局方法或属性</span></span><br><span class=\"line\">      Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Vue 函数对象的方法myGlobalMethod'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 2. 添加全局资源</span></span><br><span class=\"line\">      Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,binding</span>)</span>&#123;</span><br><span class=\"line\">        el.textContent = binding.value.toUpperCase();</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 3. 注入组件 //这个方法 这里暂时可以不适用</span></span><br><span class=\"line\">      Vue.mixin(&#123;</span><br><span class=\"line\">        created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 4. 添加实例方法</span></span><br><span class=\"line\">      Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methodOptions</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'vue实例对象的方法$myMethod'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向外暴露</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.MyPlugin = MyPlugin;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue自定义插件\"><a href=\"#vue自定义插件\" class=\"headerlink\" title=\"vue自定义插件\"></a>vue自定义插件</h2><p>废话不说多，这篇blog的目的是，学会自己写一个vue的插件，但是我们并不是教你写什么插件，只是简单展示一下，写一个插件相关的语法。</p>\n<p>show me code</p>\n<p>plugin.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue-plugin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-my-directive</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vue/2.5.15/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./plugin.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 声明使用插件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.use(MyPlugin) <span class=\"comment\">//内部会执行 MyPlugin.install(Vue)</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    Vue.myGlobalMethod();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el:<span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        msg: <span class=\"string\">'I want to do something'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    vm.$myMethod()</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>plugin.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要向外暴露的插件对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> MyPlugin = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 插件对象 必须要有一个install的方法</span></span><br><span class=\"line\">    MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 1. 添加全局方法或属性</span></span><br><span class=\"line\">      Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Vue 函数对象的方法myGlobalMethod'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 2. 添加全局资源</span></span><br><span class=\"line\">      Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,binding</span>)</span>&#123;</span><br><span class=\"line\">        el.textContent = binding.value.toUpperCase();</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 3. 注入组件 //这个方法 这里暂时可以不适用</span></span><br><span class=\"line\">      Vue.mixin(&#123;</span><br><span class=\"line\">        created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 4. 添加实例方法</span></span><br><span class=\"line\">      Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methodOptions</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'vue实例对象的方法$myMethod'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向外暴露</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.MyPlugin = MyPlugin;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"vue源码解析(第二弹)","date":"2018-11-23T16:00:00.000Z","description":"接着上一篇，继续来讲一个非常有意思的东西`documentFragment`","_content":"\n# vue 源码探究（第二弹）\n\n接着上一篇，继续来讲一个非常有意思的东西`documentFragment`\n\n### 解析\n\n#### 六、DocumentFragment: 文档碎片(高效批量更新多个节点)\n\n这里先甩出 2 个概念，什么是 document，以及什么是 documentFragment\n\n- document: 对应显示的页面, 包含 n 个 element 一旦更新 document 内部的某个元素界面更新\n- documentFragment: 内存中保存 n 个 element 的容器对象(不与界面关联), 如果更新 framgnet 中的某个 element, 界面不变\n\n如果说，我们想要批量更新多个节点，可不可以这样理解，放入 documentFragment 中去，更新完了之后，再插入 document 中，因为 documentFragment 也是 document 下的一个节点。\n\n举一个简单的例子：\n\n```HTML\n  <ul id=\"fragment_test\">\n    <li>test1</li>\n    <li>test2</li>\n    <li>test3</li>\n  </ul>\n```\n\n如果我们想把ul中li中的文本信息，全部由testx变成zhangjing123，原始的方式是不是这样做：\n1. 遍历\n2. 更改\n\n这样，是不是document刷新了3次，如果说有1万个li呢，document是不是要刷新1万次？\n明显这样很不好，那么文档碎片出场了。\n\n```js\n  const ul = document.getElementById('fragment_test')\n  // 1. 创建fragment\n  const fragment = document.createDocumentFragment()\n  // 2. 取出ul中所有子节点取出保存到fragment\n\n  // 这里提一个小问题，如果这样的代码，会变成啥样？\n  // let child\n  // while(child=ul.firstChild) { \n  // }\n  // 答案：死循环\n  // 那为什么加了一行 fragment.appendChild(child) 就可以呢？\n  // 因为一个节点只能有一个父亲\n  // NOTICE：ul和li中的换行也是一个文本节点，所以我们使用\n//   firstChild用法\n//   此属性能够获取指定元素节点下的第一个子节点。\n//   如果元素下没有子节点，那么返回null。\n//   特别说明：\n//  （1）.子节点并不一定都是元素节点，还有可能包含文本节点或者注释节点等节点。\n//  （2）.空格或者换行被看做文本节点。\n  let child\n  while(child=ul.firstChild) { \n    // 一个节点只能有一个父亲\n    fragment.appendChild(child)  \n    // 先将child从ul中移除, 添加为fragment子节点\n  }\n\n  // 3. 更新fragment中所有li的文本\n  Array.prototype.slice.call(fragment.childNodes).forEach(node => {\n    if (node.nodeType===1) { // 元素节点 <li>\n      node.textContent = 'zhangjing123'\n    }\n  })\n\n  // 4. 将fragment插入ul\n  ul.appendChild(fragment)\n\n```\n\n未完待续... \n接下来，还有一个更有趣的东西\n\n**下一章继续~**\n","source":"_posts/2018-11-24-vue源码解析（第二弹） 下午3.56.56.md","raw":"---\nlayout: post\ntitle: \"vue源码解析(第二弹)\"\ndate: 2018-11-24\ncategories:\n  - vue\ndescription: 接着上一篇，继续来讲一个非常有意思的东西`documentFragment`\n---\n\n# vue 源码探究（第二弹）\n\n接着上一篇，继续来讲一个非常有意思的东西`documentFragment`\n\n### 解析\n\n#### 六、DocumentFragment: 文档碎片(高效批量更新多个节点)\n\n这里先甩出 2 个概念，什么是 document，以及什么是 documentFragment\n\n- document: 对应显示的页面, 包含 n 个 element 一旦更新 document 内部的某个元素界面更新\n- documentFragment: 内存中保存 n 个 element 的容器对象(不与界面关联), 如果更新 framgnet 中的某个 element, 界面不变\n\n如果说，我们想要批量更新多个节点，可不可以这样理解，放入 documentFragment 中去，更新完了之后，再插入 document 中，因为 documentFragment 也是 document 下的一个节点。\n\n举一个简单的例子：\n\n```HTML\n  <ul id=\"fragment_test\">\n    <li>test1</li>\n    <li>test2</li>\n    <li>test3</li>\n  </ul>\n```\n\n如果我们想把ul中li中的文本信息，全部由testx变成zhangjing123，原始的方式是不是这样做：\n1. 遍历\n2. 更改\n\n这样，是不是document刷新了3次，如果说有1万个li呢，document是不是要刷新1万次？\n明显这样很不好，那么文档碎片出场了。\n\n```js\n  const ul = document.getElementById('fragment_test')\n  // 1. 创建fragment\n  const fragment = document.createDocumentFragment()\n  // 2. 取出ul中所有子节点取出保存到fragment\n\n  // 这里提一个小问题，如果这样的代码，会变成啥样？\n  // let child\n  // while(child=ul.firstChild) { \n  // }\n  // 答案：死循环\n  // 那为什么加了一行 fragment.appendChild(child) 就可以呢？\n  // 因为一个节点只能有一个父亲\n  // NOTICE：ul和li中的换行也是一个文本节点，所以我们使用\n//   firstChild用法\n//   此属性能够获取指定元素节点下的第一个子节点。\n//   如果元素下没有子节点，那么返回null。\n//   特别说明：\n//  （1）.子节点并不一定都是元素节点，还有可能包含文本节点或者注释节点等节点。\n//  （2）.空格或者换行被看做文本节点。\n  let child\n  while(child=ul.firstChild) { \n    // 一个节点只能有一个父亲\n    fragment.appendChild(child)  \n    // 先将child从ul中移除, 添加为fragment子节点\n  }\n\n  // 3. 更新fragment中所有li的文本\n  Array.prototype.slice.call(fragment.childNodes).forEach(node => {\n    if (node.nodeType===1) { // 元素节点 <li>\n      node.textContent = 'zhangjing123'\n    }\n  })\n\n  // 4. 将fragment插入ul\n  ul.appendChild(fragment)\n\n```\n\n未完待续... \n接下来，还有一个更有趣的东西\n\n**下一章继续~**\n","slug":"2018-11-24-vue源码解析（第二弹） 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.721Z","comments":1,"photos":[],"link":"","_id":"cjvaywf1h001z50960oixt92t","content":"<h1 id=\"vue-源码探究（第二弹）\"><a href=\"#vue-源码探究（第二弹）\" class=\"headerlink\" title=\"vue 源码探究（第二弹）\"></a>vue 源码探究（第二弹）</h1><p>接着上一篇，继续来讲一个非常有意思的东西<code>documentFragment</code></p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"六、DocumentFragment-文档碎片-高效批量更新多个节点\"><a href=\"#六、DocumentFragment-文档碎片-高效批量更新多个节点\" class=\"headerlink\" title=\"六、DocumentFragment: 文档碎片(高效批量更新多个节点)\"></a>六、DocumentFragment: 文档碎片(高效批量更新多个节点)</h4><p>这里先甩出 2 个概念，什么是 document，以及什么是 documentFragment</p>\n<ul>\n<li>document: 对应显示的页面, 包含 n 个 element 一旦更新 document 内部的某个元素界面更新</li>\n<li>documentFragment: 内存中保存 n 个 element 的容器对象(不与界面关联), 如果更新 framgnet 中的某个 element, 界面不变</li>\n</ul>\n<p>如果说，我们想要批量更新多个节点，可不可以这样理解，放入 documentFragment 中去，更新完了之后，再插入 document 中，因为 documentFragment 也是 document 下的一个节点。</p>\n<p>举一个简单的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fragment_test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>test1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>test2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>test3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果我们想把ul中li中的文本信息，全部由testx变成zhangjing123，原始的方式是不是这样做：</p>\n<ol>\n<li>遍历</li>\n<li>更改</li>\n</ol>\n<p>这样，是不是document刷新了3次，如果说有1万个li呢，document是不是要刷新1万次？<br>明显这样很不好，那么文档碎片出场了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'fragment_test'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 1. 创建fragment</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\">  <span class=\"comment\">// 2. 取出ul中所有子节点取出保存到fragment</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里提一个小问题，如果这样的代码，会变成啥样？</span></span><br><span class=\"line\">  <span class=\"comment\">// let child</span></span><br><span class=\"line\">  <span class=\"comment\">// while(child=ul.firstChild) &#123; </span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 答案：死循环</span></span><br><span class=\"line\">  <span class=\"comment\">// 那为什么加了一行 fragment.appendChild(child) 就可以呢？</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为一个节点只能有一个父亲</span></span><br><span class=\"line\">  <span class=\"comment\">// NOTICE：ul和li中的换行也是一个文本节点，所以我们使用</span></span><br><span class=\"line\"><span class=\"comment\">//   firstChild用法</span></span><br><span class=\"line\"><span class=\"comment\">//   此属性能够获取指定元素节点下的第一个子节点。</span></span><br><span class=\"line\"><span class=\"comment\">//   如果元素下没有子节点，那么返回null。</span></span><br><span class=\"line\"><span class=\"comment\">//   特别说明：</span></span><br><span class=\"line\"><span class=\"comment\">//  （1）.子节点并不一定都是元素节点，还有可能包含文本节点或者注释节点等节点。</span></span><br><span class=\"line\"><span class=\"comment\">//  （2）.空格或者换行被看做文本节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> child</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(child=ul.firstChild) &#123; </span><br><span class=\"line\">    <span class=\"comment\">// 一个节点只能有一个父亲</span></span><br><span class=\"line\">    fragment.appendChild(child)  </span><br><span class=\"line\">    <span class=\"comment\">// 先将child从ul中移除, 添加为fragment子节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 更新fragment中所有li的文本</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.slice.call(fragment.childNodes).forEach(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.nodeType===<span class=\"number\">1</span>) &#123; <span class=\"comment\">// 元素节点 &lt;li&gt;</span></span><br><span class=\"line\">      node.textContent = <span class=\"string\">'zhangjing123'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 将fragment插入ul</span></span><br><span class=\"line\">  ul.appendChild(fragment)</span><br></pre></td></tr></table></figure>\n<p>未完待续…<br>接下来，还有一个更有趣的东西</p>\n<p><strong>下一章继续~</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue-源码探究（第二弹）\"><a href=\"#vue-源码探究（第二弹）\" class=\"headerlink\" title=\"vue 源码探究（第二弹）\"></a>vue 源码探究（第二弹）</h1><p>接着上一篇，继续来讲一个非常有意思的东西<code>documentFragment</code></p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"六、DocumentFragment-文档碎片-高效批量更新多个节点\"><a href=\"#六、DocumentFragment-文档碎片-高效批量更新多个节点\" class=\"headerlink\" title=\"六、DocumentFragment: 文档碎片(高效批量更新多个节点)\"></a>六、DocumentFragment: 文档碎片(高效批量更新多个节点)</h4><p>这里先甩出 2 个概念，什么是 document，以及什么是 documentFragment</p>\n<ul>\n<li>document: 对应显示的页面, 包含 n 个 element 一旦更新 document 内部的某个元素界面更新</li>\n<li>documentFragment: 内存中保存 n 个 element 的容器对象(不与界面关联), 如果更新 framgnet 中的某个 element, 界面不变</li>\n</ul>\n<p>如果说，我们想要批量更新多个节点，可不可以这样理解，放入 documentFragment 中去，更新完了之后，再插入 document 中，因为 documentFragment 也是 document 下的一个节点。</p>\n<p>举一个简单的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fragment_test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>test1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>test2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>test3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果我们想把ul中li中的文本信息，全部由testx变成zhangjing123，原始的方式是不是这样做：</p>\n<ol>\n<li>遍历</li>\n<li>更改</li>\n</ol>\n<p>这样，是不是document刷新了3次，如果说有1万个li呢，document是不是要刷新1万次？<br>明显这样很不好，那么文档碎片出场了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'fragment_test'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 1. 创建fragment</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\">  <span class=\"comment\">// 2. 取出ul中所有子节点取出保存到fragment</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里提一个小问题，如果这样的代码，会变成啥样？</span></span><br><span class=\"line\">  <span class=\"comment\">// let child</span></span><br><span class=\"line\">  <span class=\"comment\">// while(child=ul.firstChild) &#123; </span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 答案：死循环</span></span><br><span class=\"line\">  <span class=\"comment\">// 那为什么加了一行 fragment.appendChild(child) 就可以呢？</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为一个节点只能有一个父亲</span></span><br><span class=\"line\">  <span class=\"comment\">// NOTICE：ul和li中的换行也是一个文本节点，所以我们使用</span></span><br><span class=\"line\"><span class=\"comment\">//   firstChild用法</span></span><br><span class=\"line\"><span class=\"comment\">//   此属性能够获取指定元素节点下的第一个子节点。</span></span><br><span class=\"line\"><span class=\"comment\">//   如果元素下没有子节点，那么返回null。</span></span><br><span class=\"line\"><span class=\"comment\">//   特别说明：</span></span><br><span class=\"line\"><span class=\"comment\">//  （1）.子节点并不一定都是元素节点，还有可能包含文本节点或者注释节点等节点。</span></span><br><span class=\"line\"><span class=\"comment\">//  （2）.空格或者换行被看做文本节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> child</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(child=ul.firstChild) &#123; </span><br><span class=\"line\">    <span class=\"comment\">// 一个节点只能有一个父亲</span></span><br><span class=\"line\">    fragment.appendChild(child)  </span><br><span class=\"line\">    <span class=\"comment\">// 先将child从ul中移除, 添加为fragment子节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 更新fragment中所有li的文本</span></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.slice.call(fragment.childNodes).forEach(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.nodeType===<span class=\"number\">1</span>) &#123; <span class=\"comment\">// 元素节点 &lt;li&gt;</span></span><br><span class=\"line\">      node.textContent = <span class=\"string\">'zhangjing123'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 将fragment插入ul</span></span><br><span class=\"line\">  ul.appendChild(fragment)</span><br></pre></td></tr></table></figure>\n<p>未完待续…<br>接下来，还有一个更有趣的东西</p>\n<p><strong>下一章继续~</strong></p>\n"},{"layout":"post","title":"vue源码解析(第三弹)","date":"2018-11-24T16:00:00.000Z","description":"结束了之前prepare，现在开始正式进入vue源码探究部分","_content":"\n# vue源码探究（第三弹）\n\n结束了之前prepare，现在开始正式进入vue源码探究部分\n\n## 数据代理\n\n先从简单的入手，我们先手动实现一个简易版的数据代理吧。\n\n#### 基础知识\n\n1. vue数据代理: data对象的所有属性的操作(读/写)由vm对象来代理操作\n2. 好处: 通过vm对象就可以方便的操作data中的数据\n3. 实现:\n  1). 通过Object.defineProperty(vm, key, {})给vm添加与data对象的属性对应的属性\n  2). 所有添加的属性都包含get/set方法\n  3). 在get/set方法中去操作data中对应的属性\n\n**举个例子🌰**\n\n```JS\n<div id=\"test\"></div>\n\n<script type=\"text/javascript\" src=\"js/mvvm/compile.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/mvvm.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/observer.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/watcher.js\"></script>\n<script type=\"text/javascript\">\n  // 这里取名为mvvm 是因为在mvvm.js中 \n  // 是这样暴露的 function MVVM(options) {} 这里的MVVM和vue是一样的 只是一个命名的问题\n  const vm = new MVVM({\n    el: \"#test\",\n    data: {\n      name: '张三2'\n    }\n  })\n  console.log(vm.name)  // 读取的是data中的name,  vm代理对data的读操作\n  vm.name = '李四2' // 数据保存到data中的name上, vm代理对data的写操作\n  console.log(vm.name, vm._data.name) // 李四2 李四2\n</script>\n```\n\n上面这部分是为了简单说明，我们写的mvvm实现了简单的数据代理，接下来，我们来剖析一下它的内部实现。\n先揭一个底，它的核心实现就是之前讲过的**Object.defineProperty**\n\n```js\n/*\n相关于Vue的构造函数\n */\nfunction MVVM(options) {\n  // 将选项对象保存到vm\n  this.$options = options;\n  // 将data对象保存到vm和datq变量中\n  var data = this._data = this.$options.data;\n  //将vm保存在me变量中\n  var me = this;\n  // 遍历data中所有属性\n  Object.keys(data).forEach(function (key) { // 属性名: name\n    // 对指定属性实现代理\n    me._proxy(key);\n  });\n\n  // 对data进行监视\n  observe(data, this);\n\n  // 创建一个用来编译模板的compile对象\n  this.$compile = new Compile(options.el || document.body, this)\n}\n\nMVVM.prototype = {\n  $watch: function (key, cb, options) {\n    new Watcher(this, key, cb);\n  },\n\n  // 对指定属性实现代理\n  _proxy: function (key) {\n    // 保存vm\n    var me = this;\n    // 给vm添加指定属性名的属性(使用属性描述)\n    Object.defineProperty(me, key, {\n      configurable: false, // 不能再重新定义\n      enumerable: true, // 可以枚举\n      // 当通过vm.name读取属性值时自动调用\n      get: function proxyGetter() {\n        // 读取data中对应属性值返回(实现代理读操作)\n        return me._data[key];\n      },\n      // 当通过vm.name = 'xxx'时自动调用\n      set: function proxySetter(newVal) {\n        // 将最新的值保存到data中对应的属性上(实现代理写操作)\n        me._data[key] = newVal;\n      }\n    });\n  }\n};\n```\n\n----------\n\n#### Tips：\n\n在源码学习的过程中，掌握到了一个小技巧，读源码的时候，debugger会更加的方便。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-72a9751c3329aa88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-07d1afd886ee65ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n非常好用，我之前太蠢了，只会第一个`resume script execution`\n\n#### 最后\n\n未完待续... \n接下来，还有一个更有趣的东西\n\n**下一章继续~**","source":"_posts/2018-11-25-vue源码解析(第三弹) 下午3.56.56.md","raw":"---\nlayout: post\ntitle: \"vue源码解析(第三弹)\"\ndate: 2018-11-25\ncategories:\n  - vue\ndescription: 结束了之前prepare，现在开始正式进入vue源码探究部分\n---\n\n# vue源码探究（第三弹）\n\n结束了之前prepare，现在开始正式进入vue源码探究部分\n\n## 数据代理\n\n先从简单的入手，我们先手动实现一个简易版的数据代理吧。\n\n#### 基础知识\n\n1. vue数据代理: data对象的所有属性的操作(读/写)由vm对象来代理操作\n2. 好处: 通过vm对象就可以方便的操作data中的数据\n3. 实现:\n  1). 通过Object.defineProperty(vm, key, {})给vm添加与data对象的属性对应的属性\n  2). 所有添加的属性都包含get/set方法\n  3). 在get/set方法中去操作data中对应的属性\n\n**举个例子🌰**\n\n```JS\n<div id=\"test\"></div>\n\n<script type=\"text/javascript\" src=\"js/mvvm/compile.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/mvvm.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/observer.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/watcher.js\"></script>\n<script type=\"text/javascript\">\n  // 这里取名为mvvm 是因为在mvvm.js中 \n  // 是这样暴露的 function MVVM(options) {} 这里的MVVM和vue是一样的 只是一个命名的问题\n  const vm = new MVVM({\n    el: \"#test\",\n    data: {\n      name: '张三2'\n    }\n  })\n  console.log(vm.name)  // 读取的是data中的name,  vm代理对data的读操作\n  vm.name = '李四2' // 数据保存到data中的name上, vm代理对data的写操作\n  console.log(vm.name, vm._data.name) // 李四2 李四2\n</script>\n```\n\n上面这部分是为了简单说明，我们写的mvvm实现了简单的数据代理，接下来，我们来剖析一下它的内部实现。\n先揭一个底，它的核心实现就是之前讲过的**Object.defineProperty**\n\n```js\n/*\n相关于Vue的构造函数\n */\nfunction MVVM(options) {\n  // 将选项对象保存到vm\n  this.$options = options;\n  // 将data对象保存到vm和datq变量中\n  var data = this._data = this.$options.data;\n  //将vm保存在me变量中\n  var me = this;\n  // 遍历data中所有属性\n  Object.keys(data).forEach(function (key) { // 属性名: name\n    // 对指定属性实现代理\n    me._proxy(key);\n  });\n\n  // 对data进行监视\n  observe(data, this);\n\n  // 创建一个用来编译模板的compile对象\n  this.$compile = new Compile(options.el || document.body, this)\n}\n\nMVVM.prototype = {\n  $watch: function (key, cb, options) {\n    new Watcher(this, key, cb);\n  },\n\n  // 对指定属性实现代理\n  _proxy: function (key) {\n    // 保存vm\n    var me = this;\n    // 给vm添加指定属性名的属性(使用属性描述)\n    Object.defineProperty(me, key, {\n      configurable: false, // 不能再重新定义\n      enumerable: true, // 可以枚举\n      // 当通过vm.name读取属性值时自动调用\n      get: function proxyGetter() {\n        // 读取data中对应属性值返回(实现代理读操作)\n        return me._data[key];\n      },\n      // 当通过vm.name = 'xxx'时自动调用\n      set: function proxySetter(newVal) {\n        // 将最新的值保存到data中对应的属性上(实现代理写操作)\n        me._data[key] = newVal;\n      }\n    });\n  }\n};\n```\n\n----------\n\n#### Tips：\n\n在源码学习的过程中，掌握到了一个小技巧，读源码的时候，debugger会更加的方便。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-72a9751c3329aa88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-07d1afd886ee65ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n非常好用，我之前太蠢了，只会第一个`resume script execution`\n\n#### 最后\n\n未完待续... \n接下来，还有一个更有趣的东西\n\n**下一章继续~**","slug":"2018-11-25-vue源码解析(第三弹) 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.722Z","comments":1,"photos":[],"link":"","_id":"cjvaywf1j00215096xz9fnkkr","content":"<h1 id=\"vue源码探究（第三弹）\"><a href=\"#vue源码探究（第三弹）\" class=\"headerlink\" title=\"vue源码探究（第三弹）\"></a>vue源码探究（第三弹）</h1><p>结束了之前prepare，现在开始正式进入vue源码探究部分</p>\n<h2 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h2><p>先从简单的入手，我们先手动实现一个简易版的数据代理吧。</p>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><ol>\n<li>vue数据代理: data对象的所有属性的操作(读/写)由vm对象来代理操作</li>\n<li>好处: 通过vm对象就可以方便的操作data中的数据</li>\n<li>实现:<br>1). 通过Object.defineProperty(vm, key, {})给vm添加与data对象的属性对应的属性<br>2). 所有添加的属性都包含get/set方法<br>3). 在get/set方法中去操作data中对应的属性</li>\n</ol>\n<p><strong>举个例子🌰</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"test\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/compile.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/mvvm.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/observer.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/watcher.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 这里取名为mvvm 是因为在mvvm.js中 </span></span><br><span class=\"line\">  <span class=\"comment\">// 是这样暴露的 function MVVM(options) &#123;&#125; 这里的MVVM和vue是一样的 只是一个命名的问题</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> MVVM(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">\"#test\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'张三2'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(vm.name)  <span class=\"comment\">// 读取的是data中的name,  vm代理对data的读操作</span></span><br><span class=\"line\">  vm.name = <span class=\"string\">'李四2'</span> <span class=\"comment\">// 数据保存到data中的name上, vm代理对data的写操作</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(vm.name, vm._data.name) <span class=\"comment\">// 李四2 李四2</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面这部分是为了简单说明，我们写的mvvm实现了简单的数据代理，接下来，我们来剖析一下它的内部实现。<br>先揭一个底，它的核心实现就是之前讲过的<strong>Object.defineProperty</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">相关于Vue的构造函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MVVM</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将选项对象保存到vm</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = options;</span><br><span class=\"line\">  <span class=\"comment\">// 将data对象保存到vm和datq变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data;</span><br><span class=\"line\">  <span class=\"comment\">//将vm保存在me变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历data中所有属性</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123; <span class=\"comment\">// 属性名: name</span></span><br><span class=\"line\">    <span class=\"comment\">// 对指定属性实现代理</span></span><br><span class=\"line\">    me._proxy(key);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对data进行监视</span></span><br><span class=\"line\">  observe(data, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个用来编译模板的compile对象</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$compile = <span class=\"keyword\">new</span> Compile(options.el || <span class=\"built_in\">document</span>.body, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MVVM.prototype = &#123;</span><br><span class=\"line\">  $watch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, cb, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(<span class=\"keyword\">this</span>, key, cb);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对指定属性实现代理</span></span><br><span class=\"line\">  _proxy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存vm</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 给vm添加指定属性名的属性(使用属性描述)</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(me, key, &#123;</span><br><span class=\"line\">      configurable: <span class=\"literal\">false</span>, <span class=\"comment\">// 不能再重新定义</span></span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可以枚举</span></span><br><span class=\"line\">      <span class=\"comment\">// 当通过vm.name读取属性值时自动调用</span></span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxyGetter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取data中对应属性值返回(实现代理读操作)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> me._data[key];</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 当通过vm.name = 'xxx'时自动调用</span></span><br><span class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxySetter</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将最新的值保存到data中对应的属性上(实现代理写操作)</span></span><br><span class=\"line\">        me._data[key] = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Tips：\"><a href=\"#Tips：\" class=\"headerlink\" title=\"Tips：\"></a>Tips：</h4><p>在源码学习的过程中，掌握到了一个小技巧，读源码的时候，debugger会更加的方便。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-72a9751c3329aa88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-07d1afd886ee65ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>非常好用，我之前太蠢了，只会第一个<code>resume script execution</code></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>未完待续…<br>接下来，还有一个更有趣的东西</p>\n<p><strong>下一章继续~</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue源码探究（第三弹）\"><a href=\"#vue源码探究（第三弹）\" class=\"headerlink\" title=\"vue源码探究（第三弹）\"></a>vue源码探究（第三弹）</h1><p>结束了之前prepare，现在开始正式进入vue源码探究部分</p>\n<h2 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h2><p>先从简单的入手，我们先手动实现一个简易版的数据代理吧。</p>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><ol>\n<li>vue数据代理: data对象的所有属性的操作(读/写)由vm对象来代理操作</li>\n<li>好处: 通过vm对象就可以方便的操作data中的数据</li>\n<li>实现:<br>1). 通过Object.defineProperty(vm, key, {})给vm添加与data对象的属性对应的属性<br>2). 所有添加的属性都包含get/set方法<br>3). 在get/set方法中去操作data中对应的属性</li>\n</ol>\n<p><strong>举个例子🌰</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"test\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/compile.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/mvvm.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/observer.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"js/mvvm/watcher.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 这里取名为mvvm 是因为在mvvm.js中 </span></span><br><span class=\"line\">  <span class=\"comment\">// 是这样暴露的 function MVVM(options) &#123;&#125; 这里的MVVM和vue是一样的 只是一个命名的问题</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> MVVM(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">\"#test\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'张三2'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(vm.name)  <span class=\"comment\">// 读取的是data中的name,  vm代理对data的读操作</span></span><br><span class=\"line\">  vm.name = <span class=\"string\">'李四2'</span> <span class=\"comment\">// 数据保存到data中的name上, vm代理对data的写操作</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(vm.name, vm._data.name) <span class=\"comment\">// 李四2 李四2</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面这部分是为了简单说明，我们写的mvvm实现了简单的数据代理，接下来，我们来剖析一下它的内部实现。<br>先揭一个底，它的核心实现就是之前讲过的<strong>Object.defineProperty</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">相关于Vue的构造函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MVVM</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将选项对象保存到vm</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = options;</span><br><span class=\"line\">  <span class=\"comment\">// 将data对象保存到vm和datq变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data;</span><br><span class=\"line\">  <span class=\"comment\">//将vm保存在me变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历data中所有属性</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123; <span class=\"comment\">// 属性名: name</span></span><br><span class=\"line\">    <span class=\"comment\">// 对指定属性实现代理</span></span><br><span class=\"line\">    me._proxy(key);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对data进行监视</span></span><br><span class=\"line\">  observe(data, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个用来编译模板的compile对象</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$compile = <span class=\"keyword\">new</span> Compile(options.el || <span class=\"built_in\">document</span>.body, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MVVM.prototype = &#123;</span><br><span class=\"line\">  $watch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, cb, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(<span class=\"keyword\">this</span>, key, cb);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对指定属性实现代理</span></span><br><span class=\"line\">  _proxy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存vm</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 给vm添加指定属性名的属性(使用属性描述)</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(me, key, &#123;</span><br><span class=\"line\">      configurable: <span class=\"literal\">false</span>, <span class=\"comment\">// 不能再重新定义</span></span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可以枚举</span></span><br><span class=\"line\">      <span class=\"comment\">// 当通过vm.name读取属性值时自动调用</span></span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxyGetter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取data中对应属性值返回(实现代理读操作)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> me._data[key];</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 当通过vm.name = 'xxx'时自动调用</span></span><br><span class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxySetter</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将最新的值保存到data中对应的属性上(实现代理写操作)</span></span><br><span class=\"line\">        me._data[key] = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Tips：\"><a href=\"#Tips：\" class=\"headerlink\" title=\"Tips：\"></a>Tips：</h4><p>在源码学习的过程中，掌握到了一个小技巧，读源码的时候，debugger会更加的方便。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-72a9751c3329aa88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-07d1afd886ee65ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>非常好用，我之前太蠢了，只会第一个<code>resume script execution</code></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>未完待续…<br>接下来，还有一个更有趣的东西</p>\n<p><strong>下一章继续~</strong></p>\n"},{"layout":"post","title":"vue源码解析(第四弹)","date":"2018-11-25T16:00:00.000Z","description":"结束了上一part的数据代理，这一部分主要讲讲vue的模板解析，感觉这个有点难理解，而且内容有点多","_content":"\n# vue源码探究（第四弹）\n\n结束了上一part的数据代理，这一部分主要讲讲vue的模板解析，感觉这个有点难理解，而且内容有点多，hhh。\n\n## 模板解析\n\n废话不多说，先从简单的入手。\n\n按照之前的套路，先举一个例子🌰：\n\n```HTML\n<div id=\"test\">\n  <p>{{name}}</p>\n</div>\n<script type=\"text/javascript\" src=\"js/mvvm/compile.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/mvvm.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/observer.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/watcher.js\"></script>\n<script type=\"text/javascript\">\n  new MVVM({\n    el: '#test',\n    data: {\n      name: '喵喵喵'\n    }\n  })\n  // 这时候，我们的页面还是渲染出 喵喵喵\n</script>\n```\n\n接下来讲讲内部的相关实现：\n\n我们的MVVM中的构造函数中有什么东西，可以解析我们的模板呢？\n\n```js\n// 创建一个用来编译模板的compile对象\nthis.$compile = new Compile(options.el || document.body, this)\n```\n\n#### 什么是Compile？\n\n一行一行注释着解读\n\n```js\nfunction Compile(el, vm) {\n  // 保存vm\n  this.$vm = vm;\n  // 保存el元素\n  this.$el = this.isElementNode(el) ? el : document.querySelector(el);\n  // 如果el元素存在\n  if (this.$el) {\n    // 1. 取出el中所有子节点, 封装在一个framgment对象中\n    // 这里的node2Fragment 就是将node -> 放入 Fragment中，documentFragment将node进行批量处理\n    this.$fragment = this.node2Fragment(this.$el);\n    // 2. 编译fragment中所有层次子节点\n    this.init();\n    // 3. 将fragment添加到el中\n    this.$el.appendChild(this.$fragment);\n  }\n}\n\nCompile.prototype = {\n  node2Fragment: function (el) {\n    var fragment = document.createDocumentFragment(),\n      child;\n\n    // 将原生节点拷贝到fragment\n    while (child = el.firstChild) {\n      fragment.appendChild(child);\n    }\n\n    return fragment;\n  },\n\n  init: function () {\n    // 编译fragment\n    this.compileElement(this.$fragment);\n  },\n\n  compileElement: function (el) {\n    // 得到所有子节点\n    var childNodes = el.childNodes,\n      // 保存compile对象\n      me = this;\n    // 遍历所有子节点\n    [].slice.call(childNodes).forEach(function (node) {\n      // 得到节点的文本内容\n      var text = node.textContent;\n      // 正则对象(匹配大括号表达式)\n      var reg = /\\{\\{(.*)\\}\\}/;  // {{name}}\n      // 这里提出一个问题，为什么这里的正则匹配要用/\\{\\{(.*)\\}\\}/，而不是/\\{\\{.*\\}\\}/呢？\n      // 其实/\\{\\{.*\\}\\}/就可以匹配到{{xxx}},这里加一个()的意义是，用于.$1，来取得{{}}中的值，eg：name\n      // 如果是元素节点\n      if (me.isElementNode(node)) {\n        // 编译元素节点的指令属性\n        me.compile(node);\n        // 如果是一个大括号表达式格式的文本节点\n      } else if (me.isTextNode(node) && reg.test(text)) {\n        // 编译大括号表达式格式的文本节点\n        me.compileText(node, RegExp.$1); // RegExp.$1: 表达式   name\n      }\n      // 如果子节点还有子节点\n      if (node.childNodes && node.childNodes.length) {\n        // 递归调用实现所有层次节点的编译\n        me.compileElement(node);\n      }\n    });\n  },\n\n  compile: function (node) {\n    // 得到所有标签属性节点\n    var nodeAttrs = node.attributes,\n      me = this;\n    // 遍历所有属性\n    [].slice.call(nodeAttrs).forEach(function (attr) {\n      // 得到属性名: v-on:click\n      var attrName = attr.name;\n      // 判断是否是指令属性\n      if (me.isDirective(attrName)) {\n        // 得到表达式(属性值): test\n        var exp = attr.value;\n        // 得到指令名: on:click\n        var dir = attrName.substring(2);\n        // 事件指令\n        if (me.isEventDirective(dir)) {\n          // 解析事件指令\n          compileUtil.eventHandler(node, me.$vm, exp, dir);\n        // 普通指令\n        } else {\n          // 解析普通指令\n          compileUtil[dir] && compileUtil[dir](node, me.$vm, exp);\n        }\n\n        // 移除指令属性\n        node.removeAttribute(attrName);\n      }\n    });\n  },\n\n  compileText: function (node, exp) {\n    // 调用编译工具对象解析\n    compileUtil.text(node, this.$vm, exp);\n  },\n\n  isDirective: function (attr) {\n    return attr.indexOf('v-') == 0;\n  },\n\n  isEventDirective: function (dir) {\n    return dir.indexOf('on') === 0;\n  },\n\n  isElementNode: function (node) {\n    return node.nodeType == 1;\n  },\n\n  isTextNode: function (node) {\n    return node.nodeType == 3;\n  }\n};\n\n// 指令处理集合\nvar compileUtil = {\n  // 解析: v-text/{{}}\n  text: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'text');\n  },\n  // 解析: v-html\n  html: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'html');\n  },\n\n  // 解析: v-model\n  model: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'model');\n\n    var me = this,\n      val = this._getVMVal(vm, exp);\n    node.addEventListener('input', function (e) {\n      var newValue = e.target.value;\n      if (val === newValue) {\n        return;\n      }\n\n      me._setVMVal(vm, exp, newValue);\n      val = newValue;\n    });\n  },\n\n  // 解析: v-class\n  class: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'class');\n  },\n\n  // 真正用于解析指令的方法\n  bind: function (node, vm, exp, dir) {\n    /*实现初始化显示*/\n    // 根据指令名(text)得到对应的更新节点函数\n    // 取到一个object的属性，有2个方法，一个是obj. 一个是obj[]\n    // 当我们要取得属性是一个变量的时候，使用obj[]\n    var updaterFn = updater[dir + 'Updater'];\n    // 如果存在调用来更新节点\n    updaterFn && updaterFn(node, this._getVMVal(vm, exp));\n\n    // 创建表达式对应的watcher对象\n    new Watcher(vm, exp, function (value, oldValue) {/*更新界面*/\n      // 当对应的属性值发生了变化时, 自动调用, 更新对应的节点\n      updaterFn && updaterFn(node, value, oldValue);\n    });\n  },\n\n  // 事件处理\n  eventHandler: function (node, vm, exp, dir) {\n    // 得到事件名/类型: click\n    var eventType = dir.split(':')[1],\n      // 根据表达式得到事件处理函数(从methods中): test(){}\n      fn = vm.$options.methods && vm.$options.methods[exp];\n    // 如果都存在\n    if (eventType && fn) {\n      // 绑定指定事件名和回调函数的DOM事件监听, 将回调函数中的this强制绑定为vm\n      node.addEventListener(eventType, fn.bind(vm), false);\n    }\n  },\n\n  // 得到表达式对应的value\n  _getVMVal: function (vm, exp) {\n    // 这里为什么要forEach呢？\n    // 如果你的exp是a.b.c.c.d呢 就需要forEach 如果只是一层 当然不需要遍历啦\n    var val = vm._data;\n    exp = exp.split('.');\n    exp.forEach(function (k) {\n      val = val[k];\n    });\n    return val;\n  },\n\n  _setVMVal: function (vm, exp, value) {\n    var val = vm._data;\n    exp = exp.split('.');\n    exp.forEach(function (k, i) {\n      // 非最后一个key，更新val的值\n      if (i < exp.length - 1) {\n        val = val[k];\n      } else {\n        val[k] = value;\n      }\n    });\n  }\n};\n\n// 包含多个用于更新节点方法的对象\nvar updater = {\n  // 更新节点的textContent\n  textUpdater: function (node, value) {\n    node.textContent = typeof value == 'undefined' ? '' : value;\n  },\n\n  // 更新节点的innerHTML\n  htmlUpdater: function (node, value) {\n    node.innerHTML = typeof value == 'undefined' ? '' : value;\n  },\n\n  // 更新节点的className\n  classUpdater: function (node, value, oldValue) {\n    var className = node.className;\n    className = className.replace(oldValue, '').replace(/\\s$/, '');\n\n    var space = className && String(value) ? ' ' : '';\n\n    node.className = className + space + value;\n  },\n\n  // 更新节点的value\n  modelUpdater: function (node, value, oldValue) {\n    node.value = typeof value == 'undefined' ? '' : value;\n  }\n};\n\n```\n\n#### 最后\n\n未完待续... \n接下来，还有一个更有趣的东西\n\n**下一章继续~**","source":"_posts/2018-11-26-vue源码探究(第四弹) 下午3.56.56.md","raw":"---\nlayout: post\ntitle: \"vue源码解析(第四弹)\"\ndate: 2018-11-26\ncategories:\n  - vue\ndescription: 结束了上一part的数据代理，这一部分主要讲讲vue的模板解析，感觉这个有点难理解，而且内容有点多\n---\n\n# vue源码探究（第四弹）\n\n结束了上一part的数据代理，这一部分主要讲讲vue的模板解析，感觉这个有点难理解，而且内容有点多，hhh。\n\n## 模板解析\n\n废话不多说，先从简单的入手。\n\n按照之前的套路，先举一个例子🌰：\n\n```HTML\n<div id=\"test\">\n  <p>{{name}}</p>\n</div>\n<script type=\"text/javascript\" src=\"js/mvvm/compile.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/mvvm.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/observer.js\"></script>\n<script type=\"text/javascript\" src=\"js/mvvm/watcher.js\"></script>\n<script type=\"text/javascript\">\n  new MVVM({\n    el: '#test',\n    data: {\n      name: '喵喵喵'\n    }\n  })\n  // 这时候，我们的页面还是渲染出 喵喵喵\n</script>\n```\n\n接下来讲讲内部的相关实现：\n\n我们的MVVM中的构造函数中有什么东西，可以解析我们的模板呢？\n\n```js\n// 创建一个用来编译模板的compile对象\nthis.$compile = new Compile(options.el || document.body, this)\n```\n\n#### 什么是Compile？\n\n一行一行注释着解读\n\n```js\nfunction Compile(el, vm) {\n  // 保存vm\n  this.$vm = vm;\n  // 保存el元素\n  this.$el = this.isElementNode(el) ? el : document.querySelector(el);\n  // 如果el元素存在\n  if (this.$el) {\n    // 1. 取出el中所有子节点, 封装在一个framgment对象中\n    // 这里的node2Fragment 就是将node -> 放入 Fragment中，documentFragment将node进行批量处理\n    this.$fragment = this.node2Fragment(this.$el);\n    // 2. 编译fragment中所有层次子节点\n    this.init();\n    // 3. 将fragment添加到el中\n    this.$el.appendChild(this.$fragment);\n  }\n}\n\nCompile.prototype = {\n  node2Fragment: function (el) {\n    var fragment = document.createDocumentFragment(),\n      child;\n\n    // 将原生节点拷贝到fragment\n    while (child = el.firstChild) {\n      fragment.appendChild(child);\n    }\n\n    return fragment;\n  },\n\n  init: function () {\n    // 编译fragment\n    this.compileElement(this.$fragment);\n  },\n\n  compileElement: function (el) {\n    // 得到所有子节点\n    var childNodes = el.childNodes,\n      // 保存compile对象\n      me = this;\n    // 遍历所有子节点\n    [].slice.call(childNodes).forEach(function (node) {\n      // 得到节点的文本内容\n      var text = node.textContent;\n      // 正则对象(匹配大括号表达式)\n      var reg = /\\{\\{(.*)\\}\\}/;  // {{name}}\n      // 这里提出一个问题，为什么这里的正则匹配要用/\\{\\{(.*)\\}\\}/，而不是/\\{\\{.*\\}\\}/呢？\n      // 其实/\\{\\{.*\\}\\}/就可以匹配到{{xxx}},这里加一个()的意义是，用于.$1，来取得{{}}中的值，eg：name\n      // 如果是元素节点\n      if (me.isElementNode(node)) {\n        // 编译元素节点的指令属性\n        me.compile(node);\n        // 如果是一个大括号表达式格式的文本节点\n      } else if (me.isTextNode(node) && reg.test(text)) {\n        // 编译大括号表达式格式的文本节点\n        me.compileText(node, RegExp.$1); // RegExp.$1: 表达式   name\n      }\n      // 如果子节点还有子节点\n      if (node.childNodes && node.childNodes.length) {\n        // 递归调用实现所有层次节点的编译\n        me.compileElement(node);\n      }\n    });\n  },\n\n  compile: function (node) {\n    // 得到所有标签属性节点\n    var nodeAttrs = node.attributes,\n      me = this;\n    // 遍历所有属性\n    [].slice.call(nodeAttrs).forEach(function (attr) {\n      // 得到属性名: v-on:click\n      var attrName = attr.name;\n      // 判断是否是指令属性\n      if (me.isDirective(attrName)) {\n        // 得到表达式(属性值): test\n        var exp = attr.value;\n        // 得到指令名: on:click\n        var dir = attrName.substring(2);\n        // 事件指令\n        if (me.isEventDirective(dir)) {\n          // 解析事件指令\n          compileUtil.eventHandler(node, me.$vm, exp, dir);\n        // 普通指令\n        } else {\n          // 解析普通指令\n          compileUtil[dir] && compileUtil[dir](node, me.$vm, exp);\n        }\n\n        // 移除指令属性\n        node.removeAttribute(attrName);\n      }\n    });\n  },\n\n  compileText: function (node, exp) {\n    // 调用编译工具对象解析\n    compileUtil.text(node, this.$vm, exp);\n  },\n\n  isDirective: function (attr) {\n    return attr.indexOf('v-') == 0;\n  },\n\n  isEventDirective: function (dir) {\n    return dir.indexOf('on') === 0;\n  },\n\n  isElementNode: function (node) {\n    return node.nodeType == 1;\n  },\n\n  isTextNode: function (node) {\n    return node.nodeType == 3;\n  }\n};\n\n// 指令处理集合\nvar compileUtil = {\n  // 解析: v-text/{{}}\n  text: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'text');\n  },\n  // 解析: v-html\n  html: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'html');\n  },\n\n  // 解析: v-model\n  model: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'model');\n\n    var me = this,\n      val = this._getVMVal(vm, exp);\n    node.addEventListener('input', function (e) {\n      var newValue = e.target.value;\n      if (val === newValue) {\n        return;\n      }\n\n      me._setVMVal(vm, exp, newValue);\n      val = newValue;\n    });\n  },\n\n  // 解析: v-class\n  class: function (node, vm, exp) {\n    this.bind(node, vm, exp, 'class');\n  },\n\n  // 真正用于解析指令的方法\n  bind: function (node, vm, exp, dir) {\n    /*实现初始化显示*/\n    // 根据指令名(text)得到对应的更新节点函数\n    // 取到一个object的属性，有2个方法，一个是obj. 一个是obj[]\n    // 当我们要取得属性是一个变量的时候，使用obj[]\n    var updaterFn = updater[dir + 'Updater'];\n    // 如果存在调用来更新节点\n    updaterFn && updaterFn(node, this._getVMVal(vm, exp));\n\n    // 创建表达式对应的watcher对象\n    new Watcher(vm, exp, function (value, oldValue) {/*更新界面*/\n      // 当对应的属性值发生了变化时, 自动调用, 更新对应的节点\n      updaterFn && updaterFn(node, value, oldValue);\n    });\n  },\n\n  // 事件处理\n  eventHandler: function (node, vm, exp, dir) {\n    // 得到事件名/类型: click\n    var eventType = dir.split(':')[1],\n      // 根据表达式得到事件处理函数(从methods中): test(){}\n      fn = vm.$options.methods && vm.$options.methods[exp];\n    // 如果都存在\n    if (eventType && fn) {\n      // 绑定指定事件名和回调函数的DOM事件监听, 将回调函数中的this强制绑定为vm\n      node.addEventListener(eventType, fn.bind(vm), false);\n    }\n  },\n\n  // 得到表达式对应的value\n  _getVMVal: function (vm, exp) {\n    // 这里为什么要forEach呢？\n    // 如果你的exp是a.b.c.c.d呢 就需要forEach 如果只是一层 当然不需要遍历啦\n    var val = vm._data;\n    exp = exp.split('.');\n    exp.forEach(function (k) {\n      val = val[k];\n    });\n    return val;\n  },\n\n  _setVMVal: function (vm, exp, value) {\n    var val = vm._data;\n    exp = exp.split('.');\n    exp.forEach(function (k, i) {\n      // 非最后一个key，更新val的值\n      if (i < exp.length - 1) {\n        val = val[k];\n      } else {\n        val[k] = value;\n      }\n    });\n  }\n};\n\n// 包含多个用于更新节点方法的对象\nvar updater = {\n  // 更新节点的textContent\n  textUpdater: function (node, value) {\n    node.textContent = typeof value == 'undefined' ? '' : value;\n  },\n\n  // 更新节点的innerHTML\n  htmlUpdater: function (node, value) {\n    node.innerHTML = typeof value == 'undefined' ? '' : value;\n  },\n\n  // 更新节点的className\n  classUpdater: function (node, value, oldValue) {\n    var className = node.className;\n    className = className.replace(oldValue, '').replace(/\\s$/, '');\n\n    var space = className && String(value) ? ' ' : '';\n\n    node.className = className + space + value;\n  },\n\n  // 更新节点的value\n  modelUpdater: function (node, value, oldValue) {\n    node.value = typeof value == 'undefined' ? '' : value;\n  }\n};\n\n```\n\n#### 最后\n\n未完待续... \n接下来，还有一个更有趣的东西\n\n**下一章继续~**","slug":"2018-11-26-vue源码探究(第四弹) 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.723Z","comments":1,"photos":[],"link":"","_id":"cjvaywf1m00245096acjaorp9","content":"<h1 id=\"vue源码探究（第四弹）\"><a href=\"#vue源码探究（第四弹）\" class=\"headerlink\" title=\"vue源码探究（第四弹）\"></a>vue源码探究（第四弹）</h1><p>结束了上一part的数据代理，这一部分主要讲讲vue的模板解析，感觉这个有点难理解，而且内容有点多，hhh。</p>\n<h2 id=\"模板解析\"><a href=\"#模板解析\" class=\"headerlink\" title=\"模板解析\"></a>模板解析</h2><p>废话不多说，先从简单的入手。</p>\n<p>按照之前的套路，先举一个例子🌰：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/compile.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/mvvm.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/observer.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/watcher.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> MVVM(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      name: <span class=\"string\">'喵喵喵'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 这时候，我们的页面还是渲染出 喵喵喵</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来讲讲内部的相关实现：</p>\n<p>我们的MVVM中的构造函数中有什么东西，可以解析我们的模板呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个用来编译模板的compile对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$compile = <span class=\"keyword\">new</span> Compile(options.el || <span class=\"built_in\">document</span>.body, <span class=\"keyword\">this</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是Compile？\"><a href=\"#什么是Compile？\" class=\"headerlink\" title=\"什么是Compile？\"></a>什么是Compile？</h4><p>一行一行注释着解读</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">el, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保存vm</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$vm = vm;</span><br><span class=\"line\">  <span class=\"comment\">// 保存el元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$el = <span class=\"keyword\">this</span>.isElementNode(el) ? el : <span class=\"built_in\">document</span>.querySelector(el);</span><br><span class=\"line\">  <span class=\"comment\">// 如果el元素存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.$el) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 取出el中所有子节点, 封装在一个framgment对象中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的node2Fragment 就是将node -&gt; 放入 Fragment中，documentFragment将node进行批量处理</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$fragment = <span class=\"keyword\">this</span>.node2Fragment(<span class=\"keyword\">this</span>.$el);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 编译fragment中所有层次子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">    <span class=\"comment\">// 3. 将fragment添加到el中</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$el.appendChild(<span class=\"keyword\">this</span>.$fragment);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Compile.prototype = &#123;</span><br><span class=\"line\">  node2Fragment: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment(),</span><br><span class=\"line\">      child;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将原生节点拷贝到fragment</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (child = el.firstChild) &#123;</span><br><span class=\"line\">      fragment.appendChild(child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 编译fragment</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.compileElement(<span class=\"keyword\">this</span>.$fragment);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  compileElement: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 得到所有子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> childNodes = el.childNodes,</span><br><span class=\"line\">      <span class=\"comment\">// 保存compile对象</span></span><br><span class=\"line\">      me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有子节点</span></span><br><span class=\"line\">    [].slice.call(childNodes).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 得到节点的文本内容</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> text = node.textContent;</span><br><span class=\"line\">      <span class=\"comment\">// 正则对象(匹配大括号表达式)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>;  <span class=\"comment\">// &#123;&#123;name&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里提出一个问题，为什么这里的正则匹配要用/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/，而不是/\\&#123;\\&#123;.*\\&#125;\\&#125;/呢？</span></span><br><span class=\"line\">      <span class=\"comment\">// 其实/\\&#123;\\&#123;.*\\&#125;\\&#125;/就可以匹配到&#123;&#123;xxx&#125;&#125;,这里加一个()的意义是，用于.$1，来取得&#123;&#123;&#125;&#125;中的值，eg：name</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果是元素节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (me.isElementNode(node)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 编译元素节点的指令属性</span></span><br><span class=\"line\">        me.compile(node);</span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个大括号表达式格式的文本节点</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 编译大括号表达式格式的文本节点</span></span><br><span class=\"line\">        me.compileText(node, <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>); <span class=\"comment\">// RegExp.$1: 表达式   name</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果子节点还有子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 递归调用实现所有层次节点的编译</span></span><br><span class=\"line\">        me.compileElement(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  compile: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 得到所有标签属性节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeAttrs = node.attributes,</span><br><span class=\"line\">      me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有属性</span></span><br><span class=\"line\">    [].slice.call(nodeAttrs).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 得到属性名: v-on:click</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> attrName = attr.name;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否是指令属性</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (me.isDirective(attrName)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 得到表达式(属性值): test</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> exp = attr.value;</span><br><span class=\"line\">        <span class=\"comment\">// 得到指令名: on:click</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> dir = attrName.substring(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 事件指令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 解析事件指令</span></span><br><span class=\"line\">          compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class=\"line\">        <span class=\"comment\">// 普通指令</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 解析普通指令</span></span><br><span class=\"line\">          compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除指令属性</span></span><br><span class=\"line\">        node.removeAttribute(attrName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  compileText: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用编译工具对象解析</span></span><br><span class=\"line\">    compileUtil.text(node, <span class=\"keyword\">this</span>.$vm, exp);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isDirective: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attr.indexOf(<span class=\"string\">'v-'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isEventDirective: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dir.indexOf(<span class=\"string\">'on'</span>) === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isElementNode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.nodeType == <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isTextNode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.nodeType == <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指令处理集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compileUtil = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-text/&#123;&#123;&#125;&#125;</span></span><br><span class=\"line\">  text: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'text'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-html</span></span><br><span class=\"line\">  html: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'html'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-model</span></span><br><span class=\"line\">  model: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'model'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">      val = <span class=\"keyword\">this</span>._getVMVal(vm, exp);</span><br><span class=\"line\">    node.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> newValue = e.target.value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val === newValue) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      me._setVMVal(vm, exp, newValue);</span><br><span class=\"line\">      val = newValue;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-class</span></span><br><span class=\"line\">  class: function (node, vm, exp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'class'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 真正用于解析指令的方法</span></span><br><span class=\"line\">  bind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*实现初始化显示*/</span></span><br><span class=\"line\">    <span class=\"comment\">// 根据指令名(text)得到对应的更新节点函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 取到一个object的属性，有2个方法，一个是obj. 一个是obj[]</span></span><br><span class=\"line\">    <span class=\"comment\">// 当我们要取得属性是一个变量的时候，使用obj[]</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> updaterFn = updater[dir + <span class=\"string\">'Updater'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在调用来更新节点</span></span><br><span class=\"line\">    updaterFn &amp;&amp; updaterFn(node, <span class=\"keyword\">this</span>._getVMVal(vm, exp));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建表达式对应的watcher对象</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(vm, exp, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, oldValue</span>) </span>&#123;<span class=\"comment\">/*更新界面*/</span></span><br><span class=\"line\">      <span class=\"comment\">// 当对应的属性值发生了变化时, 自动调用, 更新对应的节点</span></span><br><span class=\"line\">      updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 事件处理</span></span><br><span class=\"line\">  eventHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 得到事件名/类型: click</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> eventType = dir.split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 根据表达式得到事件处理函数(从methods中): test()&#123;&#125;</span></span><br><span class=\"line\">      fn = vm.$options.methods &amp;&amp; vm.$options.methods[exp];</span><br><span class=\"line\">    <span class=\"comment\">// 如果都存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventType &amp;&amp; fn) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 绑定指定事件名和回调函数的DOM事件监听, 将回调函数中的this强制绑定为vm</span></span><br><span class=\"line\">      node.addEventListener(eventType, fn.bind(vm), <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 得到表达式对应的value</span></span><br><span class=\"line\">  _getVMVal: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里为什么要forEach呢？</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果你的exp是a.b.c.c.d呢 就需要forEach 如果只是一层 当然不需要遍历啦</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm._data;</span><br><span class=\"line\">    exp = exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">    exp.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">      val = val[k];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  _setVMVal: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">vm, exp, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm._data;</span><br><span class=\"line\">    exp = exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">    exp.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k, i</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 非最后一个key，更新val的值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &lt; exp.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        val = val[k];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val[k] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包含多个用于更新节点方法的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> updater = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的textContent</span></span><br><span class=\"line\">  textUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value</span>) </span>&#123;</span><br><span class=\"line\">    node.textContent = <span class=\"keyword\">typeof</span> value == <span class=\"string\">'undefined'</span> ? <span class=\"string\">''</span> : value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的innerHTML</span></span><br><span class=\"line\">  htmlUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value</span>) </span>&#123;</span><br><span class=\"line\">    node.innerHTML = <span class=\"keyword\">typeof</span> value == <span class=\"string\">'undefined'</span> ? <span class=\"string\">''</span> : value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的className</span></span><br><span class=\"line\">  classUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> className = node.className;</span><br><span class=\"line\">    className = className.replace(oldValue, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s$/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> space = className &amp;&amp; <span class=\"built_in\">String</span>(value) ? <span class=\"string\">' '</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.className = className + space + value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的value</span></span><br><span class=\"line\">  modelUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    node.value = <span class=\"keyword\">typeof</span> value == <span class=\"string\">'undefined'</span> ? <span class=\"string\">''</span> : value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>未完待续…<br>接下来，还有一个更有趣的东西</p>\n<p><strong>下一章继续~</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue源码探究（第四弹）\"><a href=\"#vue源码探究（第四弹）\" class=\"headerlink\" title=\"vue源码探究（第四弹）\"></a>vue源码探究（第四弹）</h1><p>结束了上一part的数据代理，这一部分主要讲讲vue的模板解析，感觉这个有点难理解，而且内容有点多，hhh。</p>\n<h2 id=\"模板解析\"><a href=\"#模板解析\" class=\"headerlink\" title=\"模板解析\"></a>模板解析</h2><p>废话不多说，先从简单的入手。</p>\n<p>按照之前的套路，先举一个例子🌰：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/compile.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/mvvm.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/observer.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/mvvm/watcher.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> MVVM(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      name: <span class=\"string\">'喵喵喵'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 这时候，我们的页面还是渲染出 喵喵喵</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来讲讲内部的相关实现：</p>\n<p>我们的MVVM中的构造函数中有什么东西，可以解析我们的模板呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个用来编译模板的compile对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$compile = <span class=\"keyword\">new</span> Compile(options.el || <span class=\"built_in\">document</span>.body, <span class=\"keyword\">this</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是Compile？\"><a href=\"#什么是Compile？\" class=\"headerlink\" title=\"什么是Compile？\"></a>什么是Compile？</h4><p>一行一行注释着解读</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">el, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保存vm</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$vm = vm;</span><br><span class=\"line\">  <span class=\"comment\">// 保存el元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$el = <span class=\"keyword\">this</span>.isElementNode(el) ? el : <span class=\"built_in\">document</span>.querySelector(el);</span><br><span class=\"line\">  <span class=\"comment\">// 如果el元素存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.$el) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 取出el中所有子节点, 封装在一个framgment对象中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的node2Fragment 就是将node -&gt; 放入 Fragment中，documentFragment将node进行批量处理</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$fragment = <span class=\"keyword\">this</span>.node2Fragment(<span class=\"keyword\">this</span>.$el);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 编译fragment中所有层次子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">    <span class=\"comment\">// 3. 将fragment添加到el中</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$el.appendChild(<span class=\"keyword\">this</span>.$fragment);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Compile.prototype = &#123;</span><br><span class=\"line\">  node2Fragment: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment(),</span><br><span class=\"line\">      child;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将原生节点拷贝到fragment</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (child = el.firstChild) &#123;</span><br><span class=\"line\">      fragment.appendChild(child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 编译fragment</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.compileElement(<span class=\"keyword\">this</span>.$fragment);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  compileElement: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 得到所有子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> childNodes = el.childNodes,</span><br><span class=\"line\">      <span class=\"comment\">// 保存compile对象</span></span><br><span class=\"line\">      me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有子节点</span></span><br><span class=\"line\">    [].slice.call(childNodes).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 得到节点的文本内容</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> text = node.textContent;</span><br><span class=\"line\">      <span class=\"comment\">// 正则对象(匹配大括号表达式)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>;  <span class=\"comment\">// &#123;&#123;name&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里提出一个问题，为什么这里的正则匹配要用/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/，而不是/\\&#123;\\&#123;.*\\&#125;\\&#125;/呢？</span></span><br><span class=\"line\">      <span class=\"comment\">// 其实/\\&#123;\\&#123;.*\\&#125;\\&#125;/就可以匹配到&#123;&#123;xxx&#125;&#125;,这里加一个()的意义是，用于.$1，来取得&#123;&#123;&#125;&#125;中的值，eg：name</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果是元素节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (me.isElementNode(node)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 编译元素节点的指令属性</span></span><br><span class=\"line\">        me.compile(node);</span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个大括号表达式格式的文本节点</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 编译大括号表达式格式的文本节点</span></span><br><span class=\"line\">        me.compileText(node, <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>); <span class=\"comment\">// RegExp.$1: 表达式   name</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果子节点还有子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 递归调用实现所有层次节点的编译</span></span><br><span class=\"line\">        me.compileElement(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  compile: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 得到所有标签属性节点</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeAttrs = node.attributes,</span><br><span class=\"line\">      me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有属性</span></span><br><span class=\"line\">    [].slice.call(nodeAttrs).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 得到属性名: v-on:click</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> attrName = attr.name;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否是指令属性</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (me.isDirective(attrName)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 得到表达式(属性值): test</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> exp = attr.value;</span><br><span class=\"line\">        <span class=\"comment\">// 得到指令名: on:click</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> dir = attrName.substring(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 事件指令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 解析事件指令</span></span><br><span class=\"line\">          compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class=\"line\">        <span class=\"comment\">// 普通指令</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 解析普通指令</span></span><br><span class=\"line\">          compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除指令属性</span></span><br><span class=\"line\">        node.removeAttribute(attrName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  compileText: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用编译工具对象解析</span></span><br><span class=\"line\">    compileUtil.text(node, <span class=\"keyword\">this</span>.$vm, exp);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isDirective: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> attr.indexOf(<span class=\"string\">'v-'</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isEventDirective: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dir.indexOf(<span class=\"string\">'on'</span>) === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isElementNode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.nodeType == <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  isTextNode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.nodeType == <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指令处理集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compileUtil = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-text/&#123;&#123;&#125;&#125;</span></span><br><span class=\"line\">  text: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'text'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-html</span></span><br><span class=\"line\">  html: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'html'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-model</span></span><br><span class=\"line\">  model: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'model'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">      val = <span class=\"keyword\">this</span>._getVMVal(vm, exp);</span><br><span class=\"line\">    node.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> newValue = e.target.value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val === newValue) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      me._setVMVal(vm, exp, newValue);</span><br><span class=\"line\">      val = newValue;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析: v-class</span></span><br><span class=\"line\">  class: function (node, vm, exp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bind(node, vm, exp, <span class=\"string\">'class'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 真正用于解析指令的方法</span></span><br><span class=\"line\">  bind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*实现初始化显示*/</span></span><br><span class=\"line\">    <span class=\"comment\">// 根据指令名(text)得到对应的更新节点函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 取到一个object的属性，有2个方法，一个是obj. 一个是obj[]</span></span><br><span class=\"line\">    <span class=\"comment\">// 当我们要取得属性是一个变量的时候，使用obj[]</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> updaterFn = updater[dir + <span class=\"string\">'Updater'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在调用来更新节点</span></span><br><span class=\"line\">    updaterFn &amp;&amp; updaterFn(node, <span class=\"keyword\">this</span>._getVMVal(vm, exp));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建表达式对应的watcher对象</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(vm, exp, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, oldValue</span>) </span>&#123;<span class=\"comment\">/*更新界面*/</span></span><br><span class=\"line\">      <span class=\"comment\">// 当对应的属性值发生了变化时, 自动调用, 更新对应的节点</span></span><br><span class=\"line\">      updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 事件处理</span></span><br><span class=\"line\">  eventHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, vm, exp, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 得到事件名/类型: click</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> eventType = dir.split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 根据表达式得到事件处理函数(从methods中): test()&#123;&#125;</span></span><br><span class=\"line\">      fn = vm.$options.methods &amp;&amp; vm.$options.methods[exp];</span><br><span class=\"line\">    <span class=\"comment\">// 如果都存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventType &amp;&amp; fn) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 绑定指定事件名和回调函数的DOM事件监听, 将回调函数中的this强制绑定为vm</span></span><br><span class=\"line\">      node.addEventListener(eventType, fn.bind(vm), <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 得到表达式对应的value</span></span><br><span class=\"line\">  _getVMVal: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里为什么要forEach呢？</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果你的exp是a.b.c.c.d呢 就需要forEach 如果只是一层 当然不需要遍历啦</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm._data;</span><br><span class=\"line\">    exp = exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">    exp.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">      val = val[k];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  _setVMVal: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">vm, exp, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm._data;</span><br><span class=\"line\">    exp = exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">    exp.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k, i</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 非最后一个key，更新val的值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &lt; exp.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        val = val[k];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val[k] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包含多个用于更新节点方法的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> updater = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的textContent</span></span><br><span class=\"line\">  textUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value</span>) </span>&#123;</span><br><span class=\"line\">    node.textContent = <span class=\"keyword\">typeof</span> value == <span class=\"string\">'undefined'</span> ? <span class=\"string\">''</span> : value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的innerHTML</span></span><br><span class=\"line\">  htmlUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value</span>) </span>&#123;</span><br><span class=\"line\">    node.innerHTML = <span class=\"keyword\">typeof</span> value == <span class=\"string\">'undefined'</span> ? <span class=\"string\">''</span> : value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的className</span></span><br><span class=\"line\">  classUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> className = node.className;</span><br><span class=\"line\">    className = className.replace(oldValue, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s$/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> space = className &amp;&amp; <span class=\"built_in\">String</span>(value) ? <span class=\"string\">' '</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.className = className + space + value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新节点的value</span></span><br><span class=\"line\">  modelUpdater: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, value, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    node.value = <span class=\"keyword\">typeof</span> value == <span class=\"string\">'undefined'</span> ? <span class=\"string\">''</span> : value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>未完待续…<br>接下来，还有一个更有趣的东西</p>\n<p><strong>下一章继续~</strong></p>\n"},{"layout":"post","title":"vue源码解析(第五弹)","date":"2018-12-04T16:00:00.000Z","description":"不知不觉，到了vue源码探究的最后一部分，也是最为复杂的一部分，数据劫持和数据的双向绑定","_content":"\n# vue源码探究(第五弹)\n\n不知不觉，到了vue源码探究的最后一部分，也是最为复杂的一部分，数据劫持和数据的双向绑定。\n\n## 数据劫持\n\n数据劫持我们也可以称为数据绑定。\n\n- 初始化显示：页面(表达式/指令)能从data读取数据显示(编译/解析)\n- 更新显示：更新data中的属性数据 ===》 页面更新\n\n#### 相关问题 prepare\n\n- dep\n  + 与data中的属性一一对应\n- watcher\n  + 与模板中一般指令/大括号表达式一一对应\n\n1. 什么时候一个dep中关联多个watcher?\n  多个指令或表达式用到了当前同一个属性  {{name}} {{name}}\n2. 什么时候一个watcher中关联多个dep?\n  多层表达式的watcher对应多个dep    {{a.b.c}}\n\n#### 例子🌰\n\n```html\n<div id=\"test\">\n  <p>{{name}}</p>\n  <p v-text=\"name\"></p>\n  <p v-text=\"wife.name\"></p>\n  <button v-on:click=\"update\">更新</button>\n</div>\n<script type=\"text/javascript\">\n  new MVVM({\n    el: '#test',\n    data: {\n      name: 'sadamu',  // dep0\n      wife: { // dep1\n        name: 'binbin', // dep2\n        age: 18 // dep3\n      }\n    },\n    methods: {\n      update () {\n        this.name = 'avatar'\n      }\n    }\n    // 主要梳理一下，数据改变如何 -> 页面变化\n    // 1. tap button -> update Fn -> this.name = 'xxx'\n    // 2. 数据劫持中的set方法\n    // 3. newVal ->是object,需要observe(类似a.b.c这种) —> 不是对象,进入dep.notify\n    // 4. notify -> 通知all watcher -> forEach -> sub.update()\n    // 5. watcher中的update 方法，进入 run()\n    // 6. old 和 new value 进行比较，若不同，进入callback更新界面\n    // 7. callback是updateFn,同上\n  })\n</script>\n```\n\n#### Dep\n\n接下来讲讲什么是Dep？\n\n##### Dep(Depend)\n\n- data中的每个属性`(所有层次)`都对应一个dep对象\n- dep创建的时机？\n  - 在初始化define data中，每个属性会创建对应的dep对象\n  - 在data中的某个属性值被设置为新的对象的时候\n- 个数\n  - 与data中的属性一一对应\n- dep对象的结构\n  {\n    id, // 每个dep都有一个唯一的id\n    subs //包含n个对应watcher的数组(subscribes的简写) 它是一个array[]\n  }\n  \n  - subs属性说明\n    - 当一个watcher被创建时，内部会将当前watcher对象添加到对应的dep对象的subs中\n    - 当此data属性的值发生变化时，所有subs中的watcher都会收到更新的通知，从而更新对应的界面\n\n#### Watcher\n\n继续讲讲watcher\n\n- 个数\n  - 模板中每一个`非事件指令`或者`表达式`都对应一个watcher对象\n    - 事件指令，eg:v-on、v-bind...\n- 监视当前表达式数据的变化\n- 创建的时机\n  - 在初始化编译模板的时候\n- watch对象的组成\n  {\n    vm, // vm对象\n    exp, // 对应指令的表达式\n    cb, // callback 当表达式所对应的数据发生变化时候的回调函数\n    value, //当前表达式的值\n    depIds // 表达式中各级属性所对应的dep对象的集合对象，它是一个对象object\n  } \n\n#### 总结\n\n##### dep与watcher的关系是: n:n(多对多)\n\n  - 一个data中的属性对应一个dep，一个dep中可能包含多个watcher\n    - 举个例子🌰：模板中多个地方使用一个表达式或者说使用一个属性。\n    - `<div>{{name}}</div>` \n    - `<p>{{name}}</p>`\n    - 这个时候，一个dep对应多个watcher\n  - 模板中每一个`非事件指令`或`表达式`都对应一个watcher，一个watcher中可能包含多个dep\n    - 举个例子🌰：表达式中包含了几个data属性\n    - `<div>{{a.b.c}}</div>`\n    - 这里的一个watcher，就对应了3个dep\n\n##### 数据绑定使用到的2个核心技术\n  \n  - defineProperty()\n  - 消息订阅与发布\n","source":"_posts/2019-12-05-vue源码探究(第五弹) 下午3.56.56.md","raw":"---\nlayout: post\ntitle: \"vue源码解析(第五弹)\"\ndate: 2018-12-05\ncategories:\n  - vue\ndescription: 不知不觉，到了vue源码探究的最后一部分，也是最为复杂的一部分，数据劫持和数据的双向绑定\n---\n\n# vue源码探究(第五弹)\n\n不知不觉，到了vue源码探究的最后一部分，也是最为复杂的一部分，数据劫持和数据的双向绑定。\n\n## 数据劫持\n\n数据劫持我们也可以称为数据绑定。\n\n- 初始化显示：页面(表达式/指令)能从data读取数据显示(编译/解析)\n- 更新显示：更新data中的属性数据 ===》 页面更新\n\n#### 相关问题 prepare\n\n- dep\n  + 与data中的属性一一对应\n- watcher\n  + 与模板中一般指令/大括号表达式一一对应\n\n1. 什么时候一个dep中关联多个watcher?\n  多个指令或表达式用到了当前同一个属性  {{name}} {{name}}\n2. 什么时候一个watcher中关联多个dep?\n  多层表达式的watcher对应多个dep    {{a.b.c}}\n\n#### 例子🌰\n\n```html\n<div id=\"test\">\n  <p>{{name}}</p>\n  <p v-text=\"name\"></p>\n  <p v-text=\"wife.name\"></p>\n  <button v-on:click=\"update\">更新</button>\n</div>\n<script type=\"text/javascript\">\n  new MVVM({\n    el: '#test',\n    data: {\n      name: 'sadamu',  // dep0\n      wife: { // dep1\n        name: 'binbin', // dep2\n        age: 18 // dep3\n      }\n    },\n    methods: {\n      update () {\n        this.name = 'avatar'\n      }\n    }\n    // 主要梳理一下，数据改变如何 -> 页面变化\n    // 1. tap button -> update Fn -> this.name = 'xxx'\n    // 2. 数据劫持中的set方法\n    // 3. newVal ->是object,需要observe(类似a.b.c这种) —> 不是对象,进入dep.notify\n    // 4. notify -> 通知all watcher -> forEach -> sub.update()\n    // 5. watcher中的update 方法，进入 run()\n    // 6. old 和 new value 进行比较，若不同，进入callback更新界面\n    // 7. callback是updateFn,同上\n  })\n</script>\n```\n\n#### Dep\n\n接下来讲讲什么是Dep？\n\n##### Dep(Depend)\n\n- data中的每个属性`(所有层次)`都对应一个dep对象\n- dep创建的时机？\n  - 在初始化define data中，每个属性会创建对应的dep对象\n  - 在data中的某个属性值被设置为新的对象的时候\n- 个数\n  - 与data中的属性一一对应\n- dep对象的结构\n  {\n    id, // 每个dep都有一个唯一的id\n    subs //包含n个对应watcher的数组(subscribes的简写) 它是一个array[]\n  }\n  \n  - subs属性说明\n    - 当一个watcher被创建时，内部会将当前watcher对象添加到对应的dep对象的subs中\n    - 当此data属性的值发生变化时，所有subs中的watcher都会收到更新的通知，从而更新对应的界面\n\n#### Watcher\n\n继续讲讲watcher\n\n- 个数\n  - 模板中每一个`非事件指令`或者`表达式`都对应一个watcher对象\n    - 事件指令，eg:v-on、v-bind...\n- 监视当前表达式数据的变化\n- 创建的时机\n  - 在初始化编译模板的时候\n- watch对象的组成\n  {\n    vm, // vm对象\n    exp, // 对应指令的表达式\n    cb, // callback 当表达式所对应的数据发生变化时候的回调函数\n    value, //当前表达式的值\n    depIds // 表达式中各级属性所对应的dep对象的集合对象，它是一个对象object\n  } \n\n#### 总结\n\n##### dep与watcher的关系是: n:n(多对多)\n\n  - 一个data中的属性对应一个dep，一个dep中可能包含多个watcher\n    - 举个例子🌰：模板中多个地方使用一个表达式或者说使用一个属性。\n    - `<div>{{name}}</div>` \n    - `<p>{{name}}</p>`\n    - 这个时候，一个dep对应多个watcher\n  - 模板中每一个`非事件指令`或`表达式`都对应一个watcher，一个watcher中可能包含多个dep\n    - 举个例子🌰：表达式中包含了几个data属性\n    - `<div>{{a.b.c}}</div>`\n    - 这里的一个watcher，就对应了3个dep\n\n##### 数据绑定使用到的2个核心技术\n  \n  - defineProperty()\n  - 消息订阅与发布\n","slug":"2019-12-05-vue源码探究(第五弹) 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.723Z","comments":1,"photos":[],"link":"","_id":"cjvaywf1r00255096lqnql95b","content":"<h1 id=\"vue源码探究-第五弹\"><a href=\"#vue源码探究-第五弹\" class=\"headerlink\" title=\"vue源码探究(第五弹)\"></a>vue源码探究(第五弹)</h1><p>不知不觉，到了vue源码探究的最后一部分，也是最为复杂的一部分，数据劫持和数据的双向绑定。</p>\n<h2 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h2><p>数据劫持我们也可以称为数据绑定。</p>\n<ul>\n<li>初始化显示：页面(表达式/指令)能从data读取数据显示(编译/解析)</li>\n<li>更新显示：更新data中的属性数据 ===》 页面更新</li>\n</ul>\n<h4 id=\"相关问题-prepare\"><a href=\"#相关问题-prepare\" class=\"headerlink\" title=\"相关问题 prepare\"></a>相关问题 prepare</h4><ul>\n<li>dep<ul>\n<li>与data中的属性一一对应</li>\n</ul>\n</li>\n<li>watcher<ul>\n<li>与模板中一般指令/大括号表达式一一对应</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>什么时候一个dep中关联多个watcher?<br>多个指令或表达式用到了当前同一个属性   </li>\n<li>什么时候一个watcher中关联多个dep?<br>多层表达式的watcher对应多个dep    </li>\n</ol>\n<h4 id=\"例子🌰\"><a href=\"#例子🌰\" class=\"headerlink\" title=\"例子🌰\"></a>例子🌰</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"wife.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"update\"</span>&gt;</span>更新<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> MVVM(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      name: <span class=\"string\">'sadamu'</span>,  <span class=\"comment\">// dep0</span></span></span><br><span class=\"line\"><span class=\"javascript\">      wife: &#123; <span class=\"comment\">// dep1</span></span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'binbin'</span>, <span class=\"comment\">// dep2</span></span></span><br><span class=\"line\"><span class=\"javascript\">        age: <span class=\"number\">18</span> <span class=\"comment\">// dep3</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      update () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'avatar'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 主要梳理一下，数据改变如何 -&gt; 页面变化</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1. tap button -&gt; update Fn -&gt; this.name = 'xxx'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2. 数据劫持中的set方法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3. newVal -&gt;是object,需要observe(类似a.b.c这种) —&gt; 不是对象,进入dep.notify</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 4. notify -&gt; 通知all watcher -&gt; forEach -&gt; sub.update()</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 5. watcher中的update 方法，进入 run()</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 6. old 和 new value 进行比较，若不同，进入callback更新界面</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 7. callback是updateFn,同上</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h4><p>接下来讲讲什么是Dep？</p>\n<h5 id=\"Dep-Depend\"><a href=\"#Dep-Depend\" class=\"headerlink\" title=\"Dep(Depend)\"></a>Dep(Depend)</h5><ul>\n<li>data中的每个属性<code>(所有层次)</code>都对应一个dep对象</li>\n<li>dep创建的时机？<ul>\n<li>在初始化define data中，每个属性会创建对应的dep对象</li>\n<li>在data中的某个属性值被设置为新的对象的时候</li>\n</ul>\n</li>\n<li>个数<ul>\n<li>与data中的属性一一对应</li>\n</ul>\n</li>\n<li><p>dep对象的结构<br>{<br>  id, // 每个dep都有一个唯一的id<br>  subs //包含n个对应watcher的数组(subscribes的简写) 它是一个array[]<br>}</p>\n<ul>\n<li>subs属性说明<ul>\n<li>当一个watcher被创建时，内部会将当前watcher对象添加到对应的dep对象的subs中</li>\n<li>当此data属性的值发生变化时，所有subs中的watcher都会收到更新的通知，从而更新对应的界面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h4><p>继续讲讲watcher</p>\n<ul>\n<li>个数<ul>\n<li>模板中每一个<code>非事件指令</code>或者<code>表达式</code>都对应一个watcher对象<ul>\n<li>事件指令，eg:v-on、v-bind…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>监视当前表达式数据的变化</li>\n<li>创建的时机<ul>\n<li>在初始化编译模板的时候</li>\n</ul>\n</li>\n<li>watch对象的组成<br>{<br>  vm, // vm对象<br>  exp, // 对应指令的表达式<br>  cb, // callback 当表达式所对应的数据发生变化时候的回调函数<br>  value, //当前表达式的值<br>  depIds // 表达式中各级属性所对应的dep对象的集合对象，它是一个对象object<br>} </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"dep与watcher的关系是-n-n-多对多\"><a href=\"#dep与watcher的关系是-n-n-多对多\" class=\"headerlink\" title=\"dep与watcher的关系是: n:n(多对多)\"></a>dep与watcher的关系是: n:n(多对多)</h5><ul>\n<li>一个data中的属性对应一个dep，一个dep中可能包含多个watcher<ul>\n<li>举个例子🌰：模板中多个地方使用一个表达式或者说使用一个属性。</li>\n<li><code>&lt;div&gt;&lt;/div&gt;</code> </li>\n<li><code>&lt;p&gt;&lt;/p&gt;</code></li>\n<li>这个时候，一个dep对应多个watcher</li>\n</ul>\n</li>\n<li>模板中每一个<code>非事件指令</code>或<code>表达式</code>都对应一个watcher，一个watcher中可能包含多个dep<ul>\n<li>举个例子🌰：表达式中包含了几个data属性</li>\n<li><code>&lt;div&gt;&lt;/div&gt;</code></li>\n<li>这里的一个watcher，就对应了3个dep</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"数据绑定使用到的2个核心技术\"><a href=\"#数据绑定使用到的2个核心技术\" class=\"headerlink\" title=\"数据绑定使用到的2个核心技术\"></a>数据绑定使用到的2个核心技术</h5><ul>\n<li>defineProperty()</li>\n<li>消息订阅与发布</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue源码探究-第五弹\"><a href=\"#vue源码探究-第五弹\" class=\"headerlink\" title=\"vue源码探究(第五弹)\"></a>vue源码探究(第五弹)</h1><p>不知不觉，到了vue源码探究的最后一部分，也是最为复杂的一部分，数据劫持和数据的双向绑定。</p>\n<h2 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h2><p>数据劫持我们也可以称为数据绑定。</p>\n<ul>\n<li>初始化显示：页面(表达式/指令)能从data读取数据显示(编译/解析)</li>\n<li>更新显示：更新data中的属性数据 ===》 页面更新</li>\n</ul>\n<h4 id=\"相关问题-prepare\"><a href=\"#相关问题-prepare\" class=\"headerlink\" title=\"相关问题 prepare\"></a>相关问题 prepare</h4><ul>\n<li>dep<ul>\n<li>与data中的属性一一对应</li>\n</ul>\n</li>\n<li>watcher<ul>\n<li>与模板中一般指令/大括号表达式一一对应</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>什么时候一个dep中关联多个watcher?<br>多个指令或表达式用到了当前同一个属性   </li>\n<li>什么时候一个watcher中关联多个dep?<br>多层表达式的watcher对应多个dep    </li>\n</ol>\n<h4 id=\"例子🌰\"><a href=\"#例子🌰\" class=\"headerlink\" title=\"例子🌰\"></a>例子🌰</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"wife.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"update\"</span>&gt;</span>更新<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> MVVM(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      name: <span class=\"string\">'sadamu'</span>,  <span class=\"comment\">// dep0</span></span></span><br><span class=\"line\"><span class=\"javascript\">      wife: &#123; <span class=\"comment\">// dep1</span></span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'binbin'</span>, <span class=\"comment\">// dep2</span></span></span><br><span class=\"line\"><span class=\"javascript\">        age: <span class=\"number\">18</span> <span class=\"comment\">// dep3</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      update () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'avatar'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 主要梳理一下，数据改变如何 -&gt; 页面变化</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 1. tap button -&gt; update Fn -&gt; this.name = 'xxx'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 2. 数据劫持中的set方法</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 3. newVal -&gt;是object,需要observe(类似a.b.c这种) —&gt; 不是对象,进入dep.notify</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 4. notify -&gt; 通知all watcher -&gt; forEach -&gt; sub.update()</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 5. watcher中的update 方法，进入 run()</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 6. old 和 new value 进行比较，若不同，进入callback更新界面</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 7. callback是updateFn,同上</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h4><p>接下来讲讲什么是Dep？</p>\n<h5 id=\"Dep-Depend\"><a href=\"#Dep-Depend\" class=\"headerlink\" title=\"Dep(Depend)\"></a>Dep(Depend)</h5><ul>\n<li>data中的每个属性<code>(所有层次)</code>都对应一个dep对象</li>\n<li>dep创建的时机？<ul>\n<li>在初始化define data中，每个属性会创建对应的dep对象</li>\n<li>在data中的某个属性值被设置为新的对象的时候</li>\n</ul>\n</li>\n<li>个数<ul>\n<li>与data中的属性一一对应</li>\n</ul>\n</li>\n<li><p>dep对象的结构<br>{<br>  id, // 每个dep都有一个唯一的id<br>  subs //包含n个对应watcher的数组(subscribes的简写) 它是一个array[]<br>}</p>\n<ul>\n<li>subs属性说明<ul>\n<li>当一个watcher被创建时，内部会将当前watcher对象添加到对应的dep对象的subs中</li>\n<li>当此data属性的值发生变化时，所有subs中的watcher都会收到更新的通知，从而更新对应的界面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h4><p>继续讲讲watcher</p>\n<ul>\n<li>个数<ul>\n<li>模板中每一个<code>非事件指令</code>或者<code>表达式</code>都对应一个watcher对象<ul>\n<li>事件指令，eg:v-on、v-bind…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>监视当前表达式数据的变化</li>\n<li>创建的时机<ul>\n<li>在初始化编译模板的时候</li>\n</ul>\n</li>\n<li>watch对象的组成<br>{<br>  vm, // vm对象<br>  exp, // 对应指令的表达式<br>  cb, // callback 当表达式所对应的数据发生变化时候的回调函数<br>  value, //当前表达式的值<br>  depIds // 表达式中各级属性所对应的dep对象的集合对象，它是一个对象object<br>} </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"dep与watcher的关系是-n-n-多对多\"><a href=\"#dep与watcher的关系是-n-n-多对多\" class=\"headerlink\" title=\"dep与watcher的关系是: n:n(多对多)\"></a>dep与watcher的关系是: n:n(多对多)</h5><ul>\n<li>一个data中的属性对应一个dep，一个dep中可能包含多个watcher<ul>\n<li>举个例子🌰：模板中多个地方使用一个表达式或者说使用一个属性。</li>\n<li><code>&lt;div&gt;&lt;/div&gt;</code> </li>\n<li><code>&lt;p&gt;&lt;/p&gt;</code></li>\n<li>这个时候，一个dep对应多个watcher</li>\n</ul>\n</li>\n<li>模板中每一个<code>非事件指令</code>或<code>表达式</code>都对应一个watcher，一个watcher中可能包含多个dep<ul>\n<li>举个例子🌰：表达式中包含了几个data属性</li>\n<li><code>&lt;div&gt;&lt;/div&gt;</code></li>\n<li>这里的一个watcher，就对应了3个dep</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"数据绑定使用到的2个核心技术\"><a href=\"#数据绑定使用到的2个核心技术\" class=\"headerlink\" title=\"数据绑定使用到的2个核心技术\"></a>数据绑定使用到的2个核心技术</h5><ul>\n<li>defineProperty()</li>\n<li>消息订阅与发布</li>\n</ul>\n"},{"layout":"post","title":"vue源码解析(第六弹)","date":"2018-12-05T16:00:00.000Z","description":"继续之前的，差不多到最后一part了，数据的双向绑定","_content":"\n# vue源码探究(第六弹)\n\n继续之前的，差不多到最后一part了，数据的双向绑定。\n\n### 双向数据绑定\n\n- 双向数据绑定是建立在单向数据绑定(model ==> view)的基础之上的\n- 双向数据绑定的实现流程\n  - 在解析v-model指令中，给当前元素添加input监听\n  - 当input的value发生变化时，将最新的值赋值给当前表达式所对应的data属性\n\n### 举个例子🌰\n\n```html\n<div id=\"test\">\n  <input type=\"text\" v-model=\"msg\">\n  <p>{{msg}}</p>\n</div>\n<script type=\"text/javascript\">\n  new MVVM({\n    el: '#test',\n    data: {\n      msg: 'haha'\n    }\n  })\n  // 通过v-model 我们可以实现数据的双向绑定 下面来简述一下流程\n  // 1. 进入 new MVVM()\n  // 2. observe 对数据进行监视\n  // 3. new Observer(value)\n  // 4. 对指定属性实现响应式的数据绑定 defineReactive\n  // 5. new Dep -> defineProperty 添加get和set fn\n  // 6. 进入compile编译\n  // 7. step1 -> node2Fragment 文档碎片 将node进行批量处理\n  // 8. step2 -> init() -> compileElement() -> 元素ele node -> compile() -> attrName = v-module\n  // 9. bind() -> 先getVal() -> modelUpdater 更新数据\n  // 10. new watcher() 用于监听属性值的变化 自动调用 更新对应的节点\n</script>\n```\n\n最后附上一张图\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f8847d0583203cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### End\n\nvue的源码探究暂时就到这里了，bye🎓\n","source":"_posts/2020-12-06-vue源码探究(第六弹) 下午3.56.56.md","raw":"---\nlayout: post\ntitle: \"vue源码解析(第六弹)\"\ndate: 2018-12-06\ncategories:\n  - vue\ndescription: 继续之前的，差不多到最后一part了，数据的双向绑定\n---\n\n# vue源码探究(第六弹)\n\n继续之前的，差不多到最后一part了，数据的双向绑定。\n\n### 双向数据绑定\n\n- 双向数据绑定是建立在单向数据绑定(model ==> view)的基础之上的\n- 双向数据绑定的实现流程\n  - 在解析v-model指令中，给当前元素添加input监听\n  - 当input的value发生变化时，将最新的值赋值给当前表达式所对应的data属性\n\n### 举个例子🌰\n\n```html\n<div id=\"test\">\n  <input type=\"text\" v-model=\"msg\">\n  <p>{{msg}}</p>\n</div>\n<script type=\"text/javascript\">\n  new MVVM({\n    el: '#test',\n    data: {\n      msg: 'haha'\n    }\n  })\n  // 通过v-model 我们可以实现数据的双向绑定 下面来简述一下流程\n  // 1. 进入 new MVVM()\n  // 2. observe 对数据进行监视\n  // 3. new Observer(value)\n  // 4. 对指定属性实现响应式的数据绑定 defineReactive\n  // 5. new Dep -> defineProperty 添加get和set fn\n  // 6. 进入compile编译\n  // 7. step1 -> node2Fragment 文档碎片 将node进行批量处理\n  // 8. step2 -> init() -> compileElement() -> 元素ele node -> compile() -> attrName = v-module\n  // 9. bind() -> 先getVal() -> modelUpdater 更新数据\n  // 10. new watcher() 用于监听属性值的变化 自动调用 更新对应的节点\n</script>\n```\n\n最后附上一张图\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f8847d0583203cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### End\n\nvue的源码探究暂时就到这里了，bye🎓\n","slug":"2020-12-06-vue源码探究(第六弹) 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.724Z","comments":1,"photos":[],"link":"","_id":"cjvaywf1z00275096rnrnujuy","content":"<h1 id=\"vue源码探究-第六弹\"><a href=\"#vue源码探究-第六弹\" class=\"headerlink\" title=\"vue源码探究(第六弹)\"></a>vue源码探究(第六弹)</h1><p>继续之前的，差不多到最后一part了，数据的双向绑定。</p>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><ul>\n<li>双向数据绑定是建立在单向数据绑定(model ==&gt; view)的基础之上的</li>\n<li>双向数据绑定的实现流程<ul>\n<li>在解析v-model指令中，给当前元素添加input监听</li>\n<li>当input的value发生变化时，将最新的值赋值给当前表达式所对应的data属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"举个例子🌰\"><a href=\"#举个例子🌰\" class=\"headerlink\" title=\"举个例子🌰\"></a>举个例子🌰</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> MVVM(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">'haha'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 通过v-model 我们可以实现数据的双向绑定 下面来简述一下流程</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 1. 进入 new MVVM()</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 2. observe 对数据进行监视</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 3. new Observer(value)</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 4. 对指定属性实现响应式的数据绑定 defineReactive</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 5. new Dep -&gt; defineProperty 添加get和set fn</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 6. 进入compile编译</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 7. step1 -&gt; node2Fragment 文档碎片 将node进行批量处理</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 8. step2 -&gt; init() -&gt; compileElement() -&gt; 元素ele node -&gt; compile() -&gt; attrName = v-module</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 9. bind() -&gt; 先getVal() -&gt; modelUpdater 更新数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 10. new watcher() 用于监听属性值的变化 自动调用 更新对应的节点</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后附上一张图<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f8847d0583203cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h4><p>vue的源码探究暂时就到这里了，bye🎓</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue源码探究-第六弹\"><a href=\"#vue源码探究-第六弹\" class=\"headerlink\" title=\"vue源码探究(第六弹)\"></a>vue源码探究(第六弹)</h1><p>继续之前的，差不多到最后一part了，数据的双向绑定。</p>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><ul>\n<li>双向数据绑定是建立在单向数据绑定(model ==&gt; view)的基础之上的</li>\n<li>双向数据绑定的实现流程<ul>\n<li>在解析v-model指令中，给当前元素添加input监听</li>\n<li>当input的value发生变化时，将最新的值赋值给当前表达式所对应的data属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"举个例子🌰\"><a href=\"#举个例子🌰\" class=\"headerlink\" title=\"举个例子🌰\"></a>举个例子🌰</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> MVVM(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#test'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">'haha'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 通过v-model 我们可以实现数据的双向绑定 下面来简述一下流程</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 1. 进入 new MVVM()</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 2. observe 对数据进行监视</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 3. new Observer(value)</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 4. 对指定属性实现响应式的数据绑定 defineReactive</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 5. new Dep -&gt; defineProperty 添加get和set fn</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 6. 进入compile编译</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 7. step1 -&gt; node2Fragment 文档碎片 将node进行批量处理</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 8. step2 -&gt; init() -&gt; compileElement() -&gt; 元素ele node -&gt; compile() -&gt; attrName = v-module</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 9. bind() -&gt; 先getVal() -&gt; modelUpdater 更新数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 10. new watcher() 用于监听属性值的变化 自动调用 更新对应的节点</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后附上一张图<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f8847d0583203cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h4><p>vue的源码探究暂时就到这里了，bye🎓</p>\n"},{"title":"2019年第一记","date":"2019-01-05T16:00:00.000Z","description":"2019年第一记","music":"//isure.stream.qqmusic.qq.com/C400004XcdPX08dOus.m4a?guid=9270829955&vkey=FC5A68020137691511E46B18FA2FD6233C7430495B481ABF33EBAB1D8F9AB83B5F47BC7F8963A04C0FFA37A308A2C3EC41F4C47F0E97D039&uin=1051&fromtag=66","_content":"\n# 2019年第一记\n\n今天是2019年的1月6号，忽然之间发现已经到了毕业季，而自己也即将正式迈入社会离开校园。\n过去的20年，可以翻篇了，21岁一个新的结点，我希望下一个三年的自己，能够学会感激过去三年自己所做的一切。\n现在开始，回顾大学的三年，我很感激这一切，让自己有了一个新的平台，开始新的一切，还记得大一的时候，自己承认自己的失败在于眼界的狭窄的。\n终于，今天我再一次承认，因为自己眼界的狭窄，我堕落了7个月，过着十分舒适的生活，慢慢煮死了自己。\n我说，我找不到比阿里更好的公司了，我说，努力研究代码也不一定有太大作用，我太多犹豫太多权衡，终于，时间和意志都在不知不觉间溜走了。\n也许，立flag本身就不是一个特别好的事，但是，新的一年，我真的希望自己能摒除之前的懒惰，重新开始，所以换一种活法吧。\n1.练好英语口语\n2.健身\n3.学会游泳\n4.keep每顿8份饱\n5.参加明年春招末班车\n\nmaybe，计划还没指定完，我就决定放弃了，我觉得这样的自己真可悲。\n","source":"_posts/2019年第一记.md","raw":"---\ntitle: \"2019年第一记\"\ndate: 2019-01-06\ncategories:\n  - 随笔\ndescription: 2019年第一记\nmusic: \"//isure.stream.qqmusic.qq.com/C400004XcdPX08dOus.m4a?guid=9270829955&vkey=FC5A68020137691511E46B18FA2FD6233C7430495B481ABF33EBAB1D8F9AB83B5F47BC7F8963A04C0FFA37A308A2C3EC41F4C47F0E97D039&uin=1051&fromtag=66\"\n---\n\n# 2019年第一记\n\n今天是2019年的1月6号，忽然之间发现已经到了毕业季，而自己也即将正式迈入社会离开校园。\n过去的20年，可以翻篇了，21岁一个新的结点，我希望下一个三年的自己，能够学会感激过去三年自己所做的一切。\n现在开始，回顾大学的三年，我很感激这一切，让自己有了一个新的平台，开始新的一切，还记得大一的时候，自己承认自己的失败在于眼界的狭窄的。\n终于，今天我再一次承认，因为自己眼界的狭窄，我堕落了7个月，过着十分舒适的生活，慢慢煮死了自己。\n我说，我找不到比阿里更好的公司了，我说，努力研究代码也不一定有太大作用，我太多犹豫太多权衡，终于，时间和意志都在不知不觉间溜走了。\n也许，立flag本身就不是一个特别好的事，但是，新的一年，我真的希望自己能摒除之前的懒惰，重新开始，所以换一种活法吧。\n1.练好英语口语\n2.健身\n3.学会游泳\n4.keep每顿8份饱\n5.参加明年春招末班车\n\nmaybe，计划还没指定完，我就决定放弃了，我觉得这样的自己真可悲。\n","slug":"2019年第一记","published":1,"updated":"2019-03-02T02:25:13.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf2200295096as38npqd","content":"<h1 id=\"2019年第一记\"><a href=\"#2019年第一记\" class=\"headerlink\" title=\"2019年第一记\"></a>2019年第一记</h1><p>今天是2019年的1月6号，忽然之间发现已经到了毕业季，而自己也即将正式迈入社会离开校园。<br>过去的20年，可以翻篇了，21岁一个新的结点，我希望下一个三年的自己，能够学会感激过去三年自己所做的一切。<br>现在开始，回顾大学的三年，我很感激这一切，让自己有了一个新的平台，开始新的一切，还记得大一的时候，自己承认自己的失败在于眼界的狭窄的。<br>终于，今天我再一次承认，因为自己眼界的狭窄，我堕落了7个月，过着十分舒适的生活，慢慢煮死了自己。<br>我说，我找不到比阿里更好的公司了，我说，努力研究代码也不一定有太大作用，我太多犹豫太多权衡，终于，时间和意志都在不知不觉间溜走了。<br>也许，立flag本身就不是一个特别好的事，但是，新的一年，我真的希望自己能摒除之前的懒惰，重新开始，所以换一种活法吧。<br>1.练好英语口语<br>2.健身<br>3.学会游泳<br>4.keep每顿8份饱<br>5.参加明年春招末班车</p>\n<p>maybe，计划还没指定完，我就决定放弃了，我觉得这样的自己真可悲。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2019年第一记\"><a href=\"#2019年第一记\" class=\"headerlink\" title=\"2019年第一记\"></a>2019年第一记</h1><p>今天是2019年的1月6号，忽然之间发现已经到了毕业季，而自己也即将正式迈入社会离开校园。<br>过去的20年，可以翻篇了，21岁一个新的结点，我希望下一个三年的自己，能够学会感激过去三年自己所做的一切。<br>现在开始，回顾大学的三年，我很感激这一切，让自己有了一个新的平台，开始新的一切，还记得大一的时候，自己承认自己的失败在于眼界的狭窄的。<br>终于，今天我再一次承认，因为自己眼界的狭窄，我堕落了7个月，过着十分舒适的生活，慢慢煮死了自己。<br>我说，我找不到比阿里更好的公司了，我说，努力研究代码也不一定有太大作用，我太多犹豫太多权衡，终于，时间和意志都在不知不觉间溜走了。<br>也许，立flag本身就不是一个特别好的事，但是，新的一年，我真的希望自己能摒除之前的懒惰，重新开始，所以换一种活法吧。<br>1.练好英语口语<br>2.健身<br>3.学会游泳<br>4.keep每顿8份饱<br>5.参加明年春招末班车</p>\n<p>maybe，计划还没指定完，我就决定放弃了，我觉得这样的自己真可悲。</p>\n"},{"title":"vuex","date":"2018-12-06T16:00:00.000Z","description":"一个多组件状态共享的东西，简单来说，这就是vuex的作用","_content":"\n# vuex简单介绍\n\n前面对vue的源码进行了简单的解析，接下来vuex的简单剖析一下，当我们开发的不是单页面的时候，或者说涉及的项目比较大的时候，通过简答的父子组件之间值的传递，这种办法不太科学。\n\n所以需要一个多组件状态共享的东西，简单来说，这就是vuex的作用。\n\n### 1. vuex是什么\n\n- GitHub站点 https://github.com/vuejs/vuex\n- 在线文档: https://vuex.vuejs.org/zh-cn/\n- 简单来说，它是对应用中组件的状态进行了集中式的一个管理(读/写)\n\n### 2. 状态自管理应用\n\n- state: 驱动应用的数据源\n- view: 以声明方式将state映射到视图 声明方式 -> eg:{{count}}\n- actions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法) action->函数\n![单向数据流](https://vuex.vuejs.org/flow.png)\n- 举一个例子🌰\n  - 点击一个button，状态改变到页面改变的过程：\n  - view -> 点击 button -> 需要actions中的方法 -> 方法用于改变值 -> 进入state状态管理 -> 改变state中的状态 -> 状态改变后，view更新 \n\n### 3. 多组件共享状态的problem\n\n- 多个视图依赖同一个状态\n- 来自不同的视图的行为 需要变更同一个状态\n- 没有vuex的解决方法\n  - 将数据和操作数据的行为都定义在父组件\n  - 将数据和操作数据的行为传递给需要的各个子组件(有时候会多级传递)\n\n![](https://vuex.vuejs.org/vuex.png)\n\n## vuex的基础概念\n\n下面列举一些vuex的基础概念\n\n### state\n\n- vuex管理的状态 它是一个`对象`\n- 它是唯一的\n- 例子🌰\n  \n```js\nconst state = {\n  a: initValue\n}\n```\n\n### mutations\n\n- 包含多个`直接更新`state的方法 它也是一个`对象`\n- 谁来触发？\n  - action中的commit('mutation名称')\n- 只能包含同步的代码，不能写异步\n- 例子🌰\n  \n```js\nconst mutations = {\n  xxx(state, data){\n    // 更新state的某个属性\n  }\n}\n```\n\n### actions\n\n- 包含多个事件回调函数 它也是一个`对象`\n- 通过执行 commit()来触发mutation的调用 间接更新state\n- 如何触发？\n  - 组件中 store.dispatch('action名称)\n- 可以异步执行(定时器，ajax)\n- 例子🌰\n\n```js\nconst actions = {\n  incrementAsync ({ commit }) {\n    setTimeout(() => {\n      commit('increment')\n    }, 1000)\n  }\n}\n```\n\n### getters\n\n- 包含多个计算属性(get) 同理 也是一个`对象`\n- 如何读取？\n  - store.getters.doneTodosCount\n- 例子🌰\n\n```JS\nconst getters = {\n  doneTodosCount: (state, getters) => {\n    return getters.doneTodos.length\n  }\n}\n```\n\n### modules \n\n- 包含多个module\n- 一个module是一个store的配置对象\n\n### 向外暴露store对象\n\n```js\nexport default new Vuex.store({\n  state,\n  mutations,\n  getters,\n  actions\n})\n```\n\n### 组件内\n\n```js\nimport {mapGetters, mapActions} from 'vuex';\nexport default {\n  computed: mapGetters(['aaa']);\n  methods: mapActions(['bbb']);\n}\n```\n\n### 映射store\n\n```js\nimport store from './store';\nnew Vue({\n  store\n})\n```\n### store对象\n\n- 所有用vuex管理的组件中都多了一个属性$store, 它就是一个store对象\n- 属性:\n  - state: 注册的state对象\n  - getters: 注册的getters对象\n- 方法:\n\t- dispatch(actionName, data): 分发调用action","source":"_posts/2021-12-07-vuex 下午3.56.56.md","raw":"---\ntitle: \"vuex\"\ndate: 2018-12-07\ncategories:\n  - vue\ntags:\n  - vue \n  - vuex\ndescription: 一个多组件状态共享的东西，简单来说，这就是vuex的作用\n---\n\n# vuex简单介绍\n\n前面对vue的源码进行了简单的解析，接下来vuex的简单剖析一下，当我们开发的不是单页面的时候，或者说涉及的项目比较大的时候，通过简答的父子组件之间值的传递，这种办法不太科学。\n\n所以需要一个多组件状态共享的东西，简单来说，这就是vuex的作用。\n\n### 1. vuex是什么\n\n- GitHub站点 https://github.com/vuejs/vuex\n- 在线文档: https://vuex.vuejs.org/zh-cn/\n- 简单来说，它是对应用中组件的状态进行了集中式的一个管理(读/写)\n\n### 2. 状态自管理应用\n\n- state: 驱动应用的数据源\n- view: 以声明方式将state映射到视图 声明方式 -> eg:{{count}}\n- actions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法) action->函数\n![单向数据流](https://vuex.vuejs.org/flow.png)\n- 举一个例子🌰\n  - 点击一个button，状态改变到页面改变的过程：\n  - view -> 点击 button -> 需要actions中的方法 -> 方法用于改变值 -> 进入state状态管理 -> 改变state中的状态 -> 状态改变后，view更新 \n\n### 3. 多组件共享状态的problem\n\n- 多个视图依赖同一个状态\n- 来自不同的视图的行为 需要变更同一个状态\n- 没有vuex的解决方法\n  - 将数据和操作数据的行为都定义在父组件\n  - 将数据和操作数据的行为传递给需要的各个子组件(有时候会多级传递)\n\n![](https://vuex.vuejs.org/vuex.png)\n\n## vuex的基础概念\n\n下面列举一些vuex的基础概念\n\n### state\n\n- vuex管理的状态 它是一个`对象`\n- 它是唯一的\n- 例子🌰\n  \n```js\nconst state = {\n  a: initValue\n}\n```\n\n### mutations\n\n- 包含多个`直接更新`state的方法 它也是一个`对象`\n- 谁来触发？\n  - action中的commit('mutation名称')\n- 只能包含同步的代码，不能写异步\n- 例子🌰\n  \n```js\nconst mutations = {\n  xxx(state, data){\n    // 更新state的某个属性\n  }\n}\n```\n\n### actions\n\n- 包含多个事件回调函数 它也是一个`对象`\n- 通过执行 commit()来触发mutation的调用 间接更新state\n- 如何触发？\n  - 组件中 store.dispatch('action名称)\n- 可以异步执行(定时器，ajax)\n- 例子🌰\n\n```js\nconst actions = {\n  incrementAsync ({ commit }) {\n    setTimeout(() => {\n      commit('increment')\n    }, 1000)\n  }\n}\n```\n\n### getters\n\n- 包含多个计算属性(get) 同理 也是一个`对象`\n- 如何读取？\n  - store.getters.doneTodosCount\n- 例子🌰\n\n```JS\nconst getters = {\n  doneTodosCount: (state, getters) => {\n    return getters.doneTodos.length\n  }\n}\n```\n\n### modules \n\n- 包含多个module\n- 一个module是一个store的配置对象\n\n### 向外暴露store对象\n\n```js\nexport default new Vuex.store({\n  state,\n  mutations,\n  getters,\n  actions\n})\n```\n\n### 组件内\n\n```js\nimport {mapGetters, mapActions} from 'vuex';\nexport default {\n  computed: mapGetters(['aaa']);\n  methods: mapActions(['bbb']);\n}\n```\n\n### 映射store\n\n```js\nimport store from './store';\nnew Vue({\n  store\n})\n```\n### store对象\n\n- 所有用vuex管理的组件中都多了一个属性$store, 它就是一个store对象\n- 属性:\n  - state: 注册的state对象\n  - getters: 注册的getters对象\n- 方法:\n\t- dispatch(actionName, data): 分发调用action","slug":"2021-12-07-vuex 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf23002a5096jrsmjote","content":"<h1 id=\"vuex简单介绍\"><a href=\"#vuex简单介绍\" class=\"headerlink\" title=\"vuex简单介绍\"></a>vuex简单介绍</h1><p>前面对vue的源码进行了简单的解析，接下来vuex的简单剖析一下，当我们开发的不是单页面的时候，或者说涉及的项目比较大的时候，通过简答的父子组件之间值的传递，这种办法不太科学。</p>\n<p>所以需要一个多组件状态共享的东西，简单来说，这就是vuex的作用。</p>\n<h3 id=\"1-vuex是什么\"><a href=\"#1-vuex是什么\" class=\"headerlink\" title=\"1. vuex是什么\"></a>1. vuex是什么</h3><ul>\n<li>GitHub站点 <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vuex</a></li>\n<li>在线文档: <a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://vuex.vuejs.org/zh-cn/</a></li>\n<li>简单来说，它是对应用中组件的状态进行了集中式的一个管理(读/写)</li>\n</ul>\n<h3 id=\"2-状态自管理应用\"><a href=\"#2-状态自管理应用\" class=\"headerlink\" title=\"2. 状态自管理应用\"></a>2. 状态自管理应用</h3><ul>\n<li>state: 驱动应用的数据源</li>\n<li>view: 以声明方式将state映射到视图 声明方式 -&gt; eg:</li>\n<li>actions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法) action-&gt;函数<br><img src=\"https://vuex.vuejs.org/flow.png\" alt=\"单向数据流\"></li>\n<li>举一个例子🌰<ul>\n<li>点击一个button，状态改变到页面改变的过程：</li>\n<li>view -&gt; 点击 button -&gt; 需要actions中的方法 -&gt; 方法用于改变值 -&gt; 进入state状态管理 -&gt; 改变state中的状态 -&gt; 状态改变后，view更新 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-多组件共享状态的problem\"><a href=\"#3-多组件共享状态的problem\" class=\"headerlink\" title=\"3. 多组件共享状态的problem\"></a>3. 多组件共享状态的problem</h3><ul>\n<li>多个视图依赖同一个状态</li>\n<li>来自不同的视图的行为 需要变更同一个状态</li>\n<li>没有vuex的解决方法<ul>\n<li>将数据和操作数据的行为都定义在父组件</li>\n<li>将数据和操作数据的行为传递给需要的各个子组件(有时候会多级传递)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://vuex.vuejs.org/vuex.png\" alt=\"\"></p>\n<h2 id=\"vuex的基础概念\"><a href=\"#vuex的基础概念\" class=\"headerlink\" title=\"vuex的基础概念\"></a>vuex的基础概念</h2><p>下面列举一些vuex的基础概念</p>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3><ul>\n<li>vuex管理的状态 它是一个<code>对象</code></li>\n<li>它是唯一的</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  a: initValue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h3><ul>\n<li>包含多个<code>直接更新</code>state的方法 它也是一个<code>对象</code></li>\n<li>谁来触发？<ul>\n<li>action中的commit(‘mutation名称’)</li>\n</ul>\n</li>\n<li>只能包含同步的代码，不能写异步</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  xxx(state, data)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新state的某个属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h3><ul>\n<li>包含多个事件回调函数 它也是一个<code>对象</code></li>\n<li>通过执行 commit()来触发mutation的调用 间接更新state</li>\n<li>如何触发？<ul>\n<li>组件中 store.dispatch(‘action名称)</li>\n</ul>\n</li>\n<li>可以异步执行(定时器，ajax)</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h3><ul>\n<li>包含多个计算属性(get) 同理 也是一个<code>对象</code></li>\n<li>如何读取？<ul>\n<li>store.getters.doneTodosCount</li>\n</ul>\n</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  doneTodosCount: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getters.doneTodos.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h3><ul>\n<li>包含多个module</li>\n<li>一个module是一个store的配置对象</li>\n</ul>\n<h3 id=\"向外暴露store对象\"><a href=\"#向外暴露store对象\" class=\"headerlink\" title=\"向外暴露store对象\"></a>向外暴露store对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件内\"><a href=\"#组件内\" class=\"headerlink\" title=\"组件内\"></a>组件内</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapGetters, mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  computed: mapGetters([<span class=\"string\">'aaa'</span>]);</span><br><span class=\"line\">  methods: mapActions([<span class=\"string\">'bbb'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"映射store\"><a href=\"#映射store\" class=\"headerlink\" title=\"映射store\"></a>映射store</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"store对象\"><a href=\"#store对象\" class=\"headerlink\" title=\"store对象\"></a>store对象</h3><ul>\n<li>所有用vuex管理的组件中都多了一个属性$store, 它就是一个store对象</li>\n<li>属性:<ul>\n<li>state: 注册的state对象</li>\n<li>getters: 注册的getters对象</li>\n</ul>\n</li>\n<li>方法:<ul>\n<li>dispatch(actionName, data): 分发调用action</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vuex简单介绍\"><a href=\"#vuex简单介绍\" class=\"headerlink\" title=\"vuex简单介绍\"></a>vuex简单介绍</h1><p>前面对vue的源码进行了简单的解析，接下来vuex的简单剖析一下，当我们开发的不是单页面的时候，或者说涉及的项目比较大的时候，通过简答的父子组件之间值的传递，这种办法不太科学。</p>\n<p>所以需要一个多组件状态共享的东西，简单来说，这就是vuex的作用。</p>\n<h3 id=\"1-vuex是什么\"><a href=\"#1-vuex是什么\" class=\"headerlink\" title=\"1. vuex是什么\"></a>1. vuex是什么</h3><ul>\n<li>GitHub站点 <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vuex</a></li>\n<li>在线文档: <a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://vuex.vuejs.org/zh-cn/</a></li>\n<li>简单来说，它是对应用中组件的状态进行了集中式的一个管理(读/写)</li>\n</ul>\n<h3 id=\"2-状态自管理应用\"><a href=\"#2-状态自管理应用\" class=\"headerlink\" title=\"2. 状态自管理应用\"></a>2. 状态自管理应用</h3><ul>\n<li>state: 驱动应用的数据源</li>\n<li>view: 以声明方式将state映射到视图 声明方式 -&gt; eg:</li>\n<li>actions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法) action-&gt;函数<br><img src=\"https://vuex.vuejs.org/flow.png\" alt=\"单向数据流\"></li>\n<li>举一个例子🌰<ul>\n<li>点击一个button，状态改变到页面改变的过程：</li>\n<li>view -&gt; 点击 button -&gt; 需要actions中的方法 -&gt; 方法用于改变值 -&gt; 进入state状态管理 -&gt; 改变state中的状态 -&gt; 状态改变后，view更新 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-多组件共享状态的problem\"><a href=\"#3-多组件共享状态的problem\" class=\"headerlink\" title=\"3. 多组件共享状态的problem\"></a>3. 多组件共享状态的problem</h3><ul>\n<li>多个视图依赖同一个状态</li>\n<li>来自不同的视图的行为 需要变更同一个状态</li>\n<li>没有vuex的解决方法<ul>\n<li>将数据和操作数据的行为都定义在父组件</li>\n<li>将数据和操作数据的行为传递给需要的各个子组件(有时候会多级传递)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://vuex.vuejs.org/vuex.png\" alt=\"\"></p>\n<h2 id=\"vuex的基础概念\"><a href=\"#vuex的基础概念\" class=\"headerlink\" title=\"vuex的基础概念\"></a>vuex的基础概念</h2><p>下面列举一些vuex的基础概念</p>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3><ul>\n<li>vuex管理的状态 它是一个<code>对象</code></li>\n<li>它是唯一的</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  a: initValue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h3><ul>\n<li>包含多个<code>直接更新</code>state的方法 它也是一个<code>对象</code></li>\n<li>谁来触发？<ul>\n<li>action中的commit(‘mutation名称’)</li>\n</ul>\n</li>\n<li>只能包含同步的代码，不能写异步</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  xxx(state, data)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新state的某个属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h3><ul>\n<li>包含多个事件回调函数 它也是一个<code>对象</code></li>\n<li>通过执行 commit()来触发mutation的调用 间接更新state</li>\n<li>如何触发？<ul>\n<li>组件中 store.dispatch(‘action名称)</li>\n</ul>\n</li>\n<li>可以异步执行(定时器，ajax)</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h3><ul>\n<li>包含多个计算属性(get) 同理 也是一个<code>对象</code></li>\n<li>如何读取？<ul>\n<li>store.getters.doneTodosCount</li>\n</ul>\n</li>\n<li>例子🌰</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  doneTodosCount: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getters.doneTodos.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h3><ul>\n<li>包含多个module</li>\n<li>一个module是一个store的配置对象</li>\n</ul>\n<h3 id=\"向外暴露store对象\"><a href=\"#向外暴露store对象\" class=\"headerlink\" title=\"向外暴露store对象\"></a>向外暴露store对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件内\"><a href=\"#组件内\" class=\"headerlink\" title=\"组件内\"></a>组件内</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapGetters, mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  computed: mapGetters([<span class=\"string\">'aaa'</span>]);</span><br><span class=\"line\">  methods: mapActions([<span class=\"string\">'bbb'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"映射store\"><a href=\"#映射store\" class=\"headerlink\" title=\"映射store\"></a>映射store</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"store对象\"><a href=\"#store对象\" class=\"headerlink\" title=\"store对象\"></a>store对象</h3><ul>\n<li>所有用vuex管理的组件中都多了一个属性$store, 它就是一个store对象</li>\n<li>属性:<ul>\n<li>state: 注册的state对象</li>\n<li>getters: 注册的getters对象</li>\n</ul>\n</li>\n<li>方法:<ul>\n<li>dispatch(actionName, data): 分发调用action</li>\n</ul>\n</li>\n</ul>\n"},{"title":"egret","date":"2019-02-27T16:00:00.000Z","description":"egret入门","_content":"\n## 启动\n\n```CLI\nxxx(project name)\negret create xxx\negret build xxx\negret startserver xxx -a\n```\n\n## draw\n1.draw 这里参数描述了当前画面渲染时候drawcall的次数\n2.cost 包含四个参数 enterframe阶段的开销\n引擎updateTransform开销\n引擎draw开销\nhtml5中canvas draw的开销\n3 fps 当前画面的帧屏\n\nx y scalex和y alpha 透明度 rotation旋转\n\n0x+颜色\n\nbitmap 位图\nshape 矢量图\ntextfield\ntextinput 文本\n\n## 遮罩 mask\n\nshape绘制图形\nxxx.mask\n\n## 检测碰撞\n\nhitTestPoint(x, y, true)\nreturn boolean\ntrue是看 与图形是否重合\n\n## 锚点\n\nanchorOffsetX anchorOffsetY位置\n\n## 添加与删除显示对象\n\nsprite 算是一个轻量级的显示对象\n\n添加也就是 a.addChild(b)\n删除也就是 a.removeChild(b)\n\n在删除的时候，需要注意一点，如果a不是this，而是一个容器或者其他的，那么我们需要先判断它是否存在，如果存在才能进行删除操作。\n```\nif(a.parent）{\n a.removeChild(b)\n}\n```\n## 深度管理\n\n深度管理就像是一个队列，但是更像是z-序列号这种东西。\n\nEgret中容器的深度都是从0开始的，当一个显示对象第一个被添加到容器中时，它的深度值为0。这个显示对象也处于容器的最底层。当我们添加第二个显示对象的时候，他的深度值为1，并且在第一个显示对象上方。如果两个显示对象发生了相交，那么我们可以从视觉上看到，第二个显示对象遮挡住第一个显示对象。\n\n### 深度插队\n\n当我们想讲某一个显示对象添加到一个指定深度的时候，我们需要使用 `addChildAt` 方法。这个操作很像排队时插队的想象。\n\n使用 `addChildAt` 方法也非常的容易，具体使用方法如下：\n\n`容器.addChildAt( 显示对象, 深度值 )`\n\n### 交换深度\n\n交换不同对象深度的功能Egret为开发者提供了两个方法。一个是 `swapChildren` 方法，另外一个是 `swapChildrenAt` 方法。\n\n两个方法使用方式少有不同，但效果相同，具体使用方法如下：\n\n`容器.swapChildren( 显示对象, 显示对象 )`\n\n`容器.swapChildrenAt( 深度值, 深度值 )`\n\n\n### 重设子对象深度\n\n当我们将一个显示对象添加到显示列表中后，我们还可以手动重设这个显示对象的深度。\n\n实现显示对象深度重置的方法是 `setChildIndex` ，使用方法如下：\n\n`容器.setChildIndex( 显示对象, 新的深度值 );`\n\n### 事件处理机制的原理\n\nevent dispatcher\n\n#### 事件流程\negret 事件机制包括4个步骤：\n\n-  注册侦听器\n- 发送事件\n- 侦听事件\n- 移除侦听器\n\n按照上方面顺序**依次执行**\n\n注册侦听器使用事件发送者的`addEventListener()`将相应的事件分配给侦听器\n\n```js\npublic addEventListener(type:string, listener:Function, thisObject:any, useCapture:boolean = false, priority:number = 0)\n```\n\n*   type：事件类型，必选。\n*   listener：用来处理事件的侦听器，必选。\n*   thisObject：作用域，必选，一般填写this。因为TypeScript与JavaScript的this作用域不同，其this指向也会不同。如果不填写this的话，那么编译后的代码会发生错误。 关于this的问题，可以学习JavaScript中的原型链。\n*   useCapture: 确定侦听器是运行于捕获阶段还是运行于冒泡阶段，可选。设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。设置为 false，则侦听器只在冒泡阶段处理事件。\n*   priority： 事件侦听器的优先级，可选。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0\n\n#### 触摸事件\n\nEgret中有专门的触摸事件类，使用触摸事件时，默认需要打开显示对象的触摸开关，即将`touchEnabled`设置为`true`。\n\n\n\n\n\n\n","source":"_posts/egret.md","raw":"---\ntitle: \"egret\"\ndate: 2019-2-28\ncategories:\n  - egret\n  - 游戏引擎\ndescription: egret入门\n---\n\n## 启动\n\n```CLI\nxxx(project name)\negret create xxx\negret build xxx\negret startserver xxx -a\n```\n\n## draw\n1.draw 这里参数描述了当前画面渲染时候drawcall的次数\n2.cost 包含四个参数 enterframe阶段的开销\n引擎updateTransform开销\n引擎draw开销\nhtml5中canvas draw的开销\n3 fps 当前画面的帧屏\n\nx y scalex和y alpha 透明度 rotation旋转\n\n0x+颜色\n\nbitmap 位图\nshape 矢量图\ntextfield\ntextinput 文本\n\n## 遮罩 mask\n\nshape绘制图形\nxxx.mask\n\n## 检测碰撞\n\nhitTestPoint(x, y, true)\nreturn boolean\ntrue是看 与图形是否重合\n\n## 锚点\n\nanchorOffsetX anchorOffsetY位置\n\n## 添加与删除显示对象\n\nsprite 算是一个轻量级的显示对象\n\n添加也就是 a.addChild(b)\n删除也就是 a.removeChild(b)\n\n在删除的时候，需要注意一点，如果a不是this，而是一个容器或者其他的，那么我们需要先判断它是否存在，如果存在才能进行删除操作。\n```\nif(a.parent）{\n a.removeChild(b)\n}\n```\n## 深度管理\n\n深度管理就像是一个队列，但是更像是z-序列号这种东西。\n\nEgret中容器的深度都是从0开始的，当一个显示对象第一个被添加到容器中时，它的深度值为0。这个显示对象也处于容器的最底层。当我们添加第二个显示对象的时候，他的深度值为1，并且在第一个显示对象上方。如果两个显示对象发生了相交，那么我们可以从视觉上看到，第二个显示对象遮挡住第一个显示对象。\n\n### 深度插队\n\n当我们想讲某一个显示对象添加到一个指定深度的时候，我们需要使用 `addChildAt` 方法。这个操作很像排队时插队的想象。\n\n使用 `addChildAt` 方法也非常的容易，具体使用方法如下：\n\n`容器.addChildAt( 显示对象, 深度值 )`\n\n### 交换深度\n\n交换不同对象深度的功能Egret为开发者提供了两个方法。一个是 `swapChildren` 方法，另外一个是 `swapChildrenAt` 方法。\n\n两个方法使用方式少有不同，但效果相同，具体使用方法如下：\n\n`容器.swapChildren( 显示对象, 显示对象 )`\n\n`容器.swapChildrenAt( 深度值, 深度值 )`\n\n\n### 重设子对象深度\n\n当我们将一个显示对象添加到显示列表中后，我们还可以手动重设这个显示对象的深度。\n\n实现显示对象深度重置的方法是 `setChildIndex` ，使用方法如下：\n\n`容器.setChildIndex( 显示对象, 新的深度值 );`\n\n### 事件处理机制的原理\n\nevent dispatcher\n\n#### 事件流程\negret 事件机制包括4个步骤：\n\n-  注册侦听器\n- 发送事件\n- 侦听事件\n- 移除侦听器\n\n按照上方面顺序**依次执行**\n\n注册侦听器使用事件发送者的`addEventListener()`将相应的事件分配给侦听器\n\n```js\npublic addEventListener(type:string, listener:Function, thisObject:any, useCapture:boolean = false, priority:number = 0)\n```\n\n*   type：事件类型，必选。\n*   listener：用来处理事件的侦听器，必选。\n*   thisObject：作用域，必选，一般填写this。因为TypeScript与JavaScript的this作用域不同，其this指向也会不同。如果不填写this的话，那么编译后的代码会发生错误。 关于this的问题，可以学习JavaScript中的原型链。\n*   useCapture: 确定侦听器是运行于捕获阶段还是运行于冒泡阶段，可选。设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。设置为 false，则侦听器只在冒泡阶段处理事件。\n*   priority： 事件侦听器的优先级，可选。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0\n\n#### 触摸事件\n\nEgret中有专门的触摸事件类，使用触摸事件时，默认需要打开显示对象的触摸开关，即将`touchEnabled`设置为`true`。\n\n\n\n\n\n\n","slug":"egret","published":1,"updated":"2019-03-02T02:25:13.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf2c002d5096v5sfh30l","content":"<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx(project name)</span><br><span class=\"line\">egret create xxx</span><br><span class=\"line\">egret build xxx</span><br><span class=\"line\">egret startserver xxx -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"draw\"><a href=\"#draw\" class=\"headerlink\" title=\"draw\"></a>draw</h2><p>1.draw 这里参数描述了当前画面渲染时候drawcall的次数<br>2.cost 包含四个参数 enterframe阶段的开销<br>引擎updateTransform开销<br>引擎draw开销<br>html5中canvas draw的开销<br>3 fps 当前画面的帧屏</p>\n<p>x y scalex和y alpha 透明度 rotation旋转</p>\n<p>0x+颜色</p>\n<p>bitmap 位图<br>shape 矢量图<br>textfield<br>textinput 文本</p>\n<h2 id=\"遮罩-mask\"><a href=\"#遮罩-mask\" class=\"headerlink\" title=\"遮罩 mask\"></a>遮罩 mask</h2><p>shape绘制图形<br>xxx.mask</p>\n<h2 id=\"检测碰撞\"><a href=\"#检测碰撞\" class=\"headerlink\" title=\"检测碰撞\"></a>检测碰撞</h2><p>hitTestPoint(x, y, true)<br>return boolean<br>true是看 与图形是否重合</p>\n<h2 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h2><p>anchorOffsetX anchorOffsetY位置</p>\n<h2 id=\"添加与删除显示对象\"><a href=\"#添加与删除显示对象\" class=\"headerlink\" title=\"添加与删除显示对象\"></a>添加与删除显示对象</h2><p>sprite 算是一个轻量级的显示对象</p>\n<p>添加也就是 a.addChild(b)<br>删除也就是 a.removeChild(b)</p>\n<p>在删除的时候，需要注意一点，如果a不是this，而是一个容器或者其他的，那么我们需要先判断它是否存在，如果存在才能进行删除操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(a.parent）&#123;</span><br><span class=\"line\"> a.removeChild(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"深度管理\"><a href=\"#深度管理\" class=\"headerlink\" title=\"深度管理\"></a>深度管理</h2><p>深度管理就像是一个队列，但是更像是z-序列号这种东西。</p>\n<p>Egret中容器的深度都是从0开始的，当一个显示对象第一个被添加到容器中时，它的深度值为0。这个显示对象也处于容器的最底层。当我们添加第二个显示对象的时候，他的深度值为1，并且在第一个显示对象上方。如果两个显示对象发生了相交，那么我们可以从视觉上看到，第二个显示对象遮挡住第一个显示对象。</p>\n<h3 id=\"深度插队\"><a href=\"#深度插队\" class=\"headerlink\" title=\"深度插队\"></a>深度插队</h3><p>当我们想讲某一个显示对象添加到一个指定深度的时候，我们需要使用 <code>addChildAt</code> 方法。这个操作很像排队时插队的想象。</p>\n<p>使用 <code>addChildAt</code> 方法也非常的容易，具体使用方法如下：</p>\n<p><code>容器.addChildAt( 显示对象, 深度值 )</code></p>\n<h3 id=\"交换深度\"><a href=\"#交换深度\" class=\"headerlink\" title=\"交换深度\"></a>交换深度</h3><p>交换不同对象深度的功能Egret为开发者提供了两个方法。一个是 <code>swapChildren</code> 方法，另外一个是 <code>swapChildrenAt</code> 方法。</p>\n<p>两个方法使用方式少有不同，但效果相同，具体使用方法如下：</p>\n<p><code>容器.swapChildren( 显示对象, 显示对象 )</code></p>\n<p><code>容器.swapChildrenAt( 深度值, 深度值 )</code></p>\n<h3 id=\"重设子对象深度\"><a href=\"#重设子对象深度\" class=\"headerlink\" title=\"重设子对象深度\"></a>重设子对象深度</h3><p>当我们将一个显示对象添加到显示列表中后，我们还可以手动重设这个显示对象的深度。</p>\n<p>实现显示对象深度重置的方法是 <code>setChildIndex</code> ，使用方法如下：</p>\n<p><code>容器.setChildIndex( 显示对象, 新的深度值 );</code></p>\n<h3 id=\"事件处理机制的原理\"><a href=\"#事件处理机制的原理\" class=\"headerlink\" title=\"事件处理机制的原理\"></a>事件处理机制的原理</h3><p>event dispatcher</p>\n<h4 id=\"事件流程\"><a href=\"#事件流程\" class=\"headerlink\" title=\"事件流程\"></a>事件流程</h4><p>egret 事件机制包括4个步骤：</p>\n<ul>\n<li>注册侦听器</li>\n<li>发送事件</li>\n<li>侦听事件</li>\n<li>移除侦听器</li>\n</ul>\n<p>按照上方面顺序<strong>依次执行</strong></p>\n<p>注册侦听器使用事件发送者的<code>addEventListener()</code>将相应的事件分配给侦听器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public addEventListener(type:string, <span class=\"attr\">listener</span>:<span class=\"built_in\">Function</span>, <span class=\"attr\">thisObject</span>:any, <span class=\"attr\">useCapture</span>:boolean = <span class=\"literal\">false</span>, <span class=\"attr\">priority</span>:number = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>type：事件类型，必选。</li>\n<li>listener：用来处理事件的侦听器，必选。</li>\n<li>thisObject：作用域，必选，一般填写this。因为TypeScript与JavaScript的this作用域不同，其this指向也会不同。如果不填写this的话，那么编译后的代码会发生错误。 关于this的问题，可以学习JavaScript中的原型链。</li>\n<li>useCapture: 确定侦听器是运行于捕获阶段还是运行于冒泡阶段，可选。设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。设置为 false，则侦听器只在冒泡阶段处理事件。</li>\n<li>priority： 事件侦听器的优先级，可选。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0</li>\n</ul>\n<h4 id=\"触摸事件\"><a href=\"#触摸事件\" class=\"headerlink\" title=\"触摸事件\"></a>触摸事件</h4><p>Egret中有专门的触摸事件类，使用触摸事件时，默认需要打开显示对象的触摸开关，即将<code>touchEnabled</code>设置为<code>true</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx(project name)</span><br><span class=\"line\">egret create xxx</span><br><span class=\"line\">egret build xxx</span><br><span class=\"line\">egret startserver xxx -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"draw\"><a href=\"#draw\" class=\"headerlink\" title=\"draw\"></a>draw</h2><p>1.draw 这里参数描述了当前画面渲染时候drawcall的次数<br>2.cost 包含四个参数 enterframe阶段的开销<br>引擎updateTransform开销<br>引擎draw开销<br>html5中canvas draw的开销<br>3 fps 当前画面的帧屏</p>\n<p>x y scalex和y alpha 透明度 rotation旋转</p>\n<p>0x+颜色</p>\n<p>bitmap 位图<br>shape 矢量图<br>textfield<br>textinput 文本</p>\n<h2 id=\"遮罩-mask\"><a href=\"#遮罩-mask\" class=\"headerlink\" title=\"遮罩 mask\"></a>遮罩 mask</h2><p>shape绘制图形<br>xxx.mask</p>\n<h2 id=\"检测碰撞\"><a href=\"#检测碰撞\" class=\"headerlink\" title=\"检测碰撞\"></a>检测碰撞</h2><p>hitTestPoint(x, y, true)<br>return boolean<br>true是看 与图形是否重合</p>\n<h2 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h2><p>anchorOffsetX anchorOffsetY位置</p>\n<h2 id=\"添加与删除显示对象\"><a href=\"#添加与删除显示对象\" class=\"headerlink\" title=\"添加与删除显示对象\"></a>添加与删除显示对象</h2><p>sprite 算是一个轻量级的显示对象</p>\n<p>添加也就是 a.addChild(b)<br>删除也就是 a.removeChild(b)</p>\n<p>在删除的时候，需要注意一点，如果a不是this，而是一个容器或者其他的，那么我们需要先判断它是否存在，如果存在才能进行删除操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(a.parent）&#123;</span><br><span class=\"line\"> a.removeChild(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"深度管理\"><a href=\"#深度管理\" class=\"headerlink\" title=\"深度管理\"></a>深度管理</h2><p>深度管理就像是一个队列，但是更像是z-序列号这种东西。</p>\n<p>Egret中容器的深度都是从0开始的，当一个显示对象第一个被添加到容器中时，它的深度值为0。这个显示对象也处于容器的最底层。当我们添加第二个显示对象的时候，他的深度值为1，并且在第一个显示对象上方。如果两个显示对象发生了相交，那么我们可以从视觉上看到，第二个显示对象遮挡住第一个显示对象。</p>\n<h3 id=\"深度插队\"><a href=\"#深度插队\" class=\"headerlink\" title=\"深度插队\"></a>深度插队</h3><p>当我们想讲某一个显示对象添加到一个指定深度的时候，我们需要使用 <code>addChildAt</code> 方法。这个操作很像排队时插队的想象。</p>\n<p>使用 <code>addChildAt</code> 方法也非常的容易，具体使用方法如下：</p>\n<p><code>容器.addChildAt( 显示对象, 深度值 )</code></p>\n<h3 id=\"交换深度\"><a href=\"#交换深度\" class=\"headerlink\" title=\"交换深度\"></a>交换深度</h3><p>交换不同对象深度的功能Egret为开发者提供了两个方法。一个是 <code>swapChildren</code> 方法，另外一个是 <code>swapChildrenAt</code> 方法。</p>\n<p>两个方法使用方式少有不同，但效果相同，具体使用方法如下：</p>\n<p><code>容器.swapChildren( 显示对象, 显示对象 )</code></p>\n<p><code>容器.swapChildrenAt( 深度值, 深度值 )</code></p>\n<h3 id=\"重设子对象深度\"><a href=\"#重设子对象深度\" class=\"headerlink\" title=\"重设子对象深度\"></a>重设子对象深度</h3><p>当我们将一个显示对象添加到显示列表中后，我们还可以手动重设这个显示对象的深度。</p>\n<p>实现显示对象深度重置的方法是 <code>setChildIndex</code> ，使用方法如下：</p>\n<p><code>容器.setChildIndex( 显示对象, 新的深度值 );</code></p>\n<h3 id=\"事件处理机制的原理\"><a href=\"#事件处理机制的原理\" class=\"headerlink\" title=\"事件处理机制的原理\"></a>事件处理机制的原理</h3><p>event dispatcher</p>\n<h4 id=\"事件流程\"><a href=\"#事件流程\" class=\"headerlink\" title=\"事件流程\"></a>事件流程</h4><p>egret 事件机制包括4个步骤：</p>\n<ul>\n<li>注册侦听器</li>\n<li>发送事件</li>\n<li>侦听事件</li>\n<li>移除侦听器</li>\n</ul>\n<p>按照上方面顺序<strong>依次执行</strong></p>\n<p>注册侦听器使用事件发送者的<code>addEventListener()</code>将相应的事件分配给侦听器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public addEventListener(type:string, <span class=\"attr\">listener</span>:<span class=\"built_in\">Function</span>, <span class=\"attr\">thisObject</span>:any, <span class=\"attr\">useCapture</span>:boolean = <span class=\"literal\">false</span>, <span class=\"attr\">priority</span>:number = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>type：事件类型，必选。</li>\n<li>listener：用来处理事件的侦听器，必选。</li>\n<li>thisObject：作用域，必选，一般填写this。因为TypeScript与JavaScript的this作用域不同，其this指向也会不同。如果不填写this的话，那么编译后的代码会发生错误。 关于this的问题，可以学习JavaScript中的原型链。</li>\n<li>useCapture: 确定侦听器是运行于捕获阶段还是运行于冒泡阶段，可选。设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。设置为 false，则侦听器只在冒泡阶段处理事件。</li>\n<li>priority： 事件侦听器的优先级，可选。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0</li>\n</ul>\n<h4 id=\"触摸事件\"><a href=\"#触摸事件\" class=\"headerlink\" title=\"触摸事件\"></a>触摸事件</h4><p>Egret中有专门的触摸事件类，使用触摸事件时，默认需要打开显示对象的触摸开关，即将<code>touchEnabled</code>设置为<code>true</code>。</p>\n"},{"layout":"post","title":"flex布局","date":"2018-05-07T16:00:00.000Z","description":"之前学 react native 的时候接触过 flex，这次又系统的练习了一次，更加熟悉","_content":"\n# flex布局\n\n之前学 react native 的时候接触过 flex，这次又系统的练习了一次，更加熟悉。\n这里推荐阮一峰[flex 实战](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n\n这篇文章[flex 的语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n之前面试滴滴的时候问到了 flex：1 的意思\n当时竟然没回答上来。\nflex 是 flex grow flex shrink flex basis 的简写 可以写 flex：1 1 auto 后两项为可选项\nflex1 就是按个数等比分配\nflex2 就是 2 倍\n\n#### flex 常用点\n\n上下居中，给父盒子设置\n\n```css\ndisplay: flex;\nalign-items: center; // 上下居中\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n左右居中\n\n```\ndisplay:flex;\njustify-content: center;\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n#### notice\n\n今天在做一个模块的时候，发现 pc 端和移动端，或者这么说在 Chrome 和 Safari 上的展示效果有些区别，然后发现了一个新用法：\n\n```css\nflex: none;\n```\n\n**当你不希望自己的 dom 或者 el 被 flex 压缩时，加这个，非常好使**\n\n既然都讲到了这里，顺便记录 2 行样式，用于多行省略使用，还是挺常用的：\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 2;  // 数字可变，2表示2行后 + ...\n```\n","source":"_posts/flex.md","raw":"---\nlayout: post\ntitle: \"flex布局\"\ndate: 2018-05-08\ncategories:\n  - 踩坑记\ntags:\n  - CSS\n  - 布局\ndescription: 之前学 react native 的时候接触过 flex，这次又系统的练习了一次，更加熟悉\n---\n\n# flex布局\n\n之前学 react native 的时候接触过 flex，这次又系统的练习了一次，更加熟悉。\n这里推荐阮一峰[flex 实战](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n\n这篇文章[flex 的语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n之前面试滴滴的时候问到了 flex：1 的意思\n当时竟然没回答上来。\nflex 是 flex grow flex shrink flex basis 的简写 可以写 flex：1 1 auto 后两项为可选项\nflex1 就是按个数等比分配\nflex2 就是 2 倍\n\n#### flex 常用点\n\n上下居中，给父盒子设置\n\n```css\ndisplay: flex;\nalign-items: center; // 上下居中\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n左右居中\n\n```\ndisplay:flex;\njustify-content: center;\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n#### notice\n\n今天在做一个模块的时候，发现 pc 端和移动端，或者这么说在 Chrome 和 Safari 上的展示效果有些区别，然后发现了一个新用法：\n\n```css\nflex: none;\n```\n\n**当你不希望自己的 dom 或者 el 被 flex 压缩时，加这个，非常好使**\n\n既然都讲到了这里，顺便记录 2 行样式，用于多行省略使用，还是挺常用的：\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 2;  // 数字可变，2表示2行后 + ...\n```\n","slug":"flex","published":1,"updated":"2019-03-02T02:25:13.191Z","comments":1,"photos":[],"link":"","_id":"cjvaywf2g002f50969bhvslbc","content":"<h1 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h1><p>之前学 react native 的时候接触过 flex，这次又系统的练习了一次，更加熟悉。<br>这里推荐阮一峰<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex 实战</a></p>\n<p>这篇文章<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">flex 的语法篇</a></p>\n<p>之前面试滴滴的时候问到了 flex：1 的意思<br>当时竟然没回答上来。<br>flex 是 flex grow flex shrink flex basis 的简写 可以写 flex：1 1 auto 后两项为可选项<br>flex1 就是按个数等比分配<br>flex2 就是 2 倍</p>\n<h4 id=\"flex-常用点\"><a href=\"#flex-常用点\" class=\"headerlink\" title=\"flex 常用点\"></a>flex 常用点</h4><p>上下居中，给父盒子设置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">flex</span>;</span><br><span class=\"line\">align-items: center; // 上下居中</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<p>左右居中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:flex;</span><br><span class=\"line\">justify-content: center;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<h4 id=\"notice\"><a href=\"#notice\" class=\"headerlink\" title=\"notice\"></a>notice</h4><p>今天在做一个模块的时候，发现 pc 端和移动端，或者这么说在 Chrome 和 Safari 上的展示效果有些区别，然后发现了一个新用法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">flex</span>: <span class=\"selector-tag\">none</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>当你不希望自己的 dom 或者 el 被 flex 压缩时，加这个，非常好使</strong></p>\n<p>既然都讲到了这里，顺便记录 2 行样式，用于多行省略使用，还是挺常用的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\">-webkit-line-clamp: 2;  // 数字可变，2表示2行后 + ...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h1><p>之前学 react native 的时候接触过 flex，这次又系统的练习了一次，更加熟悉。<br>这里推荐阮一峰<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex 实战</a></p>\n<p>这篇文章<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">flex 的语法篇</a></p>\n<p>之前面试滴滴的时候问到了 flex：1 的意思<br>当时竟然没回答上来。<br>flex 是 flex grow flex shrink flex basis 的简写 可以写 flex：1 1 auto 后两项为可选项<br>flex1 就是按个数等比分配<br>flex2 就是 2 倍</p>\n<h4 id=\"flex-常用点\"><a href=\"#flex-常用点\" class=\"headerlink\" title=\"flex 常用点\"></a>flex 常用点</h4><p>上下居中，给父盒子设置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">flex</span>;</span><br><span class=\"line\">align-items: center; // 上下居中</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<p>左右居中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:flex;</span><br><span class=\"line\">justify-content: center;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<h4 id=\"notice\"><a href=\"#notice\" class=\"headerlink\" title=\"notice\"></a>notice</h4><p>今天在做一个模块的时候，发现 pc 端和移动端，或者这么说在 Chrome 和 Safari 上的展示效果有些区别，然后发现了一个新用法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">flex</span>: <span class=\"selector-tag\">none</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>当你不希望自己的 dom 或者 el 被 flex 压缩时，加这个，非常好使</strong></p>\n<p>既然都讲到了这里，顺便记录 2 行样式，用于多行省略使用，还是挺常用的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\">-webkit-line-clamp: 2;  // 数字可变，2表示2行后 + ...</span><br></pre></td></tr></table></figure>\n"},{"title":"git 常见命令","date":"2018-07-10T07:44:30.000Z","_content":"\n# git常见命令\n\n### 先讲讲如何clone一个远程repertory。  <br />\n```\n$ git clone xxx(repertory ssh地址)\n```\n\n### 接下来讲讲分支相关的命令。  <br />\n\n- 新建一个分支，并切换到该分支：\n```\n$ git checkout -b xx(branch name)\n```\n- 查看分支：\n```\n$ git branch\n```\n- 查看远程所有分支：\n```\n$ git branch -a\n```\n- 删除分支：\n```\n$ git branch -d xxx(branch name)\n```\n### 如何进行回退\n\n- 回退版本：\n```\n$ git reset --hard version(commit number)\n```\n\n### 查看状态\n\n- 查看状态\n```\n$ git status\n```\n\n### 添加更新，推上去\n\n- 保存\n```\n$ git add .   (这是将所有修改过的工作文件提交暂存区)\n```\n```\n$ git add     (将工作文件修改提交到本地暂存区)\n```\n\n- commit\n```\n$ git commit -m 'xxx'(里面是修改的信息的info)\n```\n- push\n```\n$ git push xxx(该仓库的ssh地址)\n```\n\n### 合并某分支到当前分支\n\n```\n$ git merge xx(name)\n```\n### 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n```\n$ git reset --hard\n```\n\n### 打开ssh文件\n\n```cli\n$ cat ~/.ssh/id_rsa.pub \n```","source":"_posts/hello-hexo 下午3.56.56.md","raw":"---\ntitle: git 常见命令\ndate: 2018-07-10 15:44:30\ntags:\n- git\n---\n\n# git常见命令\n\n### 先讲讲如何clone一个远程repertory。  <br />\n```\n$ git clone xxx(repertory ssh地址)\n```\n\n### 接下来讲讲分支相关的命令。  <br />\n\n- 新建一个分支，并切换到该分支：\n```\n$ git checkout -b xx(branch name)\n```\n- 查看分支：\n```\n$ git branch\n```\n- 查看远程所有分支：\n```\n$ git branch -a\n```\n- 删除分支：\n```\n$ git branch -d xxx(branch name)\n```\n### 如何进行回退\n\n- 回退版本：\n```\n$ git reset --hard version(commit number)\n```\n\n### 查看状态\n\n- 查看状态\n```\n$ git status\n```\n\n### 添加更新，推上去\n\n- 保存\n```\n$ git add .   (这是将所有修改过的工作文件提交暂存区)\n```\n```\n$ git add     (将工作文件修改提交到本地暂存区)\n```\n\n- commit\n```\n$ git commit -m 'xxx'(里面是修改的信息的info)\n```\n- push\n```\n$ git push xxx(该仓库的ssh地址)\n```\n\n### 合并某分支到当前分支\n\n```\n$ git merge xx(name)\n```\n### 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n```\n$ git reset --hard\n```\n\n### 打开ssh文件\n\n```cli\n$ cat ~/.ssh/id_rsa.pub \n```","slug":"hello-hexo 下午3.56.56","published":1,"updated":"2019-01-31T07:15:59.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf2j002i5096b0wvl38y","content":"<h1 id=\"git常见命令\"><a href=\"#git常见命令\" class=\"headerlink\" title=\"git常见命令\"></a>git常见命令</h1><h3 id=\"先讲讲如何clone一个远程repertory。\"><a href=\"#先讲讲如何clone一个远程repertory。\" class=\"headerlink\" title=\"先讲讲如何clone一个远程repertory。  \"></a>先讲讲如何clone一个远程repertory。  <br></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone xxx(repertory ssh地址)</span><br></pre></td></tr></table></figure>\n<h3 id=\"接下来讲讲分支相关的命令。\"><a href=\"#接下来讲讲分支相关的命令。\" class=\"headerlink\" title=\"接下来讲讲分支相关的命令。  \"></a>接下来讲讲分支相关的命令。  <br></h3><ul>\n<li><p>新建一个分支，并切换到该分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b xx(branch name)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看远程所有分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d xxx(branch name)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"如何进行回退\"><a href=\"#如何进行回退\" class=\"headerlink\" title=\"如何进行回退\"></a>如何进行回退</h3><ul>\n<li>回退版本：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard version(commit number)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><ul>\n<li>查看状态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加更新，推上去\"><a href=\"#添加更新，推上去\" class=\"headerlink\" title=\"添加更新，推上去\"></a>添加更新，推上去</h3><ul>\n<li>保存<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .   (这是将所有修改过的工作文件提交暂存区)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add     (将工作文件修改提交到本地暂存区)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &apos;xxx&apos;(里面是修改的信息的info)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>push</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push xxx(该仓库的ssh地址)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"合并某分支到当前分支\"><a href=\"#合并某分支到当前分支\" class=\"headerlink\" title=\"合并某分支到当前分支\"></a>合并某分支到当前分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge xx(name)</span><br></pre></td></tr></table></figure>\n<h3 id=\"恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\"><a href=\"#恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\" class=\"headerlink\" title=\"恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\"></a>恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开ssh文件\"><a href=\"#打开ssh文件\" class=\"headerlink\" title=\"打开ssh文件\"></a>打开ssh文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git常见命令\"><a href=\"#git常见命令\" class=\"headerlink\" title=\"git常见命令\"></a>git常见命令</h1><h3 id=\"先讲讲如何clone一个远程repertory。\"><a href=\"#先讲讲如何clone一个远程repertory。\" class=\"headerlink\" title=\"先讲讲如何clone一个远程repertory。  \"></a>先讲讲如何clone一个远程repertory。  <br></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone xxx(repertory ssh地址)</span><br></pre></td></tr></table></figure>\n<h3 id=\"接下来讲讲分支相关的命令。\"><a href=\"#接下来讲讲分支相关的命令。\" class=\"headerlink\" title=\"接下来讲讲分支相关的命令。  \"></a>接下来讲讲分支相关的命令。  <br></h3><ul>\n<li><p>新建一个分支，并切换到该分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b xx(branch name)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看远程所有分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d xxx(branch name)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"如何进行回退\"><a href=\"#如何进行回退\" class=\"headerlink\" title=\"如何进行回退\"></a>如何进行回退</h3><ul>\n<li>回退版本：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard version(commit number)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><ul>\n<li>查看状态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加更新，推上去\"><a href=\"#添加更新，推上去\" class=\"headerlink\" title=\"添加更新，推上去\"></a>添加更新，推上去</h3><ul>\n<li>保存<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .   (这是将所有修改过的工作文件提交暂存区)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add     (将工作文件修改提交到本地暂存区)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &apos;xxx&apos;(里面是修改的信息的info)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>push</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push xxx(该仓库的ssh地址)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"合并某分支到当前分支\"><a href=\"#合并某分支到当前分支\" class=\"headerlink\" title=\"合并某分支到当前分支\"></a>合并某分支到当前分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge xx(name)</span><br></pre></td></tr></table></figure>\n<h3 id=\"恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\"><a href=\"#恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\" class=\"headerlink\" title=\"恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\"></a>恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开ssh文件\"><a href=\"#打开ssh文件\" class=\"headerlink\" title=\"打开ssh文件\"></a>打开ssh文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Hybrid 技术 简单了解","date":"2018-07-16T16:00:00.000Z","description":"hybrid交互","_content":"\n## hybrid交互\n\n1. JavaScript core == js bridge\n2. url schema\n\n这里有一张图可以简单说明：\n![detail](https://upload-images.jianshu.io/upload_images/3378252-99b7d4e57413b849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实Hybrid的交互无非就2种方法：\n\n- native调用前端页面中js方法\n- 前端页面通过js调用native提供的接口\n\n`2个交互的bridge都是webview`\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a10d0fed8dca91f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n从第一个开始讲解：web和native约定好，然后h5将一组api绑定在window对象上，app通过webview获取window对象然后调用js。这就是最初说的**native调用页面中js的方法**\n\n第二个：web传递一个url，然后native那边可以截断url，通过url中的schema进行解析，然后做出相应的操作\n\n然后app自身是可以自定义url schema的，并把自定义的url注册在调度中心，比如：\n\n- weixin:// 打开微信\n- ctrip：//xx  打开携程\n\njs与native通信：创建这类url，native将其捕获，然后进行操作。\n\n### api式交互\n\nnative api接口和ajax调用服务器提供的接口非常相似\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-438484e7600dd71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后接下来这张图可以清楚的展示我们在设计hybrid交互模型的时候，通信的流程：\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a3f0bcf34c210847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 格式约定\n\n前面说了这个流程和ajax比较相似，这里就按照ajax做一个参考。\n\n```js\n$.ajax(options)  =>  XMLHttpRequest\ntype(default val：“get”)  http请求方法（“get”，“post”，其他）\nurl(default val：当前url)  请求url的地址\ndata(default val：none)\n```\n\n与native约定的请求模型：\n```js\nrequestHybrid({\n  //创建一个新的webview对话框窗口\n  tagname: 'hybridapi',\n  //请求参数，会被Native使用\n  param: {},\n  //Native处理成功后回调前端的方法\n  callback: function (data) {\n  }\n});\n```\n\n这个方法就会形成一个url，比如：\nhybridschema://hybridapi?callback=hybrid_1446276509894&param=%7B%22data1%22%3A1%2C%22data2%22%3A2%7D\n\n然后数据会得到返回，一般的格式是这样的：\n```js\n{\n  data: {},\n  errno: 0,\n  msg: \"success\"\n}\n```\n\ncode：\n\n```js\nwindow.Hybrid = window.Hybrid || {};\nvar bridgePostMsg = function (url) {\n    if ($.os.ios) {\n        window.location = url;\n    } else {\n        var ifr = $('<iframe style=\"display: none;\" src=\"' + url + '\"/>');\n        $('body').append(ifr);\n        setTimeout(function () {\n            ifr.remove();\n        }, 1000)\n    }\n};\nvar _getHybridUrl = function (params) {\n    var k, paramStr = '', url = 'scheme://';\n    url += params.tagname + '?t=' + new Date().getTime(); //时间戳，防止url不起效\n    if (params.callback) {\n        url += '&callback=' + params.callback;\n        delete params.callback;\n    }\n    if (params.param) {\n        paramStr = typeof params.param == 'object' ? JSON.stringify(params.param) : params.param;\n        url += '&param=' + encodeURIComponent(paramStr);\n    }\n    return url;\n};\nvar requestHybrid = function (params) {\n    //生成唯一执行函数，执行后销毁\n    var tt = (new Date().getTime());\n    var t = 'hybrid_' + tt;\n    var tmpFn;\n\n    //处理有回调的情况\n    if (params.callback) {\n        tmpFn = params.callback;\n        params.callback = t;\n        window.Hybrid[t] = function (data) {\n            tmpFn(data);\n            delete window.Hybrid[t];\n        }\n    }\n    bridgePostMsg(_getHybridUrl(params));\n};\n//获取版本信息，约定APP的navigator.userAgent版本包含版本信息：scheme/xx.xx.xx\nvar getHybridInfo = function () {\n    var platform_version = {};\n    var na = navigator.userAgent;\n    var info = na.match(/scheme\\/\\d\\.\\d\\.\\d/);\n\n    if (info && info[0]) {\n        info = info[0].split('/');\n        if (info && info.length == 2) {\n            platform_version.platform = info[0];\n            platform_version.version = info[1];\n        }\n    }\n    return platform_version;\n};\n```\n\n\n","source":"_posts/hybrid混合app.md","raw":"---\nlayout: post\ntitle: \"Hybrid 技术 简单了解\"\ndate: 2018-07-17\ncategories:\n  - Hybrid\ndescription: hybrid交互\n---\n\n## hybrid交互\n\n1. JavaScript core == js bridge\n2. url schema\n\n这里有一张图可以简单说明：\n![detail](https://upload-images.jianshu.io/upload_images/3378252-99b7d4e57413b849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实Hybrid的交互无非就2种方法：\n\n- native调用前端页面中js方法\n- 前端页面通过js调用native提供的接口\n\n`2个交互的bridge都是webview`\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a10d0fed8dca91f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n从第一个开始讲解：web和native约定好，然后h5将一组api绑定在window对象上，app通过webview获取window对象然后调用js。这就是最初说的**native调用页面中js的方法**\n\n第二个：web传递一个url，然后native那边可以截断url，通过url中的schema进行解析，然后做出相应的操作\n\n然后app自身是可以自定义url schema的，并把自定义的url注册在调度中心，比如：\n\n- weixin:// 打开微信\n- ctrip：//xx  打开携程\n\njs与native通信：创建这类url，native将其捕获，然后进行操作。\n\n### api式交互\n\nnative api接口和ajax调用服务器提供的接口非常相似\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-438484e7600dd71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后接下来这张图可以清楚的展示我们在设计hybrid交互模型的时候，通信的流程：\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-a3f0bcf34c210847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 格式约定\n\n前面说了这个流程和ajax比较相似，这里就按照ajax做一个参考。\n\n```js\n$.ajax(options)  =>  XMLHttpRequest\ntype(default val：“get”)  http请求方法（“get”，“post”，其他）\nurl(default val：当前url)  请求url的地址\ndata(default val：none)\n```\n\n与native约定的请求模型：\n```js\nrequestHybrid({\n  //创建一个新的webview对话框窗口\n  tagname: 'hybridapi',\n  //请求参数，会被Native使用\n  param: {},\n  //Native处理成功后回调前端的方法\n  callback: function (data) {\n  }\n});\n```\n\n这个方法就会形成一个url，比如：\nhybridschema://hybridapi?callback=hybrid_1446276509894&param=%7B%22data1%22%3A1%2C%22data2%22%3A2%7D\n\n然后数据会得到返回，一般的格式是这样的：\n```js\n{\n  data: {},\n  errno: 0,\n  msg: \"success\"\n}\n```\n\ncode：\n\n```js\nwindow.Hybrid = window.Hybrid || {};\nvar bridgePostMsg = function (url) {\n    if ($.os.ios) {\n        window.location = url;\n    } else {\n        var ifr = $('<iframe style=\"display: none;\" src=\"' + url + '\"/>');\n        $('body').append(ifr);\n        setTimeout(function () {\n            ifr.remove();\n        }, 1000)\n    }\n};\nvar _getHybridUrl = function (params) {\n    var k, paramStr = '', url = 'scheme://';\n    url += params.tagname + '?t=' + new Date().getTime(); //时间戳，防止url不起效\n    if (params.callback) {\n        url += '&callback=' + params.callback;\n        delete params.callback;\n    }\n    if (params.param) {\n        paramStr = typeof params.param == 'object' ? JSON.stringify(params.param) : params.param;\n        url += '&param=' + encodeURIComponent(paramStr);\n    }\n    return url;\n};\nvar requestHybrid = function (params) {\n    //生成唯一执行函数，执行后销毁\n    var tt = (new Date().getTime());\n    var t = 'hybrid_' + tt;\n    var tmpFn;\n\n    //处理有回调的情况\n    if (params.callback) {\n        tmpFn = params.callback;\n        params.callback = t;\n        window.Hybrid[t] = function (data) {\n            tmpFn(data);\n            delete window.Hybrid[t];\n        }\n    }\n    bridgePostMsg(_getHybridUrl(params));\n};\n//获取版本信息，约定APP的navigator.userAgent版本包含版本信息：scheme/xx.xx.xx\nvar getHybridInfo = function () {\n    var platform_version = {};\n    var na = navigator.userAgent;\n    var info = na.match(/scheme\\/\\d\\.\\d\\.\\d/);\n\n    if (info && info[0]) {\n        info = info[0].split('/');\n        if (info && info.length == 2) {\n            platform_version.platform = info[0];\n            platform_version.version = info[1];\n        }\n    }\n    return platform_version;\n};\n```\n\n\n","slug":"hybrid混合app","published":1,"updated":"2019-03-02T02:25:13.192Z","comments":1,"photos":[],"link":"","_id":"cjvaywf2s002j5096bb8m8oh9","content":"<h2 id=\"hybrid交互\"><a href=\"#hybrid交互\" class=\"headerlink\" title=\"hybrid交互\"></a>hybrid交互</h2><ol>\n<li>JavaScript core == js bridge</li>\n<li>url schema</li>\n</ol>\n<p>这里有一张图可以简单说明：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-99b7d4e57413b849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"detail\"></p>\n<p>其实Hybrid的交互无非就2种方法：</p>\n<ul>\n<li>native调用前端页面中js方法</li>\n<li>前端页面通过js调用native提供的接口</li>\n</ul>\n<p><code>2个交互的bridge都是webview</code></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a10d0fed8dca91f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>从第一个开始讲解：web和native约定好，然后h5将一组api绑定在window对象上，app通过webview获取window对象然后调用js。这就是最初说的<strong>native调用页面中js的方法</strong></p>\n<p>第二个：web传递一个url，然后native那边可以截断url，通过url中的schema进行解析，然后做出相应的操作</p>\n<p>然后app自身是可以自定义url schema的，并把自定义的url注册在调度中心，比如：</p>\n<ul>\n<li>weixin:// 打开微信</li>\n<li>ctrip：//xx  打开携程</li>\n</ul>\n<p>js与native通信：创建这类url，native将其捕获，然后进行操作。</p>\n<h3 id=\"api式交互\"><a href=\"#api式交互\" class=\"headerlink\" title=\"api式交互\"></a>api式交互</h3><p>native api接口和ajax调用服务器提供的接口非常相似</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-438484e7600dd71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>然后接下来这张图可以清楚的展示我们在设计hybrid交互模型的时候，通信的流程：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a3f0bcf34c210847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"格式约定\"><a href=\"#格式约定\" class=\"headerlink\" title=\"格式约定\"></a>格式约定</h3><p>前面说了这个流程和ajax比较相似，这里就按照ajax做一个参考。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(options)  =&gt;  XMLHttpRequest</span><br><span class=\"line\">type(<span class=\"keyword\">default</span> val：“get”)  http请求方法（“get”，“post”，其他）</span><br><span class=\"line\">url(<span class=\"keyword\">default</span> val：当前url)  请求url的地址</span><br><span class=\"line\">data(<span class=\"keyword\">default</span> val：none)</span><br></pre></td></tr></table></figure>\n<p>与native约定的请求模型：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestHybrid(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//创建一个新的webview对话框窗口</span></span><br><span class=\"line\">  tagname: <span class=\"string\">'hybridapi'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//请求参数，会被Native使用</span></span><br><span class=\"line\">  param: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//Native处理成功后回调前端的方法</span></span><br><span class=\"line\">  callback: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这个方法就会形成一个url，比如：<br>hybridschema://hybridapi?callback=hybrid_1446276509894&amp;param=%7B%22data1%22%3A1%2C%22data2%22%3A2%7D</p>\n<p>然后数据会得到返回，一般的格式是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\">  errno: <span class=\"number\">0</span>,</span><br><span class=\"line\">  msg: <span class=\"string\">\"success\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>code：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Hybrid = <span class=\"built_in\">window</span>.Hybrid || &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bridgePostMsg = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($.os.ios) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location = url;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ifr = $(<span class=\"string\">'&lt;iframe style=\"display: none;\" src=\"'</span> + url + <span class=\"string\">'\"/&gt;'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'body'</span>).append(ifr);</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            ifr.remove();</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _getHybridUrl = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> k, paramStr = <span class=\"string\">''</span>, url = <span class=\"string\">'scheme://'</span>;</span><br><span class=\"line\">    url += params.tagname + <span class=\"string\">'?t='</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">//时间戳，防止url不起效</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.callback) &#123;</span><br><span class=\"line\">        url += <span class=\"string\">'&amp;callback='</span> + params.callback;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> params.callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.param) &#123;</span><br><span class=\"line\">        paramStr = <span class=\"keyword\">typeof</span> params.param == <span class=\"string\">'object'</span> ? <span class=\"built_in\">JSON</span>.stringify(params.param) : params.param;</span><br><span class=\"line\">        url += <span class=\"string\">'&amp;param='</span> + <span class=\"built_in\">encodeURIComponent</span>(paramStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> requestHybrid = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//生成唯一执行函数，执行后销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tt = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"string\">'hybrid_'</span> + tt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmpFn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理有回调的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.callback) &#123;</span><br><span class=\"line\">        tmpFn = params.callback;</span><br><span class=\"line\">        params.callback = t;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.Hybrid[t] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            tmpFn(data);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>.Hybrid[t];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bridgePostMsg(_getHybridUrl(params));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//获取版本信息，约定APP的navigator.userAgent版本包含版本信息：scheme/xx.xx.xx</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getHybridInfo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> platform_version = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> na = navigator.userAgent;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> info = na.match(<span class=\"regexp\">/scheme\\/\\d\\.\\d\\.\\d/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (info &amp;&amp; info[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        info = info[<span class=\"number\">0</span>].split(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (info &amp;&amp; info.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            platform_version.platform = info[<span class=\"number\">0</span>];</span><br><span class=\"line\">            platform_version.version = info[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> platform_version;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hybrid交互\"><a href=\"#hybrid交互\" class=\"headerlink\" title=\"hybrid交互\"></a>hybrid交互</h2><ol>\n<li>JavaScript core == js bridge</li>\n<li>url schema</li>\n</ol>\n<p>这里有一张图可以简单说明：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-99b7d4e57413b849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"detail\"></p>\n<p>其实Hybrid的交互无非就2种方法：</p>\n<ul>\n<li>native调用前端页面中js方法</li>\n<li>前端页面通过js调用native提供的接口</li>\n</ul>\n<p><code>2个交互的bridge都是webview</code></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a10d0fed8dca91f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>从第一个开始讲解：web和native约定好，然后h5将一组api绑定在window对象上，app通过webview获取window对象然后调用js。这就是最初说的<strong>native调用页面中js的方法</strong></p>\n<p>第二个：web传递一个url，然后native那边可以截断url，通过url中的schema进行解析，然后做出相应的操作</p>\n<p>然后app自身是可以自定义url schema的，并把自定义的url注册在调度中心，比如：</p>\n<ul>\n<li>weixin:// 打开微信</li>\n<li>ctrip：//xx  打开携程</li>\n</ul>\n<p>js与native通信：创建这类url，native将其捕获，然后进行操作。</p>\n<h3 id=\"api式交互\"><a href=\"#api式交互\" class=\"headerlink\" title=\"api式交互\"></a>api式交互</h3><p>native api接口和ajax调用服务器提供的接口非常相似</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-438484e7600dd71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>然后接下来这张图可以清楚的展示我们在设计hybrid交互模型的时候，通信的流程：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-a3f0bcf34c210847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"格式约定\"><a href=\"#格式约定\" class=\"headerlink\" title=\"格式约定\"></a>格式约定</h3><p>前面说了这个流程和ajax比较相似，这里就按照ajax做一个参考。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(options)  =&gt;  XMLHttpRequest</span><br><span class=\"line\">type(<span class=\"keyword\">default</span> val：“get”)  http请求方法（“get”，“post”，其他）</span><br><span class=\"line\">url(<span class=\"keyword\">default</span> val：当前url)  请求url的地址</span><br><span class=\"line\">data(<span class=\"keyword\">default</span> val：none)</span><br></pre></td></tr></table></figure>\n<p>与native约定的请求模型：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestHybrid(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//创建一个新的webview对话框窗口</span></span><br><span class=\"line\">  tagname: <span class=\"string\">'hybridapi'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//请求参数，会被Native使用</span></span><br><span class=\"line\">  param: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//Native处理成功后回调前端的方法</span></span><br><span class=\"line\">  callback: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这个方法就会形成一个url，比如：<br>hybridschema://hybridapi?callback=hybrid_1446276509894&amp;param=%7B%22data1%22%3A1%2C%22data2%22%3A2%7D</p>\n<p>然后数据会得到返回，一般的格式是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\">  errno: <span class=\"number\">0</span>,</span><br><span class=\"line\">  msg: <span class=\"string\">\"success\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>code：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Hybrid = <span class=\"built_in\">window</span>.Hybrid || &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bridgePostMsg = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($.os.ios) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location = url;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ifr = $(<span class=\"string\">'&lt;iframe style=\"display: none;\" src=\"'</span> + url + <span class=\"string\">'\"/&gt;'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'body'</span>).append(ifr);</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            ifr.remove();</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _getHybridUrl = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> k, paramStr = <span class=\"string\">''</span>, url = <span class=\"string\">'scheme://'</span>;</span><br><span class=\"line\">    url += params.tagname + <span class=\"string\">'?t='</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">//时间戳，防止url不起效</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.callback) &#123;</span><br><span class=\"line\">        url += <span class=\"string\">'&amp;callback='</span> + params.callback;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> params.callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.param) &#123;</span><br><span class=\"line\">        paramStr = <span class=\"keyword\">typeof</span> params.param == <span class=\"string\">'object'</span> ? <span class=\"built_in\">JSON</span>.stringify(params.param) : params.param;</span><br><span class=\"line\">        url += <span class=\"string\">'&amp;param='</span> + <span class=\"built_in\">encodeURIComponent</span>(paramStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> requestHybrid = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//生成唯一执行函数，执行后销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tt = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"string\">'hybrid_'</span> + tt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmpFn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理有回调的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.callback) &#123;</span><br><span class=\"line\">        tmpFn = params.callback;</span><br><span class=\"line\">        params.callback = t;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.Hybrid[t] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            tmpFn(data);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>.Hybrid[t];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bridgePostMsg(_getHybridUrl(params));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//获取版本信息，约定APP的navigator.userAgent版本包含版本信息：scheme/xx.xx.xx</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getHybridInfo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> platform_version = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> na = navigator.userAgent;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> info = na.match(<span class=\"regexp\">/scheme\\/\\d\\.\\d\\.\\d/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (info &amp;&amp; info[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        info = info[<span class=\"number\">0</span>].split(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (info &amp;&amp; info.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            platform_version.platform = info[<span class=\"number\">0</span>];</span><br><span class=\"line\">            platform_version.version = info[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> platform_version;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"vue源码解析(第一弹)","date":"2018-11-22T16:00:00.000Z","description":"最近在深 vue，接下来会有记录一系列 vue 源码解析方面的东西，主要从 3 个方面，开始解读","_content":"\n# vue 源码探究（第一弹）\n\n最近在深 vue，接下来会有记录一系列 vue 源码解析方面的东西，主要从 3 个方面，开始解读：\n\n- 数据代理\n- 模板解析\n- 数据双向绑定\n\n在解析这些的时候，会发现源码中用到了很多 js 中比较核心但平时用的比较少的东西，在这里也先做一个 prepare 的预热吧。\n\n### 问题\n\n1. [].slice.call(lis): 将伪数组转换为真数组\n2. node.nodeType: 得到节点类型\n3. Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)\n4. Object.keys(obj): 得到对象自身可枚举属性组成的数组\n5. obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性\n6. DocumentFragment: 文档碎片(高效批量更新多个节点)\n\n### 解析\n\n#### 一、如何将伪数组转换为真数组\n\n首先抛出一个问题，什么叫做伪数组？\n\n```JS\nconst lis = document.getElementsByTagName('li') // lis是伪数组(是一个特别的对象, length和数值下标属性)\nconsole.log(lis instanceof Object, lis instanceof Array, lis.forEach)// 打印结果 true false undefined\n```\n\n在 ES6 中，我们可以通过这样一个方法，把伪数组转为真数组\n\n```js\nArray.from(lis); //es6中将伪数组->真数组\n```\n\n如果说，在 ES5 中，我们应该怎么做呢？\n\n```js\nconst lis2 = Array.prototype.slice.call(lis); // lis.slice() 通过lis调用slice\nconsole.log(lis2 instanceof Object, lis2 instanceof Array, lis2.forEach);\n// true true ƒ forEach() { [native code] }\n```\n\n这里再顺便拓展一下 slice 吧\n\n```JS\n  // 数组的slice()截取数组中指定部分的元素, 生成一个新的数组  [1, 3, 5, 7, 9], slice(0, 3)\n  // slice2() 内部实现\n  Array.prototype.slice2 = function (start, end) {\n    start = start || 0\n    end = start || this.length\n    const arr = []\n    for (var i = start; i < end; i++) {\n      arr.push(this[i])\n    }\n    return arr\n  }\n```\n\n#### 二、node.nodeType: 得到节点类型\n\n先 show code：\n\n```js\nconst elementNode = document.getElementById('test');\nconst attrNode = elementNode.getAttributeNode('id');\nconst textNode = elementNode.firstChild;\nconsole.log(elementNode, attrNode, textNode);\n// <div id=\"test\">教育</div> id=\"test\" \"教育\"\nconsole.log(elementNode.nodeType, attrNode.nodeType, textNode.nodeType);\n// 1 2 3\n```\n\n#### 三、Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)\n\nvue 源码中用到了很多次这个属性，数据的双向绑定底层实现也是运用到它，还是很有意思，hhh\n\n简单举一个例，让它做到数据绑定。\n\n```JS\n  const obj = {\n    firstName: 'A',\n    lastName: 'B'\n  }\n  // 如果说，我们想得到这个：obj.fullName = 'A-B'\n  // 参数介绍：\n  // obj 要在其上定义属性的对象。\n  // prop 要定义或修改的属性的名称。\n  // descriptor 将被定义或修改的属性描述符\n  Object.defineProperty(obj, 'fullName', {\n    // 属性描述符:\n    // 数据描述符\n    // 访问描述符\n    // 当读取对象此属性值时自动调用, 将函数返回的值作为属性值, this为obj\n    get () {\n      return this.firstName + \"-\" + this.lastName\n    },\n    // 当修改了对象的当前属性值时自动调用, 监视当前属性值的变化, 修改相关的属性, this为obj\n    set (value) {\n      const names = value.split('-')\n      this.firstName = names[0]\n      this.lastName = names[1]\n    }\n  })\n\n  console.log(obj.fullName) // A-B\n  obj.fullName = 'C-D'\n  console.log(obj.firstName, obj.lastName) // C D\n  // 是不是感觉很像v-module中的双向数据绑定\n```\n\n看了简单的绑定，我们再来深入一下~\n紧接着上面的\n\n```JS\n  Object.defineProperty(obj, 'fullName2', {\n    configurable: false, //是否可以重新define\n    enumerable: true, // 是否可以枚举(for..in / keys()) 这个在下面的object.key() 中会 深受感触\n    value: 'A-B', // 指定初始值\n    writable: false // value是否可以修改\n  })\n  console.log(obj.fullName2)  // A-B\n  obj.fullName2 = 'E-F'\n  console.log(obj.fullName2) // A-B\n  // 为什么会出现这个问题呢？是不是因为writable的原因？那我们可以改一下吗？\n\n  Object.defineProperty(obj, 'fullName2', {\n    configurable: true,\n    enumerable: true,\n    value: 'G-H',\n    writable: true\n  })\n  // 这时候会报错\n  // Uncaught TypeError: Cannot redefine property:fullName2\n  //at Function.defineProperty (<anonymous>)\n  // 相信你已经懂了吧\n```\n\n**讲到这里，会提到一个题外话，为什么说 vue 不支持 ie8 呢？**\n因为 Object.defineProperty 是 es5 中新增的东西，它不支持 ie8，而 vue 中的数据绑定等多处用到该属性，所以，这也就是为什么 vue 不支持 ie8，因为这个方法不支持 ie8\n\n#### 四、Object.keys(obj): 得到对象自身可枚举属性组成的数组\n\n这里敲黑板、划重点 `对象自身` `可枚举`\n\n```js\nconst names = Object.keys(obj);\nconsole.log(names);\n//  [\"firstName\", \"lastName\", \"fullName2\"]\n// 为什么没有 fullName 因为fullname中的enumerable不是true 默认为false。\n```\n\n#### 五、obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性\n\n这个属性还是有很多地方会用到。具体是干嘛的？\n相信直译就可以了解，看这个属性是不是自身的。\n因为有些属性虽然可以用，但有可能是原型链上的，而不是自己的，这个方法可以用于检测\n\n```js\nconsole.log(obj.hasOwnProperty('fullName'), obj.hasOwnProperty('toString'));\n// true false\n```\n\n未完待续... \n接下来，还有一个更有趣的东西，文档碎片(高效批量更新多个节点)，这也是为什么vue可以批量更新节点。\n\n**下一章继续~**","source":"_posts/vue源码解析(第一弹).md","raw":"\n---\nlayout: post\ntitle: \"vue源码解析(第一弹)\"\ndate: 2018-11-23\ncategories:\n  - vue\ndescription: 最近在深 vue，接下来会有记录一系列 vue 源码解析方面的东西，主要从 3 个方面，开始解读\n---\n\n# vue 源码探究（第一弹）\n\n最近在深 vue，接下来会有记录一系列 vue 源码解析方面的东西，主要从 3 个方面，开始解读：\n\n- 数据代理\n- 模板解析\n- 数据双向绑定\n\n在解析这些的时候，会发现源码中用到了很多 js 中比较核心但平时用的比较少的东西，在这里也先做一个 prepare 的预热吧。\n\n### 问题\n\n1. [].slice.call(lis): 将伪数组转换为真数组\n2. node.nodeType: 得到节点类型\n3. Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)\n4. Object.keys(obj): 得到对象自身可枚举属性组成的数组\n5. obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性\n6. DocumentFragment: 文档碎片(高效批量更新多个节点)\n\n### 解析\n\n#### 一、如何将伪数组转换为真数组\n\n首先抛出一个问题，什么叫做伪数组？\n\n```JS\nconst lis = document.getElementsByTagName('li') // lis是伪数组(是一个特别的对象, length和数值下标属性)\nconsole.log(lis instanceof Object, lis instanceof Array, lis.forEach)// 打印结果 true false undefined\n```\n\n在 ES6 中，我们可以通过这样一个方法，把伪数组转为真数组\n\n```js\nArray.from(lis); //es6中将伪数组->真数组\n```\n\n如果说，在 ES5 中，我们应该怎么做呢？\n\n```js\nconst lis2 = Array.prototype.slice.call(lis); // lis.slice() 通过lis调用slice\nconsole.log(lis2 instanceof Object, lis2 instanceof Array, lis2.forEach);\n// true true ƒ forEach() { [native code] }\n```\n\n这里再顺便拓展一下 slice 吧\n\n```JS\n  // 数组的slice()截取数组中指定部分的元素, 生成一个新的数组  [1, 3, 5, 7, 9], slice(0, 3)\n  // slice2() 内部实现\n  Array.prototype.slice2 = function (start, end) {\n    start = start || 0\n    end = start || this.length\n    const arr = []\n    for (var i = start; i < end; i++) {\n      arr.push(this[i])\n    }\n    return arr\n  }\n```\n\n#### 二、node.nodeType: 得到节点类型\n\n先 show code：\n\n```js\nconst elementNode = document.getElementById('test');\nconst attrNode = elementNode.getAttributeNode('id');\nconst textNode = elementNode.firstChild;\nconsole.log(elementNode, attrNode, textNode);\n// <div id=\"test\">教育</div> id=\"test\" \"教育\"\nconsole.log(elementNode.nodeType, attrNode.nodeType, textNode.nodeType);\n// 1 2 3\n```\n\n#### 三、Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)\n\nvue 源码中用到了很多次这个属性，数据的双向绑定底层实现也是运用到它，还是很有意思，hhh\n\n简单举一个例，让它做到数据绑定。\n\n```JS\n  const obj = {\n    firstName: 'A',\n    lastName: 'B'\n  }\n  // 如果说，我们想得到这个：obj.fullName = 'A-B'\n  // 参数介绍：\n  // obj 要在其上定义属性的对象。\n  // prop 要定义或修改的属性的名称。\n  // descriptor 将被定义或修改的属性描述符\n  Object.defineProperty(obj, 'fullName', {\n    // 属性描述符:\n    // 数据描述符\n    // 访问描述符\n    // 当读取对象此属性值时自动调用, 将函数返回的值作为属性值, this为obj\n    get () {\n      return this.firstName + \"-\" + this.lastName\n    },\n    // 当修改了对象的当前属性值时自动调用, 监视当前属性值的变化, 修改相关的属性, this为obj\n    set (value) {\n      const names = value.split('-')\n      this.firstName = names[0]\n      this.lastName = names[1]\n    }\n  })\n\n  console.log(obj.fullName) // A-B\n  obj.fullName = 'C-D'\n  console.log(obj.firstName, obj.lastName) // C D\n  // 是不是感觉很像v-module中的双向数据绑定\n```\n\n看了简单的绑定，我们再来深入一下~\n紧接着上面的\n\n```JS\n  Object.defineProperty(obj, 'fullName2', {\n    configurable: false, //是否可以重新define\n    enumerable: true, // 是否可以枚举(for..in / keys()) 这个在下面的object.key() 中会 深受感触\n    value: 'A-B', // 指定初始值\n    writable: false // value是否可以修改\n  })\n  console.log(obj.fullName2)  // A-B\n  obj.fullName2 = 'E-F'\n  console.log(obj.fullName2) // A-B\n  // 为什么会出现这个问题呢？是不是因为writable的原因？那我们可以改一下吗？\n\n  Object.defineProperty(obj, 'fullName2', {\n    configurable: true,\n    enumerable: true,\n    value: 'G-H',\n    writable: true\n  })\n  // 这时候会报错\n  // Uncaught TypeError: Cannot redefine property:fullName2\n  //at Function.defineProperty (<anonymous>)\n  // 相信你已经懂了吧\n```\n\n**讲到这里，会提到一个题外话，为什么说 vue 不支持 ie8 呢？**\n因为 Object.defineProperty 是 es5 中新增的东西，它不支持 ie8，而 vue 中的数据绑定等多处用到该属性，所以，这也就是为什么 vue 不支持 ie8，因为这个方法不支持 ie8\n\n#### 四、Object.keys(obj): 得到对象自身可枚举属性组成的数组\n\n这里敲黑板、划重点 `对象自身` `可枚举`\n\n```js\nconst names = Object.keys(obj);\nconsole.log(names);\n//  [\"firstName\", \"lastName\", \"fullName2\"]\n// 为什么没有 fullName 因为fullname中的enumerable不是true 默认为false。\n```\n\n#### 五、obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性\n\n这个属性还是有很多地方会用到。具体是干嘛的？\n相信直译就可以了解，看这个属性是不是自身的。\n因为有些属性虽然可以用，但有可能是原型链上的，而不是自己的，这个方法可以用于检测\n\n```js\nconsole.log(obj.hasOwnProperty('fullName'), obj.hasOwnProperty('toString'));\n// true false\n```\n\n未完待续... \n接下来，还有一个更有趣的东西，文档碎片(高效批量更新多个节点)，这也是为什么vue可以批量更新节点。\n\n**下一章继续~**","slug":"vue源码解析(第一弹)","published":1,"updated":"2019-01-31T07:15:59.727Z","comments":1,"photos":[],"link":"","_id":"cjvaywf2x002n509673z8pq0h","content":"<h1 id=\"vue-源码探究（第一弹）\"><a href=\"#vue-源码探究（第一弹）\" class=\"headerlink\" title=\"vue 源码探究（第一弹）\"></a>vue 源码探究（第一弹）</h1><p>最近在深 vue，接下来会有记录一系列 vue 源码解析方面的东西，主要从 3 个方面，开始解读：</p>\n<ul>\n<li>数据代理</li>\n<li>模板解析</li>\n<li>数据双向绑定</li>\n</ul>\n<p>在解析这些的时候，会发现源码中用到了很多 js 中比较核心但平时用的比较少的东西，在这里也先做一个 prepare 的预热吧。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li>[].slice.call(lis): 将伪数组转换为真数组</li>\n<li>node.nodeType: 得到节点类型</li>\n<li>Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)</li>\n<li>Object.keys(obj): 得到对象自身可枚举属性组成的数组</li>\n<li>obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性</li>\n<li>DocumentFragment: 文档碎片(高效批量更新多个节点)</li>\n</ol>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"一、如何将伪数组转换为真数组\"><a href=\"#一、如何将伪数组转换为真数组\" class=\"headerlink\" title=\"一、如何将伪数组转换为真数组\"></a>一、如何将伪数组转换为真数组</h4><p>首先抛出一个问题，什么叫做伪数组？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lis = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>) <span class=\"comment\">// lis是伪数组(是一个特别的对象, length和数值下标属性)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lis <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>, lis <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>, lis.forEach)<span class=\"comment\">// 打印结果 true false undefined</span></span><br></pre></td></tr></table></figure>\n<p>在 ES6 中，我们可以通过这样一个方法，把伪数组转为真数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(lis); <span class=\"comment\">//es6中将伪数组-&gt;真数组</span></span><br></pre></td></tr></table></figure>\n<p>如果说，在 ES5 中，我们应该怎么做呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lis2 = <span class=\"built_in\">Array</span>.prototype.slice.call(lis); <span class=\"comment\">// lis.slice() 通过lis调用slice</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lis2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>, lis2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>, lis2.forEach);</span><br><span class=\"line\"><span class=\"comment\">// true true ƒ forEach() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里再顺便拓展一下 slice 吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的slice()截取数组中指定部分的元素, 生成一个新的数组  [1, 3, 5, 7, 9], slice(0, 3)</span></span><br><span class=\"line\"><span class=\"comment\">// slice2() 内部实现</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">start, end</span>) </span>&#123;</span><br><span class=\"line\">  start = start || <span class=\"number\">0</span></span><br><span class=\"line\">  end = start || <span class=\"keyword\">this</span>.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    arr.push(<span class=\"keyword\">this</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、node-nodeType-得到节点类型\"><a href=\"#二、node-nodeType-得到节点类型\" class=\"headerlink\" title=\"二、node.nodeType: 得到节点类型\"></a>二、node.nodeType: 得到节点类型</h4><p>先 show code：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementNode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> attrNode = elementNode.getAttributeNode(<span class=\"string\">'id'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> textNode = elementNode.firstChild;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(elementNode, attrNode, textNode);</span><br><span class=\"line\"><span class=\"comment\">// &lt;div id=\"test\"&gt;教育&lt;/div&gt; id=\"test\" \"教育\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(elementNode.nodeType, attrNode.nodeType, textNode.nodeType);</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三、Object-defineProperty-obj-propertyName-给对象添加属性-指定描述符\"><a href=\"#三、Object-defineProperty-obj-propertyName-给对象添加属性-指定描述符\" class=\"headerlink\" title=\"三、Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)\"></a>三、Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)</h4><p>vue 源码中用到了很多次这个属性，数据的双向绑定底层实现也是运用到它，还是很有意思，hhh</p>\n<p>简单举一个例，让它做到数据绑定。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'B'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果说，我们想得到这个：obj.fullName = 'A-B'</span></span><br><span class=\"line\"><span class=\"comment\">// 参数介绍：</span></span><br><span class=\"line\"><span class=\"comment\">// obj 要在其上定义属性的对象。</span></span><br><span class=\"line\"><span class=\"comment\">// prop 要定义或修改的属性的名称。</span></span><br><span class=\"line\"><span class=\"comment\">// descriptor 将被定义或修改的属性描述符</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'fullName'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性描述符:</span></span><br><span class=\"line\">  <span class=\"comment\">// 数据描述符</span></span><br><span class=\"line\">  <span class=\"comment\">// 访问描述符</span></span><br><span class=\"line\">  <span class=\"comment\">// 当读取对象此属性值时自动调用, 将函数返回的值作为属性值, this为obj</span></span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">\"-\"</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 当修改了对象的当前属性值时自动调用, 监视当前属性值的变化, 修改相关的属性, this为obj</span></span><br><span class=\"line\">  set (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> names = value.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lastName = names[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fullName) <span class=\"comment\">// A-B</span></span><br><span class=\"line\">obj.fullName = <span class=\"string\">'C-D'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.firstName, obj.lastName) <span class=\"comment\">// C D</span></span><br><span class=\"line\"><span class=\"comment\">// 是不是感觉很像v-module中的双向数据绑定</span></span><br></pre></td></tr></table></figure>\n<p>看了简单的绑定，我们再来深入一下~<br>紧接着上面的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'fullName2'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>, <span class=\"comment\">//是否可以重新define</span></span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否可以枚举(for..in / keys()) 这个在下面的object.key() 中会 深受感触</span></span><br><span class=\"line\">  value: <span class=\"string\">'A-B'</span>, <span class=\"comment\">// 指定初始值</span></span><br><span class=\"line\">  writable: <span class=\"literal\">false</span> <span class=\"comment\">// value是否可以修改</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fullName2)  <span class=\"comment\">// A-B</span></span><br><span class=\"line\">obj.fullName2 = <span class=\"string\">'E-F'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fullName2) <span class=\"comment\">// A-B</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么会出现这个问题呢？是不是因为writable的原因？那我们可以改一下吗？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'fullName2'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">'G-H'</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 这时候会报错</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: Cannot redefine property:fullName2</span></span><br><span class=\"line\"><span class=\"comment\">//at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">// 相信你已经懂了吧</span></span><br></pre></td></tr></table></figure>\n<p><strong>讲到这里，会提到一个题外话，为什么说 vue 不支持 ie8 呢？</strong><br>因为 Object.defineProperty 是 es5 中新增的东西，它不支持 ie8，而 vue 中的数据绑定等多处用到该属性，所以，这也就是为什么 vue 不支持 ie8，因为这个方法不支持 ie8</p>\n<h4 id=\"四、Object-keys-obj-得到对象自身可枚举属性组成的数组\"><a href=\"#四、Object-keys-obj-得到对象自身可枚举属性组成的数组\" class=\"headerlink\" title=\"四、Object.keys(obj): 得到对象自身可枚举属性组成的数组\"></a>四、Object.keys(obj): 得到对象自身可枚举属性组成的数组</h4><p>这里敲黑板、划重点 <code>对象自身</code> <code>可枚举</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names);</span><br><span class=\"line\"><span class=\"comment\">//  [\"firstName\", \"lastName\", \"fullName2\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么没有 fullName 因为fullname中的enumerable不是true 默认为false。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"五、obj-hasOwnProperty-prop-判断-prop-是否是-obj-自身的属性\"><a href=\"#五、obj-hasOwnProperty-prop-判断-prop-是否是-obj-自身的属性\" class=\"headerlink\" title=\"五、obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性\"></a>五、obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性</h4><p>这个属性还是有很多地方会用到。具体是干嘛的？<br>相信直译就可以了解，看这个属性是不是自身的。<br>因为有些属性虽然可以用，但有可能是原型链上的，而不是自己的，这个方法可以用于检测</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">'fullName'</span>), obj.hasOwnProperty(<span class=\"string\">'toString'</span>));</span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br></pre></td></tr></table></figure>\n<p>未完待续…<br>接下来，还有一个更有趣的东西，文档碎片(高效批量更新多个节点)，这也是为什么vue可以批量更新节点。</p>\n<p><strong>下一章继续~</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue-源码探究（第一弹）\"><a href=\"#vue-源码探究（第一弹）\" class=\"headerlink\" title=\"vue 源码探究（第一弹）\"></a>vue 源码探究（第一弹）</h1><p>最近在深 vue，接下来会有记录一系列 vue 源码解析方面的东西，主要从 3 个方面，开始解读：</p>\n<ul>\n<li>数据代理</li>\n<li>模板解析</li>\n<li>数据双向绑定</li>\n</ul>\n<p>在解析这些的时候，会发现源码中用到了很多 js 中比较核心但平时用的比较少的东西，在这里也先做一个 prepare 的预热吧。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li>[].slice.call(lis): 将伪数组转换为真数组</li>\n<li>node.nodeType: 得到节点类型</li>\n<li>Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)</li>\n<li>Object.keys(obj): 得到对象自身可枚举属性组成的数组</li>\n<li>obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性</li>\n<li>DocumentFragment: 文档碎片(高效批量更新多个节点)</li>\n</ol>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"一、如何将伪数组转换为真数组\"><a href=\"#一、如何将伪数组转换为真数组\" class=\"headerlink\" title=\"一、如何将伪数组转换为真数组\"></a>一、如何将伪数组转换为真数组</h4><p>首先抛出一个问题，什么叫做伪数组？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lis = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>) <span class=\"comment\">// lis是伪数组(是一个特别的对象, length和数值下标属性)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lis <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>, lis <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>, lis.forEach)<span class=\"comment\">// 打印结果 true false undefined</span></span><br></pre></td></tr></table></figure>\n<p>在 ES6 中，我们可以通过这样一个方法，把伪数组转为真数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(lis); <span class=\"comment\">//es6中将伪数组-&gt;真数组</span></span><br></pre></td></tr></table></figure>\n<p>如果说，在 ES5 中，我们应该怎么做呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lis2 = <span class=\"built_in\">Array</span>.prototype.slice.call(lis); <span class=\"comment\">// lis.slice() 通过lis调用slice</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lis2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>, lis2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>, lis2.forEach);</span><br><span class=\"line\"><span class=\"comment\">// true true ƒ forEach() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里再顺便拓展一下 slice 吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的slice()截取数组中指定部分的元素, 生成一个新的数组  [1, 3, 5, 7, 9], slice(0, 3)</span></span><br><span class=\"line\"><span class=\"comment\">// slice2() 内部实现</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">start, end</span>) </span>&#123;</span><br><span class=\"line\">  start = start || <span class=\"number\">0</span></span><br><span class=\"line\">  end = start || <span class=\"keyword\">this</span>.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    arr.push(<span class=\"keyword\">this</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、node-nodeType-得到节点类型\"><a href=\"#二、node-nodeType-得到节点类型\" class=\"headerlink\" title=\"二、node.nodeType: 得到节点类型\"></a>二、node.nodeType: 得到节点类型</h4><p>先 show code：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementNode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> attrNode = elementNode.getAttributeNode(<span class=\"string\">'id'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> textNode = elementNode.firstChild;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(elementNode, attrNode, textNode);</span><br><span class=\"line\"><span class=\"comment\">// &lt;div id=\"test\"&gt;教育&lt;/div&gt; id=\"test\" \"教育\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(elementNode.nodeType, attrNode.nodeType, textNode.nodeType);</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三、Object-defineProperty-obj-propertyName-给对象添加属性-指定描述符\"><a href=\"#三、Object-defineProperty-obj-propertyName-给对象添加属性-指定描述符\" class=\"headerlink\" title=\"三、Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)\"></a>三、Object.defineProperty(obj, propertyName, {}): 给对象添加属性(指定描述符)</h4><p>vue 源码中用到了很多次这个属性，数据的双向绑定底层实现也是运用到它，还是很有意思，hhh</p>\n<p>简单举一个例，让它做到数据绑定。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'B'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果说，我们想得到这个：obj.fullName = 'A-B'</span></span><br><span class=\"line\"><span class=\"comment\">// 参数介绍：</span></span><br><span class=\"line\"><span class=\"comment\">// obj 要在其上定义属性的对象。</span></span><br><span class=\"line\"><span class=\"comment\">// prop 要定义或修改的属性的名称。</span></span><br><span class=\"line\"><span class=\"comment\">// descriptor 将被定义或修改的属性描述符</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'fullName'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性描述符:</span></span><br><span class=\"line\">  <span class=\"comment\">// 数据描述符</span></span><br><span class=\"line\">  <span class=\"comment\">// 访问描述符</span></span><br><span class=\"line\">  <span class=\"comment\">// 当读取对象此属性值时自动调用, 将函数返回的值作为属性值, this为obj</span></span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">\"-\"</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 当修改了对象的当前属性值时自动调用, 监视当前属性值的变化, 修改相关的属性, this为obj</span></span><br><span class=\"line\">  set (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> names = value.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lastName = names[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fullName) <span class=\"comment\">// A-B</span></span><br><span class=\"line\">obj.fullName = <span class=\"string\">'C-D'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.firstName, obj.lastName) <span class=\"comment\">// C D</span></span><br><span class=\"line\"><span class=\"comment\">// 是不是感觉很像v-module中的双向数据绑定</span></span><br></pre></td></tr></table></figure>\n<p>看了简单的绑定，我们再来深入一下~<br>紧接着上面的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'fullName2'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>, <span class=\"comment\">//是否可以重新define</span></span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否可以枚举(for..in / keys()) 这个在下面的object.key() 中会 深受感触</span></span><br><span class=\"line\">  value: <span class=\"string\">'A-B'</span>, <span class=\"comment\">// 指定初始值</span></span><br><span class=\"line\">  writable: <span class=\"literal\">false</span> <span class=\"comment\">// value是否可以修改</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fullName2)  <span class=\"comment\">// A-B</span></span><br><span class=\"line\">obj.fullName2 = <span class=\"string\">'E-F'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fullName2) <span class=\"comment\">// A-B</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么会出现这个问题呢？是不是因为writable的原因？那我们可以改一下吗？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'fullName2'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">'G-H'</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 这时候会报错</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: Cannot redefine property:fullName2</span></span><br><span class=\"line\"><span class=\"comment\">//at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">// 相信你已经懂了吧</span></span><br></pre></td></tr></table></figure>\n<p><strong>讲到这里，会提到一个题外话，为什么说 vue 不支持 ie8 呢？</strong><br>因为 Object.defineProperty 是 es5 中新增的东西，它不支持 ie8，而 vue 中的数据绑定等多处用到该属性，所以，这也就是为什么 vue 不支持 ie8，因为这个方法不支持 ie8</p>\n<h4 id=\"四、Object-keys-obj-得到对象自身可枚举属性组成的数组\"><a href=\"#四、Object-keys-obj-得到对象自身可枚举属性组成的数组\" class=\"headerlink\" title=\"四、Object.keys(obj): 得到对象自身可枚举属性组成的数组\"></a>四、Object.keys(obj): 得到对象自身可枚举属性组成的数组</h4><p>这里敲黑板、划重点 <code>对象自身</code> <code>可枚举</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names);</span><br><span class=\"line\"><span class=\"comment\">//  [\"firstName\", \"lastName\", \"fullName2\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么没有 fullName 因为fullname中的enumerable不是true 默认为false。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"五、obj-hasOwnProperty-prop-判断-prop-是否是-obj-自身的属性\"><a href=\"#五、obj-hasOwnProperty-prop-判断-prop-是否是-obj-自身的属性\" class=\"headerlink\" title=\"五、obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性\"></a>五、obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性</h4><p>这个属性还是有很多地方会用到。具体是干嘛的？<br>相信直译就可以了解，看这个属性是不是自身的。<br>因为有些属性虽然可以用，但有可能是原型链上的，而不是自己的，这个方法可以用于检测</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">'fullName'</span>), obj.hasOwnProperty(<span class=\"string\">'toString'</span>));</span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br></pre></td></tr></table></figure>\n<p>未完待续…<br>接下来，还有一个更有趣的东西，文档碎片(高效批量更新多个节点)，这也是为什么vue可以批量更新节点。</p>\n<p><strong>下一章继续~</strong></p>\n"},{"title":"放弃一个喜欢了很久的人，是一种什么感受？","date":"2016-12-25T16:00:00.000Z","description":"随便写写","music":"//dl.stream.qqmusic.qq.com/C400000dl9Xg4OFTSK.m4a?guid=9270829955&vkey=BFD8DFED52C45FCDB2FCEFF4EAB54430203D1F14E517D0F2DF3321EA1592CC71A016C84E8BD21E09DE1908771CECBEDFEE2BC5452D39C4ED&uin=0&fromtag=66","_content":"\n前段时间，在微博上看到了一个挺有趣的提问，它说“放弃一个自己喜欢了很久的人，是一种什么感受？”我随即在下面评论了一句：“感觉身体被掏空了”，本来这是一挺让人伤感的话题，我却逼逼了这么傻逼的一句。\n\n其实我当时评论的第一反应是：“那我可能再也遇不到一个这么喜欢的人了”。\n\n后来，听一个朋友讲了她的一些事情后，我对这个提问，有了个新的答案。\n\n这个朋友就称她为小A吧，暂时想不出更好的名字代号。在这里梳理一下故事发生的背景，小A有一个玩的挺好的朋友，那么我就称他为小B吧，小A和小B是很要好的中学同学，要好的程度就是那种，随时都在一块，形影不离，而且俩人特多的共同点，很多习性都惊人的一致，但是俩人确实都只把对方当做好朋友那种。\n\n后来上大学了，小A和小B上了不同的大学，各自也有了各自的朋友圈，见面的时间少了很多，但小A和小B在网上也有经常联系什么鬼的。\n\n小A告诉我，她整整高中三年都没有喜欢过小B，直到后来上了大学，身边没有了他。\n\n小A每次都是断断续续的讲一些她的事情，她说，她也不知道为什么后来对小B的感情就变了。我说，但是感情这事不本来就是说不清楚的吗，更何况物是人非事事休，别人会变，你会变，感情也会变啊。\n\n就在前几天，小A突然给我发了一个截图，那个截图上面是她的之前写的一篇日记。\n\n她的日记是这样写的:\n\n你背对着山河一步步走向我，你脚踏着山河一步步走近我。\n\n\n\n每次听《祝星》都会带给我不一样的感动。\n\n我给你写过好多好多话，写了好多好多段子，写了好多好多文章，但是它们最终都只能存在我的手机里，不见天日。\n\n我写:你有时看群山，有时看绿水，有时看落日，有时看人群，却独独不看我。\n\n我写:在所有物是人非的景色里，我最喜欢你。\n\n我写:我来人间一趟，我要看看太阳，和我的心上人，一起走在街上。\n\n我写:我只能活一次，我要去活成我想要的样子。\n\n我写:我知道我们只能是好朋友，每次我在说服自己放弃吧的时候，总会有个小侥幸跳出来，它说:再等等吧。\n\n我问自己，喜欢一个人是什么样的？\n\n喜欢一个人，就是手心中明明只有两颗糖，却想给他五颗糖。看见一部喜欢的电影，想要分享给他，吃到自己喜欢的东西，便想着给他也带一份，看到一片美丽的风景，便会想着下次要带他过来一起看，甚至偶然听到一个段子，都想着讲给他听的时候，他会不会笑。\n\n经常看见有人说，真正的喜欢是，他想要香蕉就给他香蕉，而不是拼命给他塞苹果，可是，身在其中的人，只想把自己最喜欢的东西给对方，想把自己觉得好的东西都塞给他，不管他想不想要。\n\n到如今，我不是喜欢你，也不是不喜欢你，我对你想不出一句该说的话，不想看你，也不能看你，不想你走来，更不想你走开。\n\n我对你有些穷尽一生不可磨灭的柔情，却不知该如何给你，你是我卡在喉咙里仍未取的刺。\n\n我也不知道这篇日记会在我手机里存多久，应该不会多久了，因为热情终将会过去，而一切都会正常起来，只要生命的车轮还能转动，那我终有一天会走上正轨。\n\n小A她说，她每次都会告诉自己再等等吧，可是等着等着，再热的情也会等冷，或者说，等着等着，就发现何必再用糖纸去包裹一粒沙子？认命得越早越幸福。她说，我现在才知道放下、放弃原来是悄无声息的。\n\n今天，突然想起这个事情，想起这个问题，所以也没有经过她的同意，就把这个故事写出来，也不知道这样对不对。\n\n爱能让人是非不分，这可能就是它最可贵的地方。\n\n可是\n\n感情一旦变味儿了，不如被时光的洪流裹挟而去，抱在怀里，也酿不成酒，也醉不了人。\n\n每个人都有选择去喜欢或者放弃的权利，但是一旦选择了你就应该去承担它所带来的一切，如《陆垚知马俐》里有句台词：爱能让你骄傲如烈日，也能让你卑微入尘土。\n\n所以，现在的我，当我再次听到“放弃一个喜欢了很久的人，是一种什么感受？”的时候，有了一个新的答案：\n\n感情没有对错，错的是时间。\n\n放弃也未必不是好事。\n\n今天是2017.11.11","source":"_posts/放弃一个喜欢很久的人.md","raw":"---\ntitle: \"放弃一个喜欢了很久的人，是一种什么感受？\"\ndate: 2016-12-26\ncategories:\n  - 随笔\ndescription: 随便写写\nmusic: \"//dl.stream.qqmusic.qq.com/C400000dl9Xg4OFTSK.m4a?guid=9270829955&vkey=BFD8DFED52C45FCDB2FCEFF4EAB54430203D1F14E517D0F2DF3321EA1592CC71A016C84E8BD21E09DE1908771CECBEDFEE2BC5452D39C4ED&uin=0&fromtag=66\"\n---\n\n前段时间，在微博上看到了一个挺有趣的提问，它说“放弃一个自己喜欢了很久的人，是一种什么感受？”我随即在下面评论了一句：“感觉身体被掏空了”，本来这是一挺让人伤感的话题，我却逼逼了这么傻逼的一句。\n\n其实我当时评论的第一反应是：“那我可能再也遇不到一个这么喜欢的人了”。\n\n后来，听一个朋友讲了她的一些事情后，我对这个提问，有了个新的答案。\n\n这个朋友就称她为小A吧，暂时想不出更好的名字代号。在这里梳理一下故事发生的背景，小A有一个玩的挺好的朋友，那么我就称他为小B吧，小A和小B是很要好的中学同学，要好的程度就是那种，随时都在一块，形影不离，而且俩人特多的共同点，很多习性都惊人的一致，但是俩人确实都只把对方当做好朋友那种。\n\n后来上大学了，小A和小B上了不同的大学，各自也有了各自的朋友圈，见面的时间少了很多，但小A和小B在网上也有经常联系什么鬼的。\n\n小A告诉我，她整整高中三年都没有喜欢过小B，直到后来上了大学，身边没有了他。\n\n小A每次都是断断续续的讲一些她的事情，她说，她也不知道为什么后来对小B的感情就变了。我说，但是感情这事不本来就是说不清楚的吗，更何况物是人非事事休，别人会变，你会变，感情也会变啊。\n\n就在前几天，小A突然给我发了一个截图，那个截图上面是她的之前写的一篇日记。\n\n她的日记是这样写的:\n\n你背对着山河一步步走向我，你脚踏着山河一步步走近我。\n\n\n\n每次听《祝星》都会带给我不一样的感动。\n\n我给你写过好多好多话，写了好多好多段子，写了好多好多文章，但是它们最终都只能存在我的手机里，不见天日。\n\n我写:你有时看群山，有时看绿水，有时看落日，有时看人群，却独独不看我。\n\n我写:在所有物是人非的景色里，我最喜欢你。\n\n我写:我来人间一趟，我要看看太阳，和我的心上人，一起走在街上。\n\n我写:我只能活一次，我要去活成我想要的样子。\n\n我写:我知道我们只能是好朋友，每次我在说服自己放弃吧的时候，总会有个小侥幸跳出来，它说:再等等吧。\n\n我问自己，喜欢一个人是什么样的？\n\n喜欢一个人，就是手心中明明只有两颗糖，却想给他五颗糖。看见一部喜欢的电影，想要分享给他，吃到自己喜欢的东西，便想着给他也带一份，看到一片美丽的风景，便会想着下次要带他过来一起看，甚至偶然听到一个段子，都想着讲给他听的时候，他会不会笑。\n\n经常看见有人说，真正的喜欢是，他想要香蕉就给他香蕉，而不是拼命给他塞苹果，可是，身在其中的人，只想把自己最喜欢的东西给对方，想把自己觉得好的东西都塞给他，不管他想不想要。\n\n到如今，我不是喜欢你，也不是不喜欢你，我对你想不出一句该说的话，不想看你，也不能看你，不想你走来，更不想你走开。\n\n我对你有些穷尽一生不可磨灭的柔情，却不知该如何给你，你是我卡在喉咙里仍未取的刺。\n\n我也不知道这篇日记会在我手机里存多久，应该不会多久了，因为热情终将会过去，而一切都会正常起来，只要生命的车轮还能转动，那我终有一天会走上正轨。\n\n小A她说，她每次都会告诉自己再等等吧，可是等着等着，再热的情也会等冷，或者说，等着等着，就发现何必再用糖纸去包裹一粒沙子？认命得越早越幸福。她说，我现在才知道放下、放弃原来是悄无声息的。\n\n今天，突然想起这个事情，想起这个问题，所以也没有经过她的同意，就把这个故事写出来，也不知道这样对不对。\n\n爱能让人是非不分，这可能就是它最可贵的地方。\n\n可是\n\n感情一旦变味儿了，不如被时光的洪流裹挟而去，抱在怀里，也酿不成酒，也醉不了人。\n\n每个人都有选择去喜欢或者放弃的权利，但是一旦选择了你就应该去承担它所带来的一切，如《陆垚知马俐》里有句台词：爱能让你骄傲如烈日，也能让你卑微入尘土。\n\n所以，现在的我，当我再次听到“放弃一个喜欢了很久的人，是一种什么感受？”的时候，有了一个新的答案：\n\n感情没有对错，错的是时间。\n\n放弃也未必不是好事。\n\n今天是2017.11.11","slug":"放弃一个喜欢很久的人","published":1,"updated":"2019-03-02T02:25:13.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf2z002o509643g1x4xt","content":"<p>前段时间，在微博上看到了一个挺有趣的提问，它说“放弃一个自己喜欢了很久的人，是一种什么感受？”我随即在下面评论了一句：“感觉身体被掏空了”，本来这是一挺让人伤感的话题，我却逼逼了这么傻逼的一句。</p>\n<p>其实我当时评论的第一反应是：“那我可能再也遇不到一个这么喜欢的人了”。</p>\n<p>后来，听一个朋友讲了她的一些事情后，我对这个提问，有了个新的答案。</p>\n<p>这个朋友就称她为小A吧，暂时想不出更好的名字代号。在这里梳理一下故事发生的背景，小A有一个玩的挺好的朋友，那么我就称他为小B吧，小A和小B是很要好的中学同学，要好的程度就是那种，随时都在一块，形影不离，而且俩人特多的共同点，很多习性都惊人的一致，但是俩人确实都只把对方当做好朋友那种。</p>\n<p>后来上大学了，小A和小B上了不同的大学，各自也有了各自的朋友圈，见面的时间少了很多，但小A和小B在网上也有经常联系什么鬼的。</p>\n<p>小A告诉我，她整整高中三年都没有喜欢过小B，直到后来上了大学，身边没有了他。</p>\n<p>小A每次都是断断续续的讲一些她的事情，她说，她也不知道为什么后来对小B的感情就变了。我说，但是感情这事不本来就是说不清楚的吗，更何况物是人非事事休，别人会变，你会变，感情也会变啊。</p>\n<p>就在前几天，小A突然给我发了一个截图，那个截图上面是她的之前写的一篇日记。</p>\n<p>她的日记是这样写的:</p>\n<p>你背对着山河一步步走向我，你脚踏着山河一步步走近我。</p>\n<p>每次听《祝星》都会带给我不一样的感动。</p>\n<p>我给你写过好多好多话，写了好多好多段子，写了好多好多文章，但是它们最终都只能存在我的手机里，不见天日。</p>\n<p>我写:你有时看群山，有时看绿水，有时看落日，有时看人群，却独独不看我。</p>\n<p>我写:在所有物是人非的景色里，我最喜欢你。</p>\n<p>我写:我来人间一趟，我要看看太阳，和我的心上人，一起走在街上。</p>\n<p>我写:我只能活一次，我要去活成我想要的样子。</p>\n<p>我写:我知道我们只能是好朋友，每次我在说服自己放弃吧的时候，总会有个小侥幸跳出来，它说:再等等吧。</p>\n<p>我问自己，喜欢一个人是什么样的？</p>\n<p>喜欢一个人，就是手心中明明只有两颗糖，却想给他五颗糖。看见一部喜欢的电影，想要分享给他，吃到自己喜欢的东西，便想着给他也带一份，看到一片美丽的风景，便会想着下次要带他过来一起看，甚至偶然听到一个段子，都想着讲给他听的时候，他会不会笑。</p>\n<p>经常看见有人说，真正的喜欢是，他想要香蕉就给他香蕉，而不是拼命给他塞苹果，可是，身在其中的人，只想把自己最喜欢的东西给对方，想把自己觉得好的东西都塞给他，不管他想不想要。</p>\n<p>到如今，我不是喜欢你，也不是不喜欢你，我对你想不出一句该说的话，不想看你，也不能看你，不想你走来，更不想你走开。</p>\n<p>我对你有些穷尽一生不可磨灭的柔情，却不知该如何给你，你是我卡在喉咙里仍未取的刺。</p>\n<p>我也不知道这篇日记会在我手机里存多久，应该不会多久了，因为热情终将会过去，而一切都会正常起来，只要生命的车轮还能转动，那我终有一天会走上正轨。</p>\n<p>小A她说，她每次都会告诉自己再等等吧，可是等着等着，再热的情也会等冷，或者说，等着等着，就发现何必再用糖纸去包裹一粒沙子？认命得越早越幸福。她说，我现在才知道放下、放弃原来是悄无声息的。</p>\n<p>今天，突然想起这个事情，想起这个问题，所以也没有经过她的同意，就把这个故事写出来，也不知道这样对不对。</p>\n<p>爱能让人是非不分，这可能就是它最可贵的地方。</p>\n<p>可是</p>\n<p>感情一旦变味儿了，不如被时光的洪流裹挟而去，抱在怀里，也酿不成酒，也醉不了人。</p>\n<p>每个人都有选择去喜欢或者放弃的权利，但是一旦选择了你就应该去承担它所带来的一切，如《陆垚知马俐》里有句台词：爱能让你骄傲如烈日，也能让你卑微入尘土。</p>\n<p>所以，现在的我，当我再次听到“放弃一个喜欢了很久的人，是一种什么感受？”的时候，有了一个新的答案：</p>\n<p>感情没有对错，错的是时间。</p>\n<p>放弃也未必不是好事。</p>\n<p>今天是2017.11.11</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间，在微博上看到了一个挺有趣的提问，它说“放弃一个自己喜欢了很久的人，是一种什么感受？”我随即在下面评论了一句：“感觉身体被掏空了”，本来这是一挺让人伤感的话题，我却逼逼了这么傻逼的一句。</p>\n<p>其实我当时评论的第一反应是：“那我可能再也遇不到一个这么喜欢的人了”。</p>\n<p>后来，听一个朋友讲了她的一些事情后，我对这个提问，有了个新的答案。</p>\n<p>这个朋友就称她为小A吧，暂时想不出更好的名字代号。在这里梳理一下故事发生的背景，小A有一个玩的挺好的朋友，那么我就称他为小B吧，小A和小B是很要好的中学同学，要好的程度就是那种，随时都在一块，形影不离，而且俩人特多的共同点，很多习性都惊人的一致，但是俩人确实都只把对方当做好朋友那种。</p>\n<p>后来上大学了，小A和小B上了不同的大学，各自也有了各自的朋友圈，见面的时间少了很多，但小A和小B在网上也有经常联系什么鬼的。</p>\n<p>小A告诉我，她整整高中三年都没有喜欢过小B，直到后来上了大学，身边没有了他。</p>\n<p>小A每次都是断断续续的讲一些她的事情，她说，她也不知道为什么后来对小B的感情就变了。我说，但是感情这事不本来就是说不清楚的吗，更何况物是人非事事休，别人会变，你会变，感情也会变啊。</p>\n<p>就在前几天，小A突然给我发了一个截图，那个截图上面是她的之前写的一篇日记。</p>\n<p>她的日记是这样写的:</p>\n<p>你背对着山河一步步走向我，你脚踏着山河一步步走近我。</p>\n<p>每次听《祝星》都会带给我不一样的感动。</p>\n<p>我给你写过好多好多话，写了好多好多段子，写了好多好多文章，但是它们最终都只能存在我的手机里，不见天日。</p>\n<p>我写:你有时看群山，有时看绿水，有时看落日，有时看人群，却独独不看我。</p>\n<p>我写:在所有物是人非的景色里，我最喜欢你。</p>\n<p>我写:我来人间一趟，我要看看太阳，和我的心上人，一起走在街上。</p>\n<p>我写:我只能活一次，我要去活成我想要的样子。</p>\n<p>我写:我知道我们只能是好朋友，每次我在说服自己放弃吧的时候，总会有个小侥幸跳出来，它说:再等等吧。</p>\n<p>我问自己，喜欢一个人是什么样的？</p>\n<p>喜欢一个人，就是手心中明明只有两颗糖，却想给他五颗糖。看见一部喜欢的电影，想要分享给他，吃到自己喜欢的东西，便想着给他也带一份，看到一片美丽的风景，便会想着下次要带他过来一起看，甚至偶然听到一个段子，都想着讲给他听的时候，他会不会笑。</p>\n<p>经常看见有人说，真正的喜欢是，他想要香蕉就给他香蕉，而不是拼命给他塞苹果，可是，身在其中的人，只想把自己最喜欢的东西给对方，想把自己觉得好的东西都塞给他，不管他想不想要。</p>\n<p>到如今，我不是喜欢你，也不是不喜欢你，我对你想不出一句该说的话，不想看你，也不能看你，不想你走来，更不想你走开。</p>\n<p>我对你有些穷尽一生不可磨灭的柔情，却不知该如何给你，你是我卡在喉咙里仍未取的刺。</p>\n<p>我也不知道这篇日记会在我手机里存多久，应该不会多久了，因为热情终将会过去，而一切都会正常起来，只要生命的车轮还能转动，那我终有一天会走上正轨。</p>\n<p>小A她说，她每次都会告诉自己再等等吧，可是等着等着，再热的情也会等冷，或者说，等着等着，就发现何必再用糖纸去包裹一粒沙子？认命得越早越幸福。她说，我现在才知道放下、放弃原来是悄无声息的。</p>\n<p>今天，突然想起这个事情，想起这个问题，所以也没有经过她的同意，就把这个故事写出来，也不知道这样对不对。</p>\n<p>爱能让人是非不分，这可能就是它最可贵的地方。</p>\n<p>可是</p>\n<p>感情一旦变味儿了，不如被时光的洪流裹挟而去，抱在怀里，也酿不成酒，也醉不了人。</p>\n<p>每个人都有选择去喜欢或者放弃的权利，但是一旦选择了你就应该去承担它所带来的一切，如《陆垚知马俐》里有句台词：爱能让你骄傲如烈日，也能让你卑微入尘土。</p>\n<p>所以，现在的我，当我再次听到“放弃一个喜欢了很久的人，是一种什么感受？”的时候，有了一个新的答案：</p>\n<p>感情没有对错，错的是时间。</p>\n<p>放弃也未必不是好事。</p>\n<p>今天是2017.11.11</p>\n"},{"title":"网络分层模型和TCP/IP协议族——网络传输哪里难","date":"2019-02-03T16:00:00.000Z","description":"实习完回家后，准备来回顾一下网络基础的相关知识点。","_content":"\n\n# 网络分层模型和TCP/IP协议族（第一章）\n\n\n实习完回家后，准备来回顾一下网络基础的相关知识点。\n\n## 网络传输\n\n先举一个简单易懂的例子。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-179c4ccdaffd648a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n网络传输，我们可以比喻为2个人：甲 和 乙。然后他们之间需要传递一张图片picture。因为现在的图片还是挺大的，差不多几M的样子，这时候，就像是把一栋house传送过去。\n\n**如何传送呢？**\n\n+ 需要知道目标地址  `寻址和路由`\n+ 需要有一条到目标地址的路  `数据链路`\n+ 需要把大楼拆成包装箱能放下的大小  `分片`\n+ 需要将每一个部分进行编号  `序列码`\n+ 需要将包装箱装车  `封装`\n+ 车队运输时可能会堵车  `拥塞控制`\n+ 检查每一车是否完整  `错误检验和校正`\n+ 处理在运输路上丢失和损毁的部分  `数据重发`\n+ 拆成包装，将每一部分重新组装起来  `重组`\n\n\n### 协议\n\n接着上面说的，我们肯定需要一些 流程规范、运输指南的使用说明，比如：\n\n- 如何查找目的地\n- 如何选择运输路线\n- 如何拆分和重建大楼\n\n这些规范被称为**协议**\n\n> 协议需要注意这些：\n\n1. 协议有很多种\n2. 不同的协议处理不同层次的问题\n3. 发送方和接收方要使用相同的协议，才能还原数据\n\n\n","source":"_posts/网络1.md","raw":"---\ntitle: \"网络分层模型和TCP/IP协议族——网络传输哪里难\"\ndate: 2019-2-4\ncategories:\n  - 网络\ndescription: 实习完回家后，准备来回顾一下网络基础的相关知识点。\n---\n\n\n# 网络分层模型和TCP/IP协议族（第一章）\n\n\n实习完回家后，准备来回顾一下网络基础的相关知识点。\n\n## 网络传输\n\n先举一个简单易懂的例子。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-179c4ccdaffd648a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n网络传输，我们可以比喻为2个人：甲 和 乙。然后他们之间需要传递一张图片picture。因为现在的图片还是挺大的，差不多几M的样子，这时候，就像是把一栋house传送过去。\n\n**如何传送呢？**\n\n+ 需要知道目标地址  `寻址和路由`\n+ 需要有一条到目标地址的路  `数据链路`\n+ 需要把大楼拆成包装箱能放下的大小  `分片`\n+ 需要将每一个部分进行编号  `序列码`\n+ 需要将包装箱装车  `封装`\n+ 车队运输时可能会堵车  `拥塞控制`\n+ 检查每一车是否完整  `错误检验和校正`\n+ 处理在运输路上丢失和损毁的部分  `数据重发`\n+ 拆成包装，将每一部分重新组装起来  `重组`\n\n\n### 协议\n\n接着上面说的，我们肯定需要一些 流程规范、运输指南的使用说明，比如：\n\n- 如何查找目的地\n- 如何选择运输路线\n- 如何拆分和重建大楼\n\n这些规范被称为**协议**\n\n> 协议需要注意这些：\n\n1. 协议有很多种\n2. 不同的协议处理不同层次的问题\n3. 发送方和接收方要使用相同的协议，才能还原数据\n\n\n","slug":"网络1","published":1,"updated":"2019-03-02T02:25:13.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf39002s5096pqyzhx3m","content":"<h1 id=\"网络分层模型和TCP-IP协议族（第一章）\"><a href=\"#网络分层模型和TCP-IP协议族（第一章）\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议族（第一章）\"></a>网络分层模型和TCP/IP协议族（第一章）</h1><p>实习完回家后，准备来回顾一下网络基础的相关知识点。</p>\n<h2 id=\"网络传输\"><a href=\"#网络传输\" class=\"headerlink\" title=\"网络传输\"></a>网络传输</h2><p>先举一个简单易懂的例子。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-179c4ccdaffd648a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>网络传输，我们可以比喻为2个人：甲 和 乙。然后他们之间需要传递一张图片picture。因为现在的图片还是挺大的，差不多几M的样子，这时候，就像是把一栋house传送过去。</p>\n<p><strong>如何传送呢？</strong></p>\n<ul>\n<li>需要知道目标地址  <code>寻址和路由</code></li>\n<li>需要有一条到目标地址的路  <code>数据链路</code></li>\n<li>需要把大楼拆成包装箱能放下的大小  <code>分片</code></li>\n<li>需要将每一个部分进行编号  <code>序列码</code></li>\n<li>需要将包装箱装车  <code>封装</code></li>\n<li>车队运输时可能会堵车  <code>拥塞控制</code></li>\n<li>检查每一车是否完整  <code>错误检验和校正</code></li>\n<li>处理在运输路上丢失和损毁的部分  <code>数据重发</code></li>\n<li>拆成包装，将每一部分重新组装起来  <code>重组</code></li>\n</ul>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>接着上面说的，我们肯定需要一些 流程规范、运输指南的使用说明，比如：</p>\n<ul>\n<li>如何查找目的地</li>\n<li>如何选择运输路线</li>\n<li>如何拆分和重建大楼</li>\n</ul>\n<p>这些规范被称为<strong>协议</strong></p>\n<blockquote>\n<p>协议需要注意这些：</p>\n</blockquote>\n<ol>\n<li>协议有很多种</li>\n<li>不同的协议处理不同层次的问题</li>\n<li>发送方和接收方要使用相同的协议，才能还原数据</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络分层模型和TCP-IP协议族（第一章）\"><a href=\"#网络分层模型和TCP-IP协议族（第一章）\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议族（第一章）\"></a>网络分层模型和TCP/IP协议族（第一章）</h1><p>实习完回家后，准备来回顾一下网络基础的相关知识点。</p>\n<h2 id=\"网络传输\"><a href=\"#网络传输\" class=\"headerlink\" title=\"网络传输\"></a>网络传输</h2><p>先举一个简单易懂的例子。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-179c4ccdaffd648a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>网络传输，我们可以比喻为2个人：甲 和 乙。然后他们之间需要传递一张图片picture。因为现在的图片还是挺大的，差不多几M的样子，这时候，就像是把一栋house传送过去。</p>\n<p><strong>如何传送呢？</strong></p>\n<ul>\n<li>需要知道目标地址  <code>寻址和路由</code></li>\n<li>需要有一条到目标地址的路  <code>数据链路</code></li>\n<li>需要把大楼拆成包装箱能放下的大小  <code>分片</code></li>\n<li>需要将每一个部分进行编号  <code>序列码</code></li>\n<li>需要将包装箱装车  <code>封装</code></li>\n<li>车队运输时可能会堵车  <code>拥塞控制</code></li>\n<li>检查每一车是否完整  <code>错误检验和校正</code></li>\n<li>处理在运输路上丢失和损毁的部分  <code>数据重发</code></li>\n<li>拆成包装，将每一部分重新组装起来  <code>重组</code></li>\n</ul>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>接着上面说的，我们肯定需要一些 流程规范、运输指南的使用说明，比如：</p>\n<ul>\n<li>如何查找目的地</li>\n<li>如何选择运输路线</li>\n<li>如何拆分和重建大楼</li>\n</ul>\n<p>这些规范被称为<strong>协议</strong></p>\n<blockquote>\n<p>协议需要注意这些：</p>\n</blockquote>\n<ol>\n<li>协议有很多种</li>\n<li>不同的协议处理不同层次的问题</li>\n<li>发送方和接收方要使用相同的协议，才能还原数据</li>\n</ol>\n"},{"title":"网络分层模型和TCP/IP协议——协议的斗争","date":"2019-02-07T16:00:00.000Z","description":"网络分层模型和TCP/IP协议族（第二章）","_content":"\n# 网络分层模型和TCP/IP协议族（第二章）\n\n继续上一部分，讲讲网络协议的东西。\n\n之前主要分为2 part，一边是osi，一边是tcp/ip。可以形象地称为 协议斗争。\n\n# 什么是OSI？\n\nOSI就是有国际标准化组织ISO提出的**Open System Interconnection Reference Model（开放式系统互联通信参考模型）**\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-47e4ef9311c8093d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n他们主要提出了layer 7.\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-c74809ed3237eec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n媒介层主要是做比较基础的部分，主机层是基于媒介层做了一些上层建筑封装等...相对单一\n\n## 物理层\n\n物理层 -> （不一定可靠） 点对点的数据直链，传输的是bit比特。\n\n## 数据链路层\n\n一个**可靠**的点对点数据直链。\n\n+ 检错和纠错（CRC码）\n+ 多路访问\n+ 寻址\n\n传递的是frame 数据帧\n\n## 网络层\n\n- 在网络的各个节点之间进行地址分配、路由和（不一定可靠的）报文分发。\n- 路由\n- 拥塞控制\n\n传递的是package 数据包\n\n\n## 传输层\n\n被称为4层 / L4\n\n+ 在网络的各个节点之间**可靠地**分发数据包\n+ 所有传输遗留问题\n+ 复用\n+ 流量\n+ 可靠\n\n传输的是segment 数据段\n\n#### 在传输层之上的有会话层和表示层，但是用的不太多\n\n## 应用层\n\n称为7层 / L7\n\n网络进程到应用程序。\n针对特定应用，规定各层协议、时序、表示等，进行封装。\n在端系统中用软件来实现，比如**http**等。\n\n# TCP/IP\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ab7ae1116fc0d594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n它是怎么工作的？\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ecd09704d48dd81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nARP也就是通过ip地址来反查以太网mac地址。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-6309e2e40206ca1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  \n我们来看看它到底包装了哪些？\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-7fc2b67054357648.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 我们再来看看OSI的渊源\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-dd87b76b4d256e22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 为什么失败了？\n\n- 进程缓慢\n- 过于复杂\n- 收费\n\n# TCP/IP的渊源\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-7cf9a51a492afbe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后还是TCP/IP赢了\n\n","source":"_posts/网络2.md","raw":"---\ntitle: \"网络分层模型和TCP/IP协议——协议的斗争\"\ndate: 2019-2-8\ncategories:\n  - 网络\ndescription: 网络分层模型和TCP/IP协议族（第二章）\n---\n\n# 网络分层模型和TCP/IP协议族（第二章）\n\n继续上一部分，讲讲网络协议的东西。\n\n之前主要分为2 part，一边是osi，一边是tcp/ip。可以形象地称为 协议斗争。\n\n# 什么是OSI？\n\nOSI就是有国际标准化组织ISO提出的**Open System Interconnection Reference Model（开放式系统互联通信参考模型）**\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-47e4ef9311c8093d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n他们主要提出了layer 7.\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-c74809ed3237eec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n媒介层主要是做比较基础的部分，主机层是基于媒介层做了一些上层建筑封装等...相对单一\n\n## 物理层\n\n物理层 -> （不一定可靠） 点对点的数据直链，传输的是bit比特。\n\n## 数据链路层\n\n一个**可靠**的点对点数据直链。\n\n+ 检错和纠错（CRC码）\n+ 多路访问\n+ 寻址\n\n传递的是frame 数据帧\n\n## 网络层\n\n- 在网络的各个节点之间进行地址分配、路由和（不一定可靠的）报文分发。\n- 路由\n- 拥塞控制\n\n传递的是package 数据包\n\n\n## 传输层\n\n被称为4层 / L4\n\n+ 在网络的各个节点之间**可靠地**分发数据包\n+ 所有传输遗留问题\n+ 复用\n+ 流量\n+ 可靠\n\n传输的是segment 数据段\n\n#### 在传输层之上的有会话层和表示层，但是用的不太多\n\n## 应用层\n\n称为7层 / L7\n\n网络进程到应用程序。\n针对特定应用，规定各层协议、时序、表示等，进行封装。\n在端系统中用软件来实现，比如**http**等。\n\n# TCP/IP\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ab7ae1116fc0d594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n它是怎么工作的？\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ecd09704d48dd81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nARP也就是通过ip地址来反查以太网mac地址。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-6309e2e40206ca1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  \n我们来看看它到底包装了哪些？\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-7fc2b67054357648.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 我们再来看看OSI的渊源\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-dd87b76b4d256e22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 为什么失败了？\n\n- 进程缓慢\n- 过于复杂\n- 收费\n\n# TCP/IP的渊源\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-7cf9a51a492afbe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后还是TCP/IP赢了\n\n","slug":"网络2","published":1,"updated":"2019-03-02T02:25:13.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf3d002u5096qjnlu6tr","content":"<h1 id=\"网络分层模型和TCP-IP协议族（第二章）\"><a href=\"#网络分层模型和TCP-IP协议族（第二章）\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议族（第二章）\"></a>网络分层模型和TCP/IP协议族（第二章）</h1><p>继续上一部分，讲讲网络协议的东西。</p>\n<p>之前主要分为2 part，一边是osi，一边是tcp/ip。可以形象地称为 协议斗争。</p>\n<h1 id=\"什么是OSI？\"><a href=\"#什么是OSI？\" class=\"headerlink\" title=\"什么是OSI？\"></a>什么是OSI？</h1><p>OSI就是有国际标准化组织ISO提出的<strong>Open System Interconnection Reference Model（开放式系统互联通信参考模型）</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-47e4ef9311c8093d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>他们主要提出了layer 7.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-c74809ed3237eec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>媒介层主要是做比较基础的部分，主机层是基于媒介层做了一些上层建筑封装等…相对单一</p>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>物理层 -&gt; （不一定可靠） 点对点的数据直链，传输的是bit比特。</p>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>一个<strong>可靠</strong>的点对点数据直链。</p>\n<ul>\n<li>检错和纠错（CRC码）</li>\n<li>多路访问</li>\n<li>寻址</li>\n</ul>\n<p>传递的是frame 数据帧</p>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><ul>\n<li>在网络的各个节点之间进行地址分配、路由和（不一定可靠的）报文分发。</li>\n<li>路由</li>\n<li>拥塞控制</li>\n</ul>\n<p>传递的是package 数据包</p>\n<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2><p>被称为4层 / L4</p>\n<ul>\n<li>在网络的各个节点之间<strong>可靠地</strong>分发数据包</li>\n<li>所有传输遗留问题</li>\n<li>复用</li>\n<li>流量</li>\n<li>可靠</li>\n</ul>\n<p>传输的是segment 数据段</p>\n<h4 id=\"在传输层之上的有会话层和表示层，但是用的不太多\"><a href=\"#在传输层之上的有会话层和表示层，但是用的不太多\" class=\"headerlink\" title=\"在传输层之上的有会话层和表示层，但是用的不太多\"></a>在传输层之上的有会话层和表示层，但是用的不太多</h4><h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>称为7层 / L7</p>\n<p>网络进程到应用程序。<br>针对特定应用，规定各层协议、时序、表示等，进行封装。<br>在端系统中用软件来实现，比如<strong>http</strong>等。</p>\n<h1 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP/IP\"></a>TCP/IP</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ab7ae1116fc0d594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>它是怎么工作的？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ecd09704d48dd81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>ARP也就是通过ip地址来反查以太网mac地址。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-6309e2e40206ca1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>我们来看看它到底包装了哪些？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-7fc2b67054357648.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h1 id=\"我们再来看看OSI的渊源\"><a href=\"#我们再来看看OSI的渊源\" class=\"headerlink\" title=\"我们再来看看OSI的渊源\"></a>我们再来看看OSI的渊源</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-dd87b76b4d256e22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"为什么失败了？\"><a href=\"#为什么失败了？\" class=\"headerlink\" title=\"为什么失败了？\"></a>为什么失败了？</h2><ul>\n<li>进程缓慢</li>\n<li>过于复杂</li>\n<li>收费</li>\n</ul>\n<h1 id=\"TCP-IP的渊源\"><a href=\"#TCP-IP的渊源\" class=\"headerlink\" title=\"TCP/IP的渊源\"></a>TCP/IP的渊源</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-7cf9a51a492afbe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>最后还是TCP/IP赢了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络分层模型和TCP-IP协议族（第二章）\"><a href=\"#网络分层模型和TCP-IP协议族（第二章）\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议族（第二章）\"></a>网络分层模型和TCP/IP协议族（第二章）</h1><p>继续上一部分，讲讲网络协议的东西。</p>\n<p>之前主要分为2 part，一边是osi，一边是tcp/ip。可以形象地称为 协议斗争。</p>\n<h1 id=\"什么是OSI？\"><a href=\"#什么是OSI？\" class=\"headerlink\" title=\"什么是OSI？\"></a>什么是OSI？</h1><p>OSI就是有国际标准化组织ISO提出的<strong>Open System Interconnection Reference Model（开放式系统互联通信参考模型）</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-47e4ef9311c8093d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>他们主要提出了layer 7.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-c74809ed3237eec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>媒介层主要是做比较基础的部分，主机层是基于媒介层做了一些上层建筑封装等…相对单一</p>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>物理层 -&gt; （不一定可靠） 点对点的数据直链，传输的是bit比特。</p>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>一个<strong>可靠</strong>的点对点数据直链。</p>\n<ul>\n<li>检错和纠错（CRC码）</li>\n<li>多路访问</li>\n<li>寻址</li>\n</ul>\n<p>传递的是frame 数据帧</p>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><ul>\n<li>在网络的各个节点之间进行地址分配、路由和（不一定可靠的）报文分发。</li>\n<li>路由</li>\n<li>拥塞控制</li>\n</ul>\n<p>传递的是package 数据包</p>\n<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2><p>被称为4层 / L4</p>\n<ul>\n<li>在网络的各个节点之间<strong>可靠地</strong>分发数据包</li>\n<li>所有传输遗留问题</li>\n<li>复用</li>\n<li>流量</li>\n<li>可靠</li>\n</ul>\n<p>传输的是segment 数据段</p>\n<h4 id=\"在传输层之上的有会话层和表示层，但是用的不太多\"><a href=\"#在传输层之上的有会话层和表示层，但是用的不太多\" class=\"headerlink\" title=\"在传输层之上的有会话层和表示层，但是用的不太多\"></a>在传输层之上的有会话层和表示层，但是用的不太多</h4><h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>称为7层 / L7</p>\n<p>网络进程到应用程序。<br>针对特定应用，规定各层协议、时序、表示等，进行封装。<br>在端系统中用软件来实现，比如<strong>http</strong>等。</p>\n<h1 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP/IP\"></a>TCP/IP</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ab7ae1116fc0d594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>它是怎么工作的？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ecd09704d48dd81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>ARP也就是通过ip地址来反查以太网mac地址。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-6309e2e40206ca1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>我们来看看它到底包装了哪些？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-7fc2b67054357648.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h1 id=\"我们再来看看OSI的渊源\"><a href=\"#我们再来看看OSI的渊源\" class=\"headerlink\" title=\"我们再来看看OSI的渊源\"></a>我们再来看看OSI的渊源</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-dd87b76b4d256e22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"为什么失败了？\"><a href=\"#为什么失败了？\" class=\"headerlink\" title=\"为什么失败了？\"></a>为什么失败了？</h2><ul>\n<li>进程缓慢</li>\n<li>过于复杂</li>\n<li>收费</li>\n</ul>\n<h1 id=\"TCP-IP的渊源\"><a href=\"#TCP-IP的渊源\" class=\"headerlink\" title=\"TCP/IP的渊源\"></a>TCP/IP的渊源</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-7cf9a51a492afbe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>最后还是TCP/IP赢了</p>\n"},{"title":"网络分层模型和TCP/IP协议——以太网","date":"2019-02-09T16:00:00.000Z","description":"网络分层模型和TCP/IP协议——以太网","_content":"\n# 网络分层模型和TCP/IP协议——以太网\n\n以太网其实讲的就是：**怎么传**\nIP协议讲的就是：**解决往哪里传的问题**\nUDP和TCP：**解决可靠性的问题**\n\n## 怎么传输的？\n\n最初是通过同轴电缆。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-326cedfc950775d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后发现了一种算法来解决这个问题。\n\n`CSMA/CD也就是载波监听多路访问/冲突检测`\n\n我用大白话来讲解一下，大概就是这样的：\n\n一条同轴电缆上，串联着许多台计算机，如果说computerA想**发送**数据（data），那么它会这样做：\n1. 先检查一下这个网络有没有人在使用\n  - 如果有人使用，它就不传了，避免冲突\n- 没人使用，那就可以传数据。\n2. 如果说，存在这么一个情况：2个计算器同时检测到网络没人使用，然后他们准备同时发数据，这个时候会出现什么事呢？\n- computer在发送数据前，它会检查电压，一旦电压超过指定值，它就会停止传输数据，通过物理知识我们可以知道，串联是电流处处相等，电压=各处相加。\n- 一旦检测到电压超值，那么computer会stop send data，然后等待一段时间，再继续传值，这个等待的时间是随机产生的。\n\n> 最后，梅特卡夫把这套系统名为以太网\n\n## 以太网发展过程\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f0b14a36825a9622.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 网卡和mac地址\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-6139a4a792ed653b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 二层交换机\n\n交换机是根据mac地址来转发数据的\n\n## 以太网数据帧格式\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-4d2a95284fb71234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里提到的FCS帧检验序列，也就是用于检验是否丢帧。","source":"_posts/网络3.md","raw":"---\ntitle: \"网络分层模型和TCP/IP协议——以太网\"\ndate: 2019-2-10\ncategories:\n  - 网络\ndescription: 网络分层模型和TCP/IP协议——以太网\n---\n\n# 网络分层模型和TCP/IP协议——以太网\n\n以太网其实讲的就是：**怎么传**\nIP协议讲的就是：**解决往哪里传的问题**\nUDP和TCP：**解决可靠性的问题**\n\n## 怎么传输的？\n\n最初是通过同轴电缆。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-326cedfc950775d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后发现了一种算法来解决这个问题。\n\n`CSMA/CD也就是载波监听多路访问/冲突检测`\n\n我用大白话来讲解一下，大概就是这样的：\n\n一条同轴电缆上，串联着许多台计算机，如果说computerA想**发送**数据（data），那么它会这样做：\n1. 先检查一下这个网络有没有人在使用\n  - 如果有人使用，它就不传了，避免冲突\n- 没人使用，那就可以传数据。\n2. 如果说，存在这么一个情况：2个计算器同时检测到网络没人使用，然后他们准备同时发数据，这个时候会出现什么事呢？\n- computer在发送数据前，它会检查电压，一旦电压超过指定值，它就会停止传输数据，通过物理知识我们可以知道，串联是电流处处相等，电压=各处相加。\n- 一旦检测到电压超值，那么computer会stop send data，然后等待一段时间，再继续传值，这个等待的时间是随机产生的。\n\n> 最后，梅特卡夫把这套系统名为以太网\n\n## 以太网发展过程\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-f0b14a36825a9622.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 网卡和mac地址\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-6139a4a792ed653b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 二层交换机\n\n交换机是根据mac地址来转发数据的\n\n## 以太网数据帧格式\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-4d2a95284fb71234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里提到的FCS帧检验序列，也就是用于检验是否丢帧。","slug":"网络3","published":1,"updated":"2019-03-02T02:25:13.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf3j002z5096f9r315ld","content":"<h1 id=\"网络分层模型和TCP-IP协议——以太网\"><a href=\"#网络分层模型和TCP-IP协议——以太网\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议——以太网\"></a>网络分层模型和TCP/IP协议——以太网</h1><p>以太网其实讲的就是：<strong>怎么传</strong><br>IP协议讲的就是：<strong>解决往哪里传的问题</strong><br>UDP和TCP：<strong>解决可靠性的问题</strong></p>\n<h2 id=\"怎么传输的？\"><a href=\"#怎么传输的？\" class=\"headerlink\" title=\"怎么传输的？\"></a>怎么传输的？</h2><p>最初是通过同轴电缆。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-326cedfc950775d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>然后发现了一种算法来解决这个问题。</p>\n<p><code>CSMA/CD也就是载波监听多路访问/冲突检测</code></p>\n<p>我用大白话来讲解一下，大概就是这样的：</p>\n<p>一条同轴电缆上，串联着许多台计算机，如果说computerA想<strong>发送</strong>数据（data），那么它会这样做：</p>\n<ol>\n<li>先检查一下这个网络有没有人在使用<ul>\n<li>如果有人使用，它就不传了，避免冲突</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>没人使用，那就可以传数据。</li>\n</ul>\n<ol start=\"2\">\n<li>如果说，存在这么一个情况：2个计算器同时检测到网络没人使用，然后他们准备同时发数据，这个时候会出现什么事呢？</li>\n</ol>\n<ul>\n<li>computer在发送数据前，它会检查电压，一旦电压超过指定值，它就会停止传输数据，通过物理知识我们可以知道，串联是电流处处相等，电压=各处相加。</li>\n<li>一旦检测到电压超值，那么computer会stop send data，然后等待一段时间，再继续传值，这个等待的时间是随机产生的。</li>\n</ul>\n<blockquote>\n<p>最后，梅特卡夫把这套系统名为以太网</p>\n</blockquote>\n<h2 id=\"以太网发展过程\"><a href=\"#以太网发展过程\" class=\"headerlink\" title=\"以太网发展过程\"></a>以太网发展过程</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f0b14a36825a9622.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"网卡和mac地址\"><a href=\"#网卡和mac地址\" class=\"headerlink\" title=\"网卡和mac地址\"></a>网卡和mac地址</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-6139a4a792ed653b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"二层交换机\"><a href=\"#二层交换机\" class=\"headerlink\" title=\"二层交换机\"></a>二层交换机</h2><p>交换机是根据mac地址来转发数据的</p>\n<h2 id=\"以太网数据帧格式\"><a href=\"#以太网数据帧格式\" class=\"headerlink\" title=\"以太网数据帧格式\"></a>以太网数据帧格式</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-4d2a95284fb71234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这里提到的FCS帧检验序列，也就是用于检验是否丢帧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络分层模型和TCP-IP协议——以太网\"><a href=\"#网络分层模型和TCP-IP协议——以太网\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议——以太网\"></a>网络分层模型和TCP/IP协议——以太网</h1><p>以太网其实讲的就是：<strong>怎么传</strong><br>IP协议讲的就是：<strong>解决往哪里传的问题</strong><br>UDP和TCP：<strong>解决可靠性的问题</strong></p>\n<h2 id=\"怎么传输的？\"><a href=\"#怎么传输的？\" class=\"headerlink\" title=\"怎么传输的？\"></a>怎么传输的？</h2><p>最初是通过同轴电缆。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-326cedfc950775d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>然后发现了一种算法来解决这个问题。</p>\n<p><code>CSMA/CD也就是载波监听多路访问/冲突检测</code></p>\n<p>我用大白话来讲解一下，大概就是这样的：</p>\n<p>一条同轴电缆上，串联着许多台计算机，如果说computerA想<strong>发送</strong>数据（data），那么它会这样做：</p>\n<ol>\n<li>先检查一下这个网络有没有人在使用<ul>\n<li>如果有人使用，它就不传了，避免冲突</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>没人使用，那就可以传数据。</li>\n</ul>\n<ol start=\"2\">\n<li>如果说，存在这么一个情况：2个计算器同时检测到网络没人使用，然后他们准备同时发数据，这个时候会出现什么事呢？</li>\n</ol>\n<ul>\n<li>computer在发送数据前，它会检查电压，一旦电压超过指定值，它就会停止传输数据，通过物理知识我们可以知道，串联是电流处处相等，电压=各处相加。</li>\n<li>一旦检测到电压超值，那么computer会stop send data，然后等待一段时间，再继续传值，这个等待的时间是随机产生的。</li>\n</ul>\n<blockquote>\n<p>最后，梅特卡夫把这套系统名为以太网</p>\n</blockquote>\n<h2 id=\"以太网发展过程\"><a href=\"#以太网发展过程\" class=\"headerlink\" title=\"以太网发展过程\"></a>以太网发展过程</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-f0b14a36825a9622.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"网卡和mac地址\"><a href=\"#网卡和mac地址\" class=\"headerlink\" title=\"网卡和mac地址\"></a>网卡和mac地址</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-6139a4a792ed653b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"二层交换机\"><a href=\"#二层交换机\" class=\"headerlink\" title=\"二层交换机\"></a>二层交换机</h2><p>交换机是根据mac地址来转发数据的</p>\n<h2 id=\"以太网数据帧格式\"><a href=\"#以太网数据帧格式\" class=\"headerlink\" title=\"以太网数据帧格式\"></a>以太网数据帧格式</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-4d2a95284fb71234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这里提到的FCS帧检验序列，也就是用于检验是否丢帧。</p>\n"},{"title":"网络分层模型和TCP/IP协议族 ——IP协议","date":"2019-02-10T16:00:00.000Z","description":"这一篇文章主要记录IP协议相关内容。","_content":"\n\n# 网络分层模型和TCP/IP协议族 ——IP协议\n\n这一篇文章主要记录IP协议相关内容。\n\n## IP协议是干什么的？\n\n寻址 + 路由选择\n\n### 寻址中的址是什么？\n\n首先，它不是mac地址，而是ip地址，那么ip地址又是个什么东西呢？\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ad0d0205a7ce626d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我在这里，举一个简单的例子：\n![](https://upload-images.jianshu.io/upload_images/3378252-50fc5fff63137f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n因为二进制数写起来和读起来都比较费劲，所以我们一般都换算为十进制。\n\n其对应的子网掩码是这样的\n\n11111111 11111111 11111111 00000000\n\n转换为十进制，也就是：\n`255 255 255 0`\n\n接着我们来依次对应下，这张图可以清楚的表示：\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-e4fff26d00473eb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**这里还提到了一个有意义的简写**\n\n如果子网掩码的前24位都是1的话，那么我们可以这样简写：**/24** \n\n接下来补充一下，常见的ip地址列表。\n\n## ip地址列表\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ffb2f02d50ed5d2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-d14090b3cb4e3e86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里的127.0.0.1 环回也就是 本机地址。\n\n## 寻址+路由\n\nip协议中的路由分配以及寻址是怎么个过程呢？接下来慢慢分析。\n\n### 同一个内网传递数据 \n\n给出一个case：\n\n> 同一个网段下，computerA想给computerB发送数据。\n\n步骤：\n\n-  首先，对应的是应用层\n-   然后，把它扔进了TCP协议里，给它加上了端口，比如这里的80\n- 再然后，扔进IP协议，包装上了ip地址\n- 接着，扔进以太网，包装mac地址\n`注意：在上一篇以太网中已经提到，如何通过ip地址找到**发送目标的**的mac地址，这里不再赘述`\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-b9db63d54aa6b550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-3e37a5b5b4e11142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-764067ffd69f59b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样打包完成后，我们就可以顺畅的把数据发出去啦~\n\n### 网络间的数据传送 \n\n说完了内网之间的数据传送，接下来我们说说非内网间，它是怎么进行数据传送的。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-91d9ee2d23e49bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> computerA（192.168.0.1）准备给不同网段的computerB（172.16.0.1）发送数据\n\n步骤：\n- 先发给网关，具体同上\n- 然后发给路由器A\n- 路由器上都有个路由表\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-4bbf4cfa761e2886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- 查看是否直连\n- 同上进行发送\n\n## IP分片和重组\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-65c92d5292b0619b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**路径发现MTU**\n我觉得这个机制还是挺有意思，简单来说，我们在发送数据帧的时候，如果它的大小超过网络MTU，那么它会停止发送，并自动调整路径，再重新发送。这个还是挺智能的。\n\n## IP相关协议\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-bfa62392c194c836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实常用的也就是dns，其他的做个了解就可以了。\n\n\n\n\n","source":"_posts/网络4.md","raw":"---\ntitle: \"网络分层模型和TCP/IP协议族 ——IP协议\"\ndate: 2019-2-11\ncategories:\n  - 网络\ndescription: 这一篇文章主要记录IP协议相关内容。\n---\n\n\n# 网络分层模型和TCP/IP协议族 ——IP协议\n\n这一篇文章主要记录IP协议相关内容。\n\n## IP协议是干什么的？\n\n寻址 + 路由选择\n\n### 寻址中的址是什么？\n\n首先，它不是mac地址，而是ip地址，那么ip地址又是个什么东西呢？\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ad0d0205a7ce626d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我在这里，举一个简单的例子：\n![](https://upload-images.jianshu.io/upload_images/3378252-50fc5fff63137f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n因为二进制数写起来和读起来都比较费劲，所以我们一般都换算为十进制。\n\n其对应的子网掩码是这样的\n\n11111111 11111111 11111111 00000000\n\n转换为十进制，也就是：\n`255 255 255 0`\n\n接着我们来依次对应下，这张图可以清楚的表示：\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-e4fff26d00473eb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**这里还提到了一个有意义的简写**\n\n如果子网掩码的前24位都是1的话，那么我们可以这样简写：**/24** \n\n接下来补充一下，常见的ip地址列表。\n\n## ip地址列表\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-ffb2f02d50ed5d2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-d14090b3cb4e3e86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里的127.0.0.1 环回也就是 本机地址。\n\n## 寻址+路由\n\nip协议中的路由分配以及寻址是怎么个过程呢？接下来慢慢分析。\n\n### 同一个内网传递数据 \n\n给出一个case：\n\n> 同一个网段下，computerA想给computerB发送数据。\n\n步骤：\n\n-  首先，对应的是应用层\n-   然后，把它扔进了TCP协议里，给它加上了端口，比如这里的80\n- 再然后，扔进IP协议，包装上了ip地址\n- 接着，扔进以太网，包装mac地址\n`注意：在上一篇以太网中已经提到，如何通过ip地址找到**发送目标的**的mac地址，这里不再赘述`\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-b9db63d54aa6b550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-3e37a5b5b4e11142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-764067ffd69f59b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样打包完成后，我们就可以顺畅的把数据发出去啦~\n\n### 网络间的数据传送 \n\n说完了内网之间的数据传送，接下来我们说说非内网间，它是怎么进行数据传送的。\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-91d9ee2d23e49bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> computerA（192.168.0.1）准备给不同网段的computerB（172.16.0.1）发送数据\n\n步骤：\n- 先发给网关，具体同上\n- 然后发给路由器A\n- 路由器上都有个路由表\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-4bbf4cfa761e2886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- 查看是否直连\n- 同上进行发送\n\n## IP分片和重组\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-65c92d5292b0619b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**路径发现MTU**\n我觉得这个机制还是挺有意思，简单来说，我们在发送数据帧的时候，如果它的大小超过网络MTU，那么它会停止发送，并自动调整路径，再重新发送。这个还是挺智能的。\n\n## IP相关协议\n\n![image.png](https://upload-images.jianshu.io/upload_images/3378252-bfa62392c194c836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实常用的也就是dns，其他的做个了解就可以了。\n\n\n\n\n","slug":"网络4","published":1,"updated":"2019-03-02T02:25:13.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvaywf3r00305096v5jtvkcq","content":"<h1 id=\"网络分层模型和TCP-IP协议族-——IP协议\"><a href=\"#网络分层模型和TCP-IP协议族-——IP协议\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议族 ——IP协议\"></a>网络分层模型和TCP/IP协议族 ——IP协议</h1><p>这一篇文章主要记录IP协议相关内容。</p>\n<h2 id=\"IP协议是干什么的？\"><a href=\"#IP协议是干什么的？\" class=\"headerlink\" title=\"IP协议是干什么的？\"></a>IP协议是干什么的？</h2><p>寻址 + 路由选择</p>\n<h3 id=\"寻址中的址是什么？\"><a href=\"#寻址中的址是什么？\" class=\"headerlink\" title=\"寻址中的址是什么？\"></a>寻址中的址是什么？</h3><p>首先，它不是mac地址，而是ip地址，那么ip地址又是个什么东西呢？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ad0d0205a7ce626d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>我在这里，举一个简单的例子：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-50fc5fff63137f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>因为二进制数写起来和读起来都比较费劲，所以我们一般都换算为十进制。</p>\n<p>其对应的子网掩码是这样的</p>\n<p>11111111 11111111 11111111 00000000</p>\n<p>转换为十进制，也就是：<br><code>255 255 255 0</code></p>\n<p>接着我们来依次对应下，这张图可以清楚的表示：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-e4fff26d00473eb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>这里还提到了一个有意义的简写</strong></p>\n<p>如果子网掩码的前24位都是1的话，那么我们可以这样简写：<strong>/24</strong> </p>\n<p>接下来补充一下，常见的ip地址列表。</p>\n<h2 id=\"ip地址列表\"><a href=\"#ip地址列表\" class=\"headerlink\" title=\"ip地址列表\"></a>ip地址列表</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ffb2f02d50ed5d2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-d14090b3cb4e3e86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这里的127.0.0.1 环回也就是 本机地址。</p>\n<h2 id=\"寻址-路由\"><a href=\"#寻址-路由\" class=\"headerlink\" title=\"寻址+路由\"></a>寻址+路由</h2><p>ip协议中的路由分配以及寻址是怎么个过程呢？接下来慢慢分析。</p>\n<h3 id=\"同一个内网传递数据\"><a href=\"#同一个内网传递数据\" class=\"headerlink\" title=\"同一个内网传递数据\"></a>同一个内网传递数据</h3><p>给出一个case：</p>\n<blockquote>\n<p>同一个网段下，computerA想给computerB发送数据。</p>\n</blockquote>\n<p>步骤：</p>\n<ul>\n<li>首先，对应的是应用层</li>\n<li>然后，把它扔进了TCP协议里，给它加上了端口，比如这里的80</li>\n<li>再然后，扔进IP协议，包装上了ip地址</li>\n<li>接着，扔进以太网，包装mac地址<br><code>注意：在上一篇以太网中已经提到，如何通过ip地址找到**发送目标的**的mac地址，这里不再赘述</code></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-b9db63d54aa6b550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-3e37a5b5b4e11142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-764067ffd69f59b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这样打包完成后，我们就可以顺畅的把数据发出去啦~</p>\n<h3 id=\"网络间的数据传送\"><a href=\"#网络间的数据传送\" class=\"headerlink\" title=\"网络间的数据传送\"></a>网络间的数据传送</h3><p>说完了内网之间的数据传送，接下来我们说说非内网间，它是怎么进行数据传送的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-91d9ee2d23e49bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<blockquote>\n<p>computerA（192.168.0.1）准备给不同网段的computerB（172.16.0.1）发送数据</p>\n</blockquote>\n<p>步骤：</p>\n<ul>\n<li>先发给网关，具体同上</li>\n<li>然后发给路由器A</li>\n<li>路由器上都有个路由表<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-4bbf4cfa761e2886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n<li>查看是否直连</li>\n<li>同上进行发送</li>\n</ul>\n<h2 id=\"IP分片和重组\"><a href=\"#IP分片和重组\" class=\"headerlink\" title=\"IP分片和重组\"></a>IP分片和重组</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-65c92d5292b0619b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>路径发现MTU</strong><br>我觉得这个机制还是挺有意思，简单来说，我们在发送数据帧的时候，如果它的大小超过网络MTU，那么它会停止发送，并自动调整路径，再重新发送。这个还是挺智能的。</p>\n<h2 id=\"IP相关协议\"><a href=\"#IP相关协议\" class=\"headerlink\" title=\"IP相关协议\"></a>IP相关协议</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-bfa62392c194c836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其实常用的也就是dns，其他的做个了解就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络分层模型和TCP-IP协议族-——IP协议\"><a href=\"#网络分层模型和TCP-IP协议族-——IP协议\" class=\"headerlink\" title=\"网络分层模型和TCP/IP协议族 ——IP协议\"></a>网络分层模型和TCP/IP协议族 ——IP协议</h1><p>这一篇文章主要记录IP协议相关内容。</p>\n<h2 id=\"IP协议是干什么的？\"><a href=\"#IP协议是干什么的？\" class=\"headerlink\" title=\"IP协议是干什么的？\"></a>IP协议是干什么的？</h2><p>寻址 + 路由选择</p>\n<h3 id=\"寻址中的址是什么？\"><a href=\"#寻址中的址是什么？\" class=\"headerlink\" title=\"寻址中的址是什么？\"></a>寻址中的址是什么？</h3><p>首先，它不是mac地址，而是ip地址，那么ip地址又是个什么东西呢？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ad0d0205a7ce626d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>我在这里，举一个简单的例子：<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-50fc5fff63137f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>因为二进制数写起来和读起来都比较费劲，所以我们一般都换算为十进制。</p>\n<p>其对应的子网掩码是这样的</p>\n<p>11111111 11111111 11111111 00000000</p>\n<p>转换为十进制，也就是：<br><code>255 255 255 0</code></p>\n<p>接着我们来依次对应下，这张图可以清楚的表示：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-e4fff26d00473eb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>这里还提到了一个有意义的简写</strong></p>\n<p>如果子网掩码的前24位都是1的话，那么我们可以这样简写：<strong>/24</strong> </p>\n<p>接下来补充一下，常见的ip地址列表。</p>\n<h2 id=\"ip地址列表\"><a href=\"#ip地址列表\" class=\"headerlink\" title=\"ip地址列表\"></a>ip地址列表</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-ffb2f02d50ed5d2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-d14090b3cb4e3e86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这里的127.0.0.1 环回也就是 本机地址。</p>\n<h2 id=\"寻址-路由\"><a href=\"#寻址-路由\" class=\"headerlink\" title=\"寻址+路由\"></a>寻址+路由</h2><p>ip协议中的路由分配以及寻址是怎么个过程呢？接下来慢慢分析。</p>\n<h3 id=\"同一个内网传递数据\"><a href=\"#同一个内网传递数据\" class=\"headerlink\" title=\"同一个内网传递数据\"></a>同一个内网传递数据</h3><p>给出一个case：</p>\n<blockquote>\n<p>同一个网段下，computerA想给computerB发送数据。</p>\n</blockquote>\n<p>步骤：</p>\n<ul>\n<li>首先，对应的是应用层</li>\n<li>然后，把它扔进了TCP协议里，给它加上了端口，比如这里的80</li>\n<li>再然后，扔进IP协议，包装上了ip地址</li>\n<li>接着，扔进以太网，包装mac地址<br><code>注意：在上一篇以太网中已经提到，如何通过ip地址找到**发送目标的**的mac地址，这里不再赘述</code></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-b9db63d54aa6b550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-3e37a5b5b4e11142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-764067ffd69f59b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这样打包完成后，我们就可以顺畅的把数据发出去啦~</p>\n<h3 id=\"网络间的数据传送\"><a href=\"#网络间的数据传送\" class=\"headerlink\" title=\"网络间的数据传送\"></a>网络间的数据传送</h3><p>说完了内网之间的数据传送，接下来我们说说非内网间，它是怎么进行数据传送的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-91d9ee2d23e49bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<blockquote>\n<p>computerA（192.168.0.1）准备给不同网段的computerB（172.16.0.1）发送数据</p>\n</blockquote>\n<p>步骤：</p>\n<ul>\n<li>先发给网关，具体同上</li>\n<li>然后发给路由器A</li>\n<li>路由器上都有个路由表<br><img src=\"https://upload-images.jianshu.io/upload_images/3378252-4bbf4cfa761e2886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n<li>查看是否直连</li>\n<li>同上进行发送</li>\n</ul>\n<h2 id=\"IP分片和重组\"><a href=\"#IP分片和重组\" class=\"headerlink\" title=\"IP分片和重组\"></a>IP分片和重组</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-65c92d5292b0619b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>路径发现MTU</strong><br>我觉得这个机制还是挺有意思，简单来说，我们在发送数据帧的时候，如果它的大小超过网络MTU，那么它会停止发送，并自动调整路径，再重新发送。这个还是挺智能的。</p>\n<h2 id=\"IP相关协议\"><a href=\"#IP相关协议\" class=\"headerlink\" title=\"IP相关协议\"></a>IP相关协议</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3378252-bfa62392c194c836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其实常用的也就是dns，其他的做个了解就可以了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvaywev4000050969w9nev67","category_id":"cjvaywew300045096w0jpipxu","_id":"cjvaywex4000b50968ic546q8"},{"post_id":"cjvaywewu00095096syjnnltb","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvaywexv000f50961ruclfz4"},{"post_id":"cjvaywevo00025096bh0pml35","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvaywey2000i5096tudu34jy"},{"post_id":"cjvaywewb00055096l5wfvo48","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvayweya000l5096ymejy6tf"},{"post_id":"cjvaywewf000650960ch1j43p","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvayweyk000p50967d39mctk"},{"post_id":"cjvaywewh00075096t3rjwskp","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvayweys000s50963yutf1xs"},{"post_id":"cjvayweyq000r50961qfqhmlh","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvaywez5000y5096285x9xrs"},{"post_id":"cjvaywexg000d50966u121k3g","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvaywez900115096k0y9a3l1"},{"post_id":"cjvaywexg000d50966u121k3g","category_id":"cjvayweyt000t5096wkstifeg","_id":"cjvaywezf00135096ic7f8gf0"},{"post_id":"cjvaywexr000e5096bg6b7568","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvaywezl00155096s55661s1"},{"post_id":"cjvaywexr000e5096bg6b7568","category_id":"cjvayweyt000t5096wkstifeg","_id":"cjvaywezp0018509628mqevkm"},{"post_id":"cjvaywexy000h5096i4ermdpv","category_id":"cjvaywez800105096l2gnoyji","_id":"cjvaywf00001b5096ocx8g7j6"},{"post_id":"cjvaywey6000j5096sisiq1a4","category_id":"cjvaywezo00175096rgj6w19w","_id":"cjvaywf07001f50964t7zjylv"},{"post_id":"cjvaywf02001d50962y6w82bu","category_id":"cjvaywewj00085096vcqtihnd","_id":"cjvaywf0h001j5096qcmg4tn5"},{"post_id":"cjvayweyc000m5096bbid0xwg","category_id":"cjvaywf00001c50962ooegne5","_id":"cjvaywf0m001m5096sq77mhyp"},{"post_id":"cjvayweye000n5096tujmb0ko","category_id":"cjvaywf07001g5096w282fr91","_id":"cjvaywf0q001o5096inafflvd"},{"post_id":"cjvayweyl000q5096l6cgjymc","category_id":"cjvaywf0k001k5096g53x3kv5","_id":"cjvaywf12001t509655j9sqxw"},{"post_id":"cjvaywewz000a5096dbeectpl","category_id":"cjvayweyi000o5096bnpzzspq","_id":"cjvaywf1d001x50965rkl3rud"},{"post_id":"cjvaywewz000a5096dbeectpl","category_id":"cjvaywf0w001q5096m9hled1r","_id":"cjvaywf1i0020509687e3uzbl"},{"post_id":"cjvayweyu000u5096e18rdh6d","category_id":"cjvaywf13001u5096a7nvgzk8","_id":"cjvaywf1k00225096czfwy6kw"},{"post_id":"cjvayweyz000v5096zwf3kwi5","category_id":"cjvaywf1f001y5096besbfbu7","_id":"cjvaywf1y00265096u35lpfmb"},{"post_id":"cjvaywez3000x5096er5muvh0","category_id":"cjvaywf1l002350968dmplr3l","_id":"cjvaywf26002b5096j2ekstm4"},{"post_id":"cjvaywez7000z5096qrngq4cd","category_id":"cjvaywf200028509677u4nheu","_id":"cjvaywf2i002g5096wlcnc7qn"},{"post_id":"cjvaywez900125096ar6ao6i2","category_id":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywf2v002m5096zzf1x7e5"},{"post_id":"cjvaywezi00145096hva6gvqs","category_id":"cjvaywf1l002350968dmplr3l","_id":"cjvaywf37002r5096l57xa7jr"},{"post_id":"cjvaywezm00165096y1g28xgp","category_id":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywf3h002y5096vnxmnref"},{"post_id":"cjvaywezx001a5096sudai7kl","category_id":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywf4b00365096vha2e5xr"},{"post_id":"cjvaywf05001e5096ptvcmci5","category_id":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywf4d0038509613v374wy"},{"post_id":"cjvaywf08001h5096vxkgfilr","category_id":"cjvaywf07001g5096w282fr91","_id":"cjvaywf4n003b5096nakt7wd6"},{"post_id":"cjvaywf08001h5096vxkgfilr","category_id":"cjvaywf4900355096x2x5bpsp","_id":"cjvaywf4o003c5096stzwftbx"},{"post_id":"cjvaywf0e001i50968utwguau","category_id":"cjvaywf07001g5096w282fr91","_id":"cjvaywf4r003e5096u7lkwon8"},{"post_id":"cjvaywf0e001i50968utwguau","category_id":"cjvaywf4900355096x2x5bpsp","_id":"cjvaywf4t003f5096n4rlheib"},{"post_id":"cjvaywf11001s5096s9h3227x","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf57003k5096uhh6ajtz"},{"post_id":"cjvaywf15001v5096gqggjnl5","category_id":"cjvaywf56003j5096wcnftyqs","_id":"cjvaywf5q003n5096xrtioeq6"},{"post_id":"cjvaywf1b001w5096v9xgk4gh","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf5t003p5096l6u3ruqh"},{"post_id":"cjvaywf1h001z50960oixt92t","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf6q003r5096duvj546i"},{"post_id":"cjvaywf1j00215096xz9fnkkr","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf7a003t5096npbh3a4d"},{"post_id":"cjvaywf1m00245096acjaorp9","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf83003v5096wzfhf4us"},{"post_id":"cjvaywf1r00255096lqnql95b","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf86003x5096tghxlstn"},{"post_id":"cjvaywf1z00275096rnrnujuy","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf8d003y5096la49i9nd"},{"post_id":"cjvaywf2200295096as38npqd","category_id":"cjvaywf84003w50968bvcvaam","_id":"cjvaywf8h00415096t80ih7td"},{"post_id":"cjvaywf23002a5096jrsmjote","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf8k00425096919wb32h"},{"post_id":"cjvaywf2g002f50969bhvslbc","category_id":"cjvaywf8o00435096a4vglgl3","_id":"cjvaywf8w00455096gmdb4jc7"},{"post_id":"cjvaywf2s002j5096bb8m8oh9","category_id":"cjvaywf8u00445096p6cfwczw","_id":"cjvaywf9100485096hjpwlhrl"},{"post_id":"cjvaywf2x002n509673z8pq0h","category_id":"cjvaywf54003i5096b12qu70z","_id":"cjvaywf9c004a5096oe2n19pp"},{"post_id":"cjvaywf2z002o509643g1x4xt","category_id":"cjvaywf84003w50968bvcvaam","_id":"cjvaywf9e004b5096tkuniq0f"},{"post_id":"cjvaywf39002s5096pqyzhx3m","category_id":"cjvaywf9900495096wwo7ktql","_id":"cjvaywf9j004d5096fpsww2lv"},{"post_id":"cjvaywezq00195096ex3lt4mf","category_id":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywf9x004g5096dfqgidhd"},{"post_id":"cjvaywezq00195096ex3lt4mf","category_id":"cjvaywf9e004c5096xc1n9d6u","_id":"cjvaywf9y004h50966o25l7dp"},{"post_id":"cjvaywf3d002u5096qjnlu6tr","category_id":"cjvaywf9900495096wwo7ktql","_id":"cjvaywfa6004j50966fka21x7"},{"post_id":"cjvaywf3j002z5096f9r315ld","category_id":"cjvaywf9900495096wwo7ktql","_id":"cjvaywfau004l5096fqo5pmsz"},{"post_id":"cjvaywf3r00305096v5jtvkcq","category_id":"cjvaywf9900495096wwo7ktql","_id":"cjvaywfau004m5096r6zdxc7g"},{"post_id":"cjvaywf0l001l5096uff7w2jr","category_id":"cjvaywf1l002350968dmplr3l","_id":"cjvaywfb2004o5096ffp49r59"},{"post_id":"cjvaywf0l001l5096uff7w2jr","category_id":"cjvaywfa8004k50961z4tdew1","_id":"cjvaywfb8004q5096ztdhh2qz"},{"post_id":"cjvaywf0n001n5096g0nu6a5o","category_id":"cjvaywf29002c5096kmsfs9ph","_id":"cjvaywfba004s5096a35ts7qn"},{"post_id":"cjvaywf0n001n5096g0nu6a5o","category_id":"cjvaywfav004n5096qxrfxp6a","_id":"cjvaywfbb004t5096is8b8usy"},{"post_id":"cjvaywf0s001p50965qukpqor","category_id":"cjvaywf1l002350968dmplr3l","_id":"cjvaywfbi004v50966s79bfl9"},{"post_id":"cjvaywf0s001p50965qukpqor","category_id":"cjvaywfa8004k50961z4tdew1","_id":"cjvaywfbp004w5096qz2u5gjc"},{"post_id":"cjvaywf0y001r50960aj69bhq","category_id":"cjvaywf1l002350968dmplr3l","_id":"cjvaywfbq004x5096crbpon0l"},{"post_id":"cjvaywf0y001r50960aj69bhq","category_id":"cjvaywfa8004k50961z4tdew1","_id":"cjvaywfbr004y5096afwt0gx3"},{"post_id":"cjvaywf2c002d5096v5sfh30l","category_id":"cjvaywf8g00405096p2rvckqe","_id":"cjvaywfbr004z5096zrfnoc64"},{"post_id":"cjvaywf2c002d5096v5sfh30l","category_id":"cjvaywfbc004u50968njbf9oa","_id":"cjvaywfbs00505096i970mz0u"}],"PostTag":[{"post_id":"cjvaywf23002a5096jrsmjote","tag_id":"cjvaywf2e002e5096jhncu23o","_id":"cjvaywf3b002t50962uad9bz0"},{"post_id":"cjvaywf23002a5096jrsmjote","tag_id":"cjvaywf2u002k5096g0mzhh5x","_id":"cjvaywf3f002v5096is8betyq"},{"post_id":"cjvaywf2g002f50969bhvslbc","tag_id":"cjvaywf31002p5096ux202dx4","_id":"cjvaywf4400335096h5qluyw0"},{"post_id":"cjvaywf2g002f50969bhvslbc","tag_id":"cjvaywf3f002w5096udzkea9p","_id":"cjvaywf48003450969c3d0cm5"},{"post_id":"cjvaywf2j002i5096b0wvl38y","tag_id":"cjvaywf4000325096wx0z2h1z","_id":"cjvaywf4c00375096tw609jp8"}],"Tag":[{"name":"vue","_id":"cjvaywf2e002e5096jhncu23o"},{"name":"vuex","_id":"cjvaywf2u002k5096g0mzhh5x"},{"name":"CSS","_id":"cjvaywf31002p5096ux202dx4"},{"name":"布局","_id":"cjvaywf3f002w5096udzkea9p"},{"name":"git","_id":"cjvaywf4000325096wx0z2h1z"}]}}